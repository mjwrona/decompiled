<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="OneOfTwoRequiredArgumentsIsMissing" xml:space="preserve">
    <value>Either argument {0} or {1} is required.</value>
  </data>
  <data name="ShardingOngoingBlocksTransferIdentityRights" xml:space="preserve">
    <value>VSS82643: The internal state of the organization is such that we currently transfer rights between Identities.  We are currently migrating (sharding) identities in this organization. Please reach out to customer care for assistance.</value>
  </data>
  <data name="CannotAddServicePrincipalToGroup" xml:space="preserve">
    <value>The identity {0} is a service principal and may not be added to a group.</value>
  </data>
  <data name="RestoreGroupScopeValidationError" xml:space="preserve">
    <value>Restore group scope validation error: {0}</value>
  </data>
  <data name="RestoreGroupScopeExecutionError" xml:space="preserve">
    <value>Restore group scope with ScopeId: '{0}' failed. '{1}' failed with status: '{2}'</value>
  </data>
  <data name="UpdateGroupScopeVisibilityError" xml:space="preserve">
    <value>UpdateGroupScopeVisibility Failed. scopeId: '{0}', updatedId: '{1}'</value>
  </data>
  <data name="WarningExceptionSyncingIdentity" xml:space="preserve">
    <value>Exception encountered syncing identity or group with descriptor '{0}'. Details:
{1}</value>
  </data>
  <data name="MustSpecifyPagingResults" xml:space="preserve">
    <value>A paging context must return either groups or non-groups in the results.</value>
  </data>
  <data name="ShardingBlocksAddOrUpdateNewFrameworkUser" xml:space="preserve">
    <value>VSS82644: The internal state of the organization is such that we currently add or update framework identities.  We are currently migrating (sharding) identities in this organization. Please reach out to customer care for assistance.</value>
  </data>
  <data name="WarningFailedToSyncIdentityWithDisplayName" xml:space="preserve">
    <value>Failed to sync identity or group '{0}'. Sid: {1}.</value>
  </data>
  <data name="CannotManageGroupMembershipInEnterpriseScope" xml:space="preserve">
    <value>The specified group: {0} is not an enterprise level group, while scope: {1} of the request is enterprise level. This API when called at enterprise level only supports enterprise level group membership management.</value>
  </data>
  <data name="InvalidContinuationToken" xml:space="preserve">
    <value>The continuationToken '{0}' is not valid.</value>
  </data>
  <data name="stmt_GetCyclicGroupMemberships" xml:space="preserve">
    <value>DECLARE @internalScopeId    INT
DECLARE @scopePath          VARBINARY(404)
DECLARE @membersOfCount       INT
DECLARE @level              INT
DECLARE @rootId             UNIQUEIDENTIFIER
    
CREATE TABLE #group (
Sid     VARCHAR(256)        NOT NULL,
Id      UNIQUEIDENTIFIER    NOT NULL
)
    
CREATE UNIQUE CLUSTERED INDEX IX_groups ON #group (Sid)  
    
-- Resolve the scope
SELECT  @internalScopeId = InternalScopeId,
    @scopePath = ParentPath + CONVERT(BINARY(4), InternalScopeId)
FROM    tbl_GroupScope
WHERE   PartitionId = @partitionId
    AND ScopeId = @scopeId    
    AND Active = 1        
OPTION (OPTIMIZE FOR (@partitionId UNKNOWN))

IF (@@ROWCOUNT = 0)
BEGIN
RETURN
END
    
-- Retrieve all the groups within the scope           
INSERT  #group (Sid, Id)
SELECT  grp.Sid,
    grp.Id
FROM    tbl_GroupScope scope
INNER LOOP JOIN tbl_Group grp WITH (FORCESEEK(IX_tbl_Group_InternalScopeId_SpecialType(PartitionId, InternalScopeId)))
ON      scope.InternalScopeId = grp.InternalScopeId  
    AND scope.PartitionId =  grp.PartitionId
WHERE   scope.PartitionId = @partitionId
    AND scope.ParentPath + CONVERT(BINARY(4), scope.InternalScopeId) BETWEEN @scopePath 
    AND dbo.func_GetBinaryEndRange(@scopePath)
OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN))   
    
CREATE TABLE #ancestorMembership (
    [Level]         INT,
    MemberId        UNIQUEIDENTIFIER,
    AncestorId     UNIQUEIDENTIFIER           
)
    
CREATE UNIQUE INDEX IX_members_Id ON #ancestorMembership (Level, MemberId, AncestorId) WITH (IGNORE_DUP_KEY=ON)
      
-- seed the ancestor with all memberships to detect cycles
INSERT  #ancestorMembership (AncestorId, MemberId, [Level])
SELECT  membership.ContainerId,
    membership.MemberId,
    0
FROM    #group groups
INNER JOIN  tbl_GroupMembership membership WITH (FORCESEEK(PK_tbl_GroupMembership(PartitionId, ContainerId)))
ON  groups.Id = membership.ContainerId
    AND membership.PartitionId = @partitionId
    AND membership.Active = 1

SELECT  @membersOfCount = @@ROWCOUNT

SET @level = 0

-- we get all the ancestor until we get to the root
WHILE (@membersOfCount &lt;&gt; 0)
BEGIN
INSERT  #ancestorMembership (AncestorId, MemberId, [Level])
SELECT  directMembership.AncestorId,
        ancestor.MemberId,
        @level + 1
FROM    #ancestorMembership ancestor
INNER LOOP JOIN  #ancestorMembership directMembership
ON     directMembership.MemberId = ancestor.AncestorId
WHERE   ancestor.[Level] = @level
        AND directMembership.[Level] = 0
        AND NOT EXISTS (select * from #ancestorMembership a where a.AncestorId = directMembership.AncestorId and a.MemberId = ancestor.MemberId)        
SELECT  @membersOfCount = @@ROWCOUNT,
        @level = @level + 1
END
    
-- select the cycles by looking for nodes like a --&gt; b and b --&gt; a
SELECT      seededMembership.AncestorId as ContainerId, ancestorGroups.DisplayName as ContainerDisplayName, seededMembership.MemberId, memberGroups.DisplayName as [MemberDisplayName], ancestor.[Level]
FROM        #ancestorMembership seededMembership
INNER JOIN  #ancestorMembership ancestor
ON          seededMembership.AncestorId = ancestor.MemberId and seededMembership.MemberId = ancestor.AncestorId
INNER JOIN  tbl_group ancestorGroups
ON          seededMembership.AncestorId = ancestorGroups.Id and ancestorGroups.PartitionId = @partitionId
INNER JOIN  tbl_group memberGroups
ON          seededMembership.MemberId =  memberGroups.Id and memberGroups.PartitionId = @partitionId
WHERE       seededMembership.[Level] = 0 order by ancestor.[Level] asc</value>
  </data>
  <data name="MinGroupSequenceIdError" xml:space="preserve">
    <value>Current group sequenceId:{0} is less than the expected minimum group sequenceId:{1}.</value>
  </data>
  <data name="OneOfThreeRequiredArgumentsIsMissing" xml:space="preserve">
    <value>One of the arguments {0} or {1} or {2} is required.</value>
  </data>
  <data name="WarningFailedToSyncIdentity" xml:space="preserve">
    <value>Failed to sync identity or group with descriptor '{0}'.</value>
  </data>
  <data name="ShardingBlocksTransferIdentityRights" xml:space="preserve">
    <value>VSS82646: The internal state of the organization is such that we currently transfer rights between Identities.  However it is not suppported yet for your organization. Please reach out to customer care for assistance.</value>
  </data>
</root>