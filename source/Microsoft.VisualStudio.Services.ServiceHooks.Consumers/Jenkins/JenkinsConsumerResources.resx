<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="JenkinsConsumer_UsernameInputName" xml:space="preserve">
    <value>User name</value>
  </data>
  <data name="JenkinsConsumer_ServerBaseUrlInputDescription" xml:space="preserve">
    <value>The base URL that hosts the Jenkins server</value>
  </data>
  <data name="TriggerGenericBuildAction_BuildParameterizedInputName" xml:space="preserve">
    <value>Accepts parameters</value>
  </data>
  <data name="JenkinsConsumer_IntegrationLevelInputDescription" xml:space="preserve">
    <value>Select integration level, i.e. either the built-in Jenkins API or extended integration provided by the Azure DevOps Server Plugin installed on the Jenkins server. The extended integration is not available if the plugin is not installed.</value>
  </data>
  <data name="JenkinsConsumer_PasswordInputDescription" xml:space="preserve">
    <value>The user's API token, which is available in the Jenkin user configuration page. The API token is new since version 1.426. For earlier versions of Jenkins the real user password must be specified.</value>
  </data>
  <data name="JenkinsConsumer_TfsPliginIntegrationLevel" xml:space="preserve">
    <value>DevOps plugin for Jenkins</value>
  </data>
  <data name="TriggerGenericBuildAction_BuildParameterizedInputDescription" xml:space="preserve">
    <value>Indicates if the build is parameterized or not (build parameters are optionally specified above)</value>
  </data>
  <data name="TriggerGenericBuildActionName" xml:space="preserve">
    <value>Trigger generic build</value>
  </data>
  <data name="TriggerGenericBuildActionDescription" xml:space="preserve">
    <value>Triggers a generic Jenkins build, invoking the Jenkins build URL. Secure, HTTPS endpoints are recommended due to the potential for private data in the event payload. &lt;a href='https://go.microsoft.com/fwlink/?LinkId=393616'&gt;Learn more.&lt;/a&gt;</value>
  </data>
  <data name="TriggerGitBuildActionDescription" xml:space="preserve">
    <value>Triggers a build configured to use a Git repository using the &lt;a href='https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin'&gt;Jenkins Git Plugin&lt;/a&gt;. Secure, HTTPS endpoints are recommended due to the potential for private data in the event payload.</value>
  </data>
  <data name="JenkinsConsumer_UsernameInputDescription" xml:space="preserve">
    <value>The Jenkins user name of a user who is allowed to trigger the build</value>
  </data>
  <data name="TriggerGenericBuildAction_DetailedDescriptionFormat" xml:space="preserve">
    <value>Server: {0}, Build: {1}</value>
  </data>
  <data name="ConsumerName" xml:space="preserve">
    <value>Jenkins</value>
  </data>
  <data name="TriggerGenericBuildAction_BuildParamsInputDescription" xml:space="preserve">
    <value>Build parameteres names and values separated by a colon(e.g. "param1:value1") with each name-value pair appearing on its own line of text</value>
  </data>
  <data name="TriggerGitBuildActionName" xml:space="preserve">
    <value>Trigger Git build</value>
  </data>
  <data name="TriggerGenericBuildAction_BuildParamsInputName" xml:space="preserve">
    <value>Build parameters</value>
  </data>
  <data name="TriggerGenericBuildAction_QueryError_ResponseFailureFormat" xml:space="preserve">
    <value>Jenkins query failed with response '{0}'</value>
  </data>
  <data name="ConsumerDescription" xml:space="preserve">
    <value>&lt;a href="https://jenkins-ci.org" target="_blank"&gt;Jenkins&lt;/a&gt; is an open source continuous integration service.&lt;p/&gt;Install the &lt;a href="https://github.com/jenkinsci/tfs-plugin/blob/master/README.md" target="_blank"&gt;Azure DevOps Server Plugin&lt;/a&gt; on Jenkins to enhance traceability and integration.</value>
  </data>
  <data name="JenkinsConsumer_BuiltInIntegrationLevel" xml:space="preserve">
    <value>Built-in Jenkins API</value>
  </data>
  <data name="TriggerGenericBuildAction_BuildNameInputDescription" xml:space="preserve">
    <value>The build name to trigger</value>
  </data>
  <data name="TriggerGenericBuildAction_BuildAuthTokenInputName" xml:space="preserve">
    <value>Build token</value>
  </data>
  <data name="TriggerGitBuildAction_DetailedDescriptionFormat" xml:space="preserve">
    <value>Server: {0}</value>
  </data>
  <data name="TriggerGenericBuildAction_QueryError_ExceptionFormat" xml:space="preserve">
    <value>Jenkins query failed with exception '{0}'</value>
  </data>
  <data name="JenkinsConsumer_ServerBaseUrlInputName" xml:space="preserve">
    <value>Jenkins base URL</value>
  </data>
  <data name="TriggerGenericBuildAction_QueryError_SuppliedCredentialsNotAuthorized" xml:space="preserve">
    <value>The supplied credentials are not authorized to query Jenkins</value>
  </data>
  <data name="TriggerGenericBuildAction_BuildNameInputName" xml:space="preserve">
    <value>Build</value>
  </data>
  <data name="JenkinsConsumer_PasswordInputName" xml:space="preserve">
    <value>User API token (or password)</value>
  </data>
  <data name="TriggerGenericBuildAction_BuildAuthTokenInputDescription" xml:space="preserve">
    <value>The authorization token in the form of a string so that only those who know it would be able to remotely trigger this project's builds</value>
  </data>
  <data name="JenkinsConsumer_IntegrationLevelInputName" xml:space="preserve">
    <value>Integration level</value>
  </data>
</root>