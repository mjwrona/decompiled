<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PostTeamRoomMessageToHubotAction_UsernameInputName" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="EnqueueTeamRoomMessageToHubotAction_QueueNameInputName" xml:space="preserve">
    <value>Queue name</value>
  </data>
  <data name="EnqueueTeamRoomMessageToHubotActionName" xml:space="preserve">
    <value>Post a message to an Azure Service Bus Queue</value>
  </data>
  <data name="EnqueueTeamRoomMessageToHubotAction_QueryError_SuppliedConnectionStringNotWellFormed" xml:space="preserve">
    <value>The supplied SAS connection string is not valid ({0})</value>
  </data>
  <data name="EnqueueTeamRoomMessageToHubotAction_QueryError_SuppliedConnectionStringNotAuthorized" xml:space="preserve">
    <value>The supplied SAS connection string is not authorized to query the Azure Service Bus namespace</value>
  </data>
  <data name="EnqueueTeamRoomMessageToHubotAction_ConnectionStringInputName" xml:space="preserve">
    <value>SAS connection string</value>
  </data>
  <data name="PostTeamRoomMessageToHubotActionName" xml:space="preserve">
    <value>Post a message</value>
  </data>
  <data name="EnqueueTeamRoomMessageToHubotAction_QueueNameInputDescription" xml:space="preserve">
    <value>The name of the queue to send the message to and where Hubot is listening for new messages. The name can contain only letters, numbers, periods, hyphens, forward slashes, and underscores. The name must start and end with a letter or number. If the queue does not exists, it will be created if the specified connection string has the necessary permissions.</value>
  </data>
  <data name="EnqueueTeamRoomMessageToHubotAction_ConnectionStringInputDescription" xml:space="preserve">
    <value>The SAS (shared access signature) connection string to use to connect with Azure Service Bus. This connection string is available in the Azure Portal.</value>
  </data>
  <data name="PostTeamRoomMessageToHubotAction_PasswordInputDescription" xml:space="preserve">
    <value>Hubot's password (as defined by HUBOT_VSONLINE_ADAPTER_BASIC_AUTH_PASSWORD)</value>
  </data>
  <data name="EnqueueTeamRoomMessageToHubotAction_QueryError_MessagingExceptionFormat" xml:space="preserve">
    <value>Azure Service Bus query failed with response '{0}'</value>
  </data>
  <data name="ConsumerName" xml:space="preserve">
    <value>Hubot</value>
  </data>
  <data name="EnqueueTeamRoomMessageToHubotAction_QueryError_ExceptionFormat" xml:space="preserve">
    <value>Azure Service Bus query failed with exception '{0}'</value>
  </data>
  <data name="EnqueueTeamRoomMessageToHubotActionDescription" xml:space="preserve">
    <value>This action sends a team room message to the specified Azure Service Bus queue. &lt;a href='https://go.microsoft.com/fwlink/?LinkID=402677'&gt;Learn more.&lt;/a&gt;</value>
  </data>
  <data name="PostTeamRoomMessageToHubotAction_UrlInputName" xml:space="preserve">
    <value>URL</value>
  </data>
  <data name="PostTeamRoomMessageToHubotAction_UrlInputDescription" xml:space="preserve">
    <value>Hubot's URL</value>
  </data>
  <data name="PostTeamRoomMessageToHubotAction_UsernameInputDescription" xml:space="preserve">
    <value>Hubot's username (as defined by HUBOT_VSONLINE_ADAPTER_BASIC_AUTH_USERNAME)</value>
  </data>
  <data name="ConsumerDescription" xml:space="preserve">
    <value>Hubot is a popular chat bot service that responds to commands sent by users in a team room; helping automate common tasks like creating work items, checking build status, and viewing recent team activity.</value>
  </data>
  <data name="PostTeamRoomMessageToHubotActionDescription" xml:space="preserve">
    <value>This action sends a team room message to the specified URL (typically this URL will end with /hubot/messagehook). A strong user name and password are highly recommended. &lt;a href='https://go.microsoft.com/fwlink/?LinkID=402677'&gt;Learn more.&lt;/a&gt;</value>
  </data>
  <data name="PostTeamRoomMessageToHubotAction_PasswordInputName" xml:space="preserve">
    <value>Password</value>
  </data>
</root>