<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BadQuery_InvalidComparisonType" xml:space="preserve">
    <value>Query expression is invalid, expression {0} of type {1} cannot be used in this context.</value>
  </data>
  <data name="BadSession" xml:space="preserve">
    <value>Session object retrieved from client with endpoint {0} cannot be used on a client initialized to endpoint {1}.</value>
  </data>
  <data name="AuthTokenNotFound" xml:space="preserve">
    <value>The client does not have any valid token for the requested resource {0}.</value>
  </data>
  <data name="InvalidSkipValue" xml:space="preserve">
    <value>The count value provided for a Skip expression must be a non-negative integer.</value>
  </data>
  <data name="BadQuery_IllegalMemberAccess" xml:space="preserve">
    <value>Query expression is invalid, member {0} of type {1} is invalid.</value>
  </data>
  <data name="BadQuery_InvalidArrayIndexType" xml:space="preserve">
    <value>Type {0} for an array index parameter is invalid. Array index parameter must be int.</value>
  </data>
  <data name="OnlyLINQMethodsAreSupported" xml:space="preserve">
    <value>Method '{0}' is not supported. Only LINQ Methods are supported.</value>
  </data>
  <data name="BadQuery_InvalidExpression" xml:space="preserve">
    <value>Query expression is invalid, expression {0} is unsupported. Supported expressions are 'Queryable.Where', 'Queryable.Select' &amp; 'Queryable.SelectMany'</value>
  </data>
  <data name="ConstantTypeIsNotSupported" xml:space="preserve">
    <value>Constant of type '{0}' is not supported.</value>
  </data>
  <data name="ValueAndAnonymousTypesAndGeometryOnly" xml:space="preserve">
    <value>Instantiation of only value types, anonymous types and spatial types are supported.</value>
  </data>
  <data name="InvalidRangeError" xml:space="preserve">
    <value>Range low value must be less than or equal the high value.</value>
  </data>
  <data name="BadQuery_InvalidArrayIndexExpression" xml:space="preserve">
    <value>Query expression is invalid, expression {0} is unsupported in this context. Supported expressions are MemberAccess and ArrayIndex.</value>
  </data>
  <data name="ExpectedMethodCallsMethods" xml:space="preserve">
    <value>Expected a static IQueryable or IEnumerable extension method, received an instance method.</value>
  </data>
  <data name="ConstructorInvocationNotSupported" xml:space="preserve">
    <value>Constructor invocation is not supported.</value>
  </data>
  <data name="StringCompareToInvalidOperator" xml:space="preserve">
    <value>Invalid operator for string.CompareTo(). Vaid operators are ('==', '&lt;', '&lt;=', '&gt;' or '&gt;=')</value>
  </data>
  <data name="UnexpectedTokenType" xml:space="preserve">
    <value>Unexpected token type: {0}</value>
  </data>
  <data name="FailedToEvaluateSpatialExpression" xml:space="preserve">
    <value>Expression tree cannot be processed because evaluation of Spatial expression failed.</value>
  </data>
  <data name="BadQuery_InvalidComparison" xml:space="preserve">
    <value>Query expression is invalid, expression {0} must either have LHS or RHS as constant.</value>
  </data>
  <data name="NotSupported" xml:space="preserve">
    <value>Not supported.</value>
  </data>
  <data name="PartitionKeyExtractError" xml:space="preserve">
    <value>Unable to extract partition key from document. Ensure that you have provided a valid PartitionKeyValueExtractor function.</value>
  </data>
  <data name="PartitionResolver_DatabaseDoesntExist" xml:space="preserve">
    <value>No IPartitionResolver available for this database</value>
  </data>
  <data name="PathExpressionsOnly" xml:space="preserve">
    <value>Only path expressions are supported for SelectMany.</value>
  </data>
  <data name="UnaryOperatorNotSupported" xml:space="preserve">
    <value>Unary operator '{0}' is not supported.</value>
  </data>
  <data name="BadQuery_InvalidLeftExpression" xml:space="preserve">
    <value>Query expression is invalid, expression {0} is not allowed in this context.</value>
  </data>
  <data name="BadQuery_InvalidMethodCall" xml:space="preserve">
    <value>Query expression is invalid, method call {0} is not allowed at this context. Allowed methods are {1}.</value>
  </data>
  <data name="BadQuery_InvalidQueryType" xml:space="preserve">
    <value>QueryType {0} is not supported.</value>
  </data>
  <data name="InvalidCallToUserDefinedFunctionProvider" xml:space="preserve">
    <value>This method should only be called within Linq expression to Invoke a User-defined function.</value>
  </data>
  <data name="RangeNotFoundError" xml:space="preserve">
    <value>A containing range for {0} doesn't exist in the partition map.</value>
  </data>
  <data name="InvalidArgumentsCount" xml:space="preserve">
    <value>Incorrect number of arguments for method '{0}'. Expected '{1}' but received '{2}'.</value>
  </data>
  <data name="InvalidTakeValue" xml:space="preserve">
    <value>The count value provided for a Take expression must be a non-negative integer.</value>
  </data>
  <data name="BadQuery_TransformQueryException" xml:space="preserve">
    <value>An error occured while evaluating the transform expression {0}.</value>
  </data>
  <data name="MethodNotSupported" xml:space="preserve">
    <value>Method '{0}' is not supported.</value>
  </data>
  <data name="MediaLinkInvalid" xml:space="preserve">
    <value>MediaLink is invalid</value>
  </data>
  <data name="UnsupportedPartitionKey" xml:space="preserve">
    <value>Unsupported type {0} for partitionKey.</value>
  </data>
  <data name="UnexpectedAuthTokenType" xml:space="preserve">
    <value>Unexpected authorization token type '({0})'. Expected '{1}'.</value>
  </data>
  <data name="ExpressionTypeIsNotSupported" xml:space="preserve">
    <value>Expression with NodeType '{0}' is not supported.</value>
  </data>
  <data name="InvalidTypesForMethod" xml:space="preserve">
    <value>Method '{0}' can not be invoked for type '{1}'. Supported types are '[{2}]'.</value>
  </data>
  <data name="PartitionPropertyNotFound" xml:space="preserve">
    <value>Partition property not found in the document.</value>
  </data>
  <data name="BadQuery_InvalidMemberAccessExpression" xml:space="preserve">
    <value>Query expression is invalid, expression {0} is unsupported in this context. Supported expressions are parameter reference, array index and property reference.</value>
  </data>
  <data name="BinaryOperatorNotSupported" xml:space="preserve">
    <value>Binary operator '{0}' is not supported.</value>
  </data>
  <data name="MemberBindingNotSupported" xml:space="preserve">
    <value>Member binding is not supported.</value>
  </data>
  <data name="PartitionResolver_DatabaseAlreadyExist" xml:space="preserve">
    <value>An IPartitionResolver already exists for this database</value>
  </data>
  <data name="InputIsNotIDocumentQuery" xml:space="preserve">
    <value>Input is not of type IDocumentQuery.</value>
  </data>
  <data name="BadQuery_TooManySelectManyArguments" xml:space="preserve">
    <value>Query expression is invalid, expression {0} contains too many arguments. </value>
  </data>
  <data name="BadQuery_InvalidReturnType" xml:space="preserve">
    <value>Query expression is invalid, expression return type {0} is unsupported. Query must evaluate to IEnumerable.</value>
  </data>
  <data name="StringCompareToInvalidConstant" xml:space="preserve">
    <value>The right hand side of string.CompareTo() comparison must be constant '0'</value>
  </data>
  <data name="UdfNameIsNullOrEmpty" xml:space="preserve">
    <value>User-defined function name can not be null or empty.</value>
  </data>
</root>