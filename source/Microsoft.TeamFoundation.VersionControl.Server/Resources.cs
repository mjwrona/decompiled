// Decompiled with JetBrains decompiler
// Type: Microsoft.TeamFoundation.VersionControl.Server.Resources
// Assembly: Microsoft.TeamFoundation.VersionControl.Server, Version=19.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: C5D9EE74-8805-4E00-959F-39760D2358B5
// Assembly location: C:\Program Files\Azure DevOps Server 2022\Application Tier\Web Services\bin\Microsoft.TeamFoundation.VersionControl.Server.dll

using System;
using System.Globalization;
using System.Reflection;
using System.Resources;

namespace Microsoft.TeamFoundation.VersionControl.Server
{
  internal static class Resources
  {
    private static ResourceManager s_resMgr = new ResourceManager(nameof (Resources), typeof (Microsoft.TeamFoundation.VersionControl.Server.Resources).GetTypeInfo().Assembly);
    public const string AcceptMergeNamespaceConflictRequiresDestinationException = "AcceptMergeNamespaceConflictRequiresDestinationException";
    public const string AcceptYoursRenameTheirsRequiresDestinationException = "AcceptYoursRenameTheirsRequiresDestinationException";
    public const string AdministrativeStateChange = "AdministrativeStateChange";
    public const string ArtifactUnaccessible = "ArtifactUnaccessible";
    public const string AuthorizationDeniedException = "AuthorizationDeniedException";
    public const string AuthorizationException = "AuthorizationException";
    public const string BisLatestItemVersionDeletedArtifactFormat = "BisLatestItemVersionDeletedArtifactFormat";
    public const string BisLatestItemVersionArtifactFormat = "BisLatestItemVersionArtifactFormat";
    public const string BranchSourceNotCommittedException = "BranchSourceNotCommittedException";
    public const string CanNotChangeRootFolderException = "CanNotChangeRootFolderException";
    public const string CannotChangeWorkspaceOwnerException = "CannotChangeWorkspaceOwnerException";
    public const string CannotCloakRoot = "CannotCloakRoot";
    public const string CannotCreateFilesInRootException = "CannotCreateFilesInRootException";
    public const string CanNotCreateParentFolderException = "CanNotCreateParentFolderException";
    public const string CannotDeleteTeamProjectFolderException = "CannotDeleteTeamProjectFolderException";
    public const string CannotLockException = "CannotLockException";
    public const string CanNotMergeUnderSourceException = "CanNotMergeUnderSourceException";
    public const string CanNotMergeWithExistingMergeConflict = "CanNotMergeWithExistingMergeConflict";
    public const string CannotMoveToRootException = "CannotMoveToRootException";
    public const string CannotPendChangeOnDestroyedFileException = "CannotPendChangeOnDestroyedFileException";
    public const string CannotMergeDestroyedFileException = "CannotMergeDestroyedFileException";
    public const string CannotBranchDestroyedContentException = "CannotBranchDestroyedContentException";
    public const string CannotUndeleteTeamProjectFolderException = "CannotUndeleteTeamProjectFolderException";
    public const string CannotQueryEffectivePermissionException = "CannotQueryEffectivePermissionException";
    public const string CanNotRenameBackToOriginalSourceException = "CanNotRenameBackToOriginalSourceException";
    public const string CanNotResolveToPartialUndeleteException = "CanNotResolveToPartialUndeleteException";
    public const string CanNotSetMappingOnRenameException = "CanNotSetMappingOnRenameException";
    public const string CannotUnlockException = "CannotUnlockException";
    public const string ChangeAlreadyPendingException = "ChangeAlreadyPendingException";
    public const string ChangesetAuthorMustBeNonGroupException = "ChangesetAuthorMustBeNonGroupException";
    public const string ChangesetNotFoundException = "ChangesetNotFoundException";
    public const string ChangeTypeNotSupported = "ChangeTypeNotSupported";
    public const string RenameNotAllowedOnUncommittedItem = "RenameNotAllowedOnUncommittedItem";
    public const string CheckinLockType = "CheckinLockType";
    public const string CheckOutLockType = "CheckOutLockType";
    public const string CloakHasChildren = "CloakHasChildren";
    public const string CloakWithNoParent = "CloakWithNoParent";
    public const string CollapsedMapping = "CollapsedMapping";
    public const string ContentRequiredException = "ContentRequiredException";
    public const string DateVersionSpecBeforeBeginningOfRepositoryException = "DateVersionSpecBeforeBeginningOfRepositoryException";
    public const string DeletedTeamProjectFolder = "DeletedTeamProjectFolder";
    public const string DeletedItemNotFound = "DeletedItemNotFound";
    public const string DeletedItemNotFoundRecursive = "DeletedItemNotFoundRecursive";
    public const string DownloadKeyInvalid = "DownloadKeyInvalid";
    public const string DownloadKeyLengthInvalid = "DownloadKeyLengthInvalid";
    public const string DuplicateExtensionException = "DuplicateExtensionException";
    public const string DuplicateFileTypeException = "DuplicateFileTypeException";
    public const string DuplicateItemFoundException = "DuplicateItemFoundException";
    public const string DuplicateServerItemException = "DuplicateServerItemException";
    public const string DuplicateWorkingFolderException = "DuplicateWorkingFolderException";
    public const string EmptyPermissionsOrInheritanceError = "EmptyPermissionsOrInheritanceError";
    public const string ErrorFilterPathsArgumentSpecification = "ErrorFilterPathsArgumentSpecification";
    public const string ExceptionSource = "ExceptionSource";
    public const string FileCacheRootNotSet = "FileCacheRootNotSet";
    public const string FolderContentException = "FolderContentException";
    public const string FolderEditException = "FolderEditException";
    public const string FolderMappedTwice = "FolderMappedTwice";
    public const string FutureDateException = "FutureDateException";
    public const string DeltaComputationError = "DeltaComputationError";
    public const string DeltaComputationErrorRetry = "DeltaComputationErrorRetry";
    public const string DeltaTooLargeException = "DeltaTooLargeException";
    public const string IdentityNotFound = "IdentityNotFound";
    public const string IllegalCommentException = "IllegalCommentException";
    public const string IllegalComputerNameException = "IllegalComputerNameException";
    public const string IllegalFieldNameException = "IllegalFieldNameException";
    public const string IllegalFileContentsException = "IllegalFileContentsException";
    public const string IllegalLabelNameException = "IllegalLabelNameException";
    public const string IllegalPolicyNameException = "IllegalPolicyNameException";
    public const string IllegalServerItemException = "IllegalServerItemException";
    public const string IllegalServerLogValue = "IllegalServerLogValue";
    public const string IllegalServerStateChange = "IllegalServerStateChange";
    public const string IllegalUrlException = "IllegalUrlException";
    public const string IllegalShelvesetOwnerException = "IllegalShelvesetOwnerException";
    public const string IncompatibleChangeException = "IncompatibleChangeException";
    public const string InconsistentRequestTypesException = "InconsistentRequestTypesException";
    public const string InvalidAcceptYoursException = "InvalidAcceptYoursException";
    public const string InvalidAcceptYoursRenameTheirsException = "InvalidAcceptYoursRenameTheirsException";
    public const string InvalidAddEncoding = "InvalidAddEncoding";
    public const string InvalidConflictIdException = "InvalidConflictIdException";
    public const string InvalidExtensionException = "InvalidExtensionException";
    public const string InvalidIdentityException = "InvalidIdentityException";
    public const string InvalidServerProcessId = "InvalidServerProcessId";
    public const string InvalidTeamProject = "InvalidTeamProject";
    public const string InvalidProjectPendingChangeException = "InvalidProjectPendingChangeException";
    public const string InvalidTFSIdentityException = "InvalidTFSIdentityException";
    public const string InvalidVersionNumberException = "InvalidVersionNumberException";
    public const string ItemCloakedException = "ItemCloakedException";
    public const string ItemDeletedException = "ItemDeletedException";
    public const string ItemExistsException = "ItemExistsException";
    public const string ItemIdNotFound = "ItemIdNotFound";
    public const string ItemLockedException = "ItemLockedException";
    public const string ItemNotCheckedOutException = "ItemNotCheckedOutException";
    public const string ItemNotMappedException = "ItemNotMappedException";
    public const string ItemRequiredException = "ItemRequiredException";
    public const string KillProcess = "KillProcess";
    public const string LabelExistsException = "LabelExistsException";
    public const string LabelHasChildrenException = "LabelHasChildrenException";
    public const string LabelItemNotFound = "LabelItemNotFound";
    public const string LabelItemNotFoundRecursive = "LabelItemNotFoundRecursive";
    public const string LabelNotFoundException = "LabelNotFoundException";
    public const string LabelNotUniqueException = "LabelNotUniqueException";
    public const string LabelOwnerChangeException = "LabelOwnerChangeException";
    public const string LabelPendingAddException = "LabelPendingAddException";
    public const string LatestItemNotFound = "LatestItemNotFound";
    public const string LatestItemNotFoundRecursive = "LatestItemNotFoundRecursive";
    public const string LatestVersionDeletedException = "LatestVersionDeletedException";
    public const string LocalItemOutOfDateException = "LocalItemOutOfDateException";
    public const string LocalItemRequiredException = "LocalItemRequiredException";
    public const string LocalPathTooLong = "LocalPathTooLong";
    public const string LocalVersionNotFoundException = "LocalVersionNotFoundException";
    public const string MergeConflictExistsException = "MergeConflictExistsException";
    public const string MergeNonTargetMappableItem = "MergeNonTargetMappableItem";
    public const string MergeTargetCannotLockError = "MergeTargetCannotLockError";
    public const string MergeTargetCloakedException = "MergeTargetCloakedException";
    public const string MergeTargetFileSourceDirectory = "MergeTargetFileSourceDirectory";
    public const string MergeTargetNotMappedException = "MergeTargetNotMappedException";
    public const string MergeTargetPathAlreadyHasPendingMergeException = "MergeTargetPathAlreadyHasPendingMergeException";
    public const string MergeTargetPathHasImpliedPendingDelete = "MergeTargetPathHasImpliedPendingDelete";
    public const string MergeDeletingDirectoryEscapingRename = "MergeDeletingDirectoryEscapingRename";
    public const string UnshelveDeletingDirectoryEscapingRename = "UnshelveDeletingDirectoryEscapingRename";
    public const string MergeTargetPathHasInCompatiblePendingChangeException = "MergeTargetPathHasInCompatiblePendingChangeException";
    public const string BranchTargetPathHasInCompatiblePendingChangeException = "BranchTargetPathHasInCompatiblePendingChangeException";
    public const string MergeTargetPathHasNamespacePendingChangeConflictException = "MergeTargetPathHasNamespacePendingChangeConflictException";
    public const string MissingParentIsRenameOrUndeleteException = "MissingParentIsRenameOrUndeleteException";
    public const string MustUndeleteParentException = "MustUndeleteParentException";
    public const string NoLockExistsException = "NoLockExistsException";
    public const string NoMergeRelationshipException = "NoMergeRelationshipException";
    public const string NoPendingChanges = "NoPendingChanges";
    public const string NoSubscriberPluginsFound = "NoSubscriberPluginsFound";
    public const string NotWorkspaceOwnerException = "NotWorkspaceOwnerException";
    public const string OwnerRequiredException = "OwnerRequiredException";
    public const string PendingParentDeleteException = "PendingParentDeleteException";
    public const string PartialRenameConflictException = "PartialRenameConflictException";
    public const string PendingChangeMergeConflictExistsException = "PendingChangeMergeConflictExistsException";
    public const string PendingChangeContentNotFoundException = "PendingChangeContentNotFoundException";
    public const string PendingChildException = "PendingChildException";
    public const string PendingDeleteConflictChange = "PendingDeleteConflictChange";
    public const string PerfCounterAverageResponseTime = "PerfCounterAverageResponseTime";
    public const string PerfCounterAverageResponseTimeBase = "PerfCounterAverageResponseTimeBase";
    public const string PerfCounterDownload = "PerfCounterDownload";
    public const string PerfCounterDownloadRate = "PerfCounterDownloadRate";
    public const string PerfCounterTotalActiveRequests = "PerfCounterTotalActiveRequests";
    public const string PerfCounterTotalRequestsName = "PerfCounterTotalRequestsName";
    public const string PerfCounterUpload = "PerfCounterUpload";
    public const string PerfCounterUploadRate = "PerfCounterUploadRate";
    public const string PluginHasMultipleInterfacesException = "PluginHasMultipleInterfacesException";
    public const string PluginInitializationFailure = "PluginInitializationFailure";
    public const string PluginLoaded = "PluginLoaded";
    public const string PluginLoadList = "PluginLoadList";
    public const string TeamProjectCannotDeleteException = "TeamProjectCannotDeleteException";
    public const string TeamProjectInitializeFailed = "TeamProjectInitializeFailed";
    public const string TeamProjectNotFoundException = "TeamProjectNotFoundException";
    public const string TeamProjectHasBeenDeletedException = "TeamProjectHasBeenDeletedException";
    public const string ReconcileBlockedByProjectRenameException = "ReconcileBlockedByProjectRenameException";
    public const string RenameWorkingFolderException = "RenameWorkingFolderException";
    public const string ReservedAnnotationException = "ReservedAnnotationException";
    public const string ServerLogStateChanged = "ServerLogStateChanged";
    public const string ServerStateChanged = "ServerStateChanged";
    public const string ShelveMergeConflictExistsException = "ShelveMergeConflictExistsException";
    public const string ShelvingPartialRenameConflictException = "ShelvingPartialRenameConflictException";
    public const string ShelvedChangeNotFound = "ShelvedChangeNotFound";
    public const string ShelvesetExistsException = "ShelvesetExistsException";
    public const string SqlException = "SqlException";
    public const string SubscriberLoadFailure = "SubscriberLoadFailure";
    public const string SystenNotAvailable = "SystenNotAvailable";
    public const string SystemStartMessage = "SystemStartMessage";
    public const string SystemStopMessage = "SystemStopMessage";
    public const string TargetCloakedException = "TargetCloakedException";
    public const string TargetHasPendingChangeException = "TargetHasPendingChangeException";
    public const string TargetIsChildException = "TargetIsChildException";
    public const string TempFileDeleteError = "TempFileDeleteError";
    public const string UndeleteAboveUnrelatedItemExpception = "UndeleteAboveUnrelatedItemExpception";
    public const string UnknownError = "UnknownError";
    public const string UnknownMergeError = "UnknownMergeError";
    public const string UnknownString = "UnknownString";
    public const string IncompletePendingChangeException = "IncompletePendingChangeException";
    public const string InitialPermissionAssignmentFailure = "InitialPermissionAssignmentFailure";
    public const string VersionConflictException = "VersionConflictException";
    public const string VersionControlException = "VersionControlException";
    public const string WarningPendChanges = "WarningPendChanges";
    public const string WildcardNotAllowedException = "WildcardNotAllowedException";
    public const string WildcardNotAllowedForBranchSource = "WildcardNotAllowedForBranchSource";
    public const string WildcardNotAllowedForMergeSource = "WildcardNotAllowedForMergeSource";
    public const string WildcardNotAllowedForMergeTarget = "WildcardNotAllowedForMergeTarget";
    public const string WildcardNotAllowedForRenameSource = "WildcardNotAllowedForRenameSource";
    public const string WildcardNotAllowedForRenameTarget = "WildcardNotAllowedForRenameTarget";
    public const string WildcardNotAllowedInProjectName = "WildcardNotAllowedInProjectName";
    public const string WorkingFolderCreationException = "WorkingFolderCreationException";
    public const string WorkingFolderInUseException = "WorkingFolderInUseException";
    public const string WorkspaceCreationException = "WorkspaceCreationException";
    public const string WorkspaceDeletionException = "WorkspaceDeletionException";
    public const string WorkspaceExistsException = "WorkspaceExistsException";
    public const string WorkspaceNotFoundException = "WorkspaceNotFoundException";
    public const string WorkspaceRequiresComputerNameException = "WorkspaceRequiresComputerNameException";
    public const string DuplicateChangeException = "DuplicateChangeException";
    public const string IncompatibleCompressionFormatException = "IncompatibleCompressionFormatException";
    public const string BadChecksumException = "BadChecksumException";
    public const string IncorrectSizeException = "IncorrectSizeException";
    public const string IncompleteUploadException = "IncompleteUploadException";
    public const string ParameterFormatException = "ParameterFormatException";
    public const string UnableToLoadDll = "UnableToLoadDll";
    public const string UnsupportedContentType = "UnsupportedContentType";
    public const string FileIdNotFoundException = "FileIdNotFoundException";
    public const string NoChangesToShelveException = "NoChangesToShelveException";
    public const string InvalidFileIdException = "InvalidFileIdException";
    public const string InvalidConflictType = "InvalidConflictType";
    public const string MidTierInstanceSuffix = "MidTierInstanceSuffix";
    public const string InvalidSqlDateException = "InvalidSqlDateException";
    public const string AllItemsInChangeset = "AllItemsInChangeset";
    public const string AtLeastOneItemInChangeset = "AtLeastOneItemInChangeset";
    public const string DuplicateCheckinNoteFieldException = "DuplicateCheckinNoteFieldException";
    public const string CannotUndoItemExistingLockConflictsException = "CannotUndoItemExistingLockConflictsException";
    public const string CacheException = "CacheException";
    public const string CheckoutLockRequiredException = "CheckoutLockRequiredException";
    public const string MergeDoNotHaveTargetLocallyException = "MergeDoNotHaveTargetLocallyException";
    public const string WorkspaceNonDefaultItemNotFound = "WorkspaceNonDefaultItemNotFound";
    public const string WorkspaceNonDefaultItemNotFoundRecursive = "WorkspaceNonDefaultItemNotFoundRecursive";
    public const string AcceptMergeVersionConflictRequiresDestination = "AcceptMergeVersionConflictRequiresDestination";
    public const string CanNotCheckinPartialUndeleteException = "CanNotCheckinPartialUndeleteException";
    public const string CannotResolveDeletedItemWithAcceptMergeException = "CannotResolveDeletedItemWithAcceptMergeException";
    public const string GenerateRepositoryKeyException = "GenerateRepositoryKeyException";
    public const string BranchTargetPathHasImpliedPendingDelete = "BranchTargetPathHasImpliedPendingDelete";
    public const string UnshelveTargetPathHasImpliedPendingDelete = "UnshelveTargetPathHasImpliedPendingDelete";
    public const string BranchTargetPathHasNamespacePendingChangeConflictException = "BranchTargetPathHasNamespacePendingChangeConflictException";
    public const string CannotMergeWithWorkspaceSpecAndPendingDeleteException = "CannotMergeWithWorkspaceSpecAndPendingDeleteException";
    public const string CannotBranchWithWorkspaceSpecAndPendingDeleteException = "CannotBranchWithWorkspaceSpecAndPendingDeleteException";
    public const string CannotMergeItemThatDoesNotExistInEndVersionSpec = "CannotMergeItemThatDoesNotExistInEndVersionSpec";
    public const string CannotMergeRenameOfMergeSourceItemToMergeTarget = "CannotMergeRenameOfMergeSourceItemToMergeTarget";
    public const string ArchiveFileType = "ArchiveFileType";
    public const string ASPNETFileType = "ASPNETFileType";
    public const string AudioVideoFileType = "AudioVideoFileType";
    public const string CSFileType = "CSFileType";
    public const string CPPFileType = "CPPFileType";
    public const string CommonWebFileType = "CommonWebFileType";
    public const string ConfigFileType = "ConfigFileType";
    public const string CrystalReportFileType = "CrystalReportFileType";
    public const string DatabaseFileType = "DatabaseFileType";
    public const string DistribSysDiagramsFileType = "DistribSysDiagramsFileType";
    public const string ExecutableFileType = "ExecutableFileType";
    public const string ImageFileType = "ImageFileType";
    public const string IntermediateCompiledFileType = "IntermediateCompiledFileType";
    public const string MSOfficeFileType = "MSOfficeFileType";
    public const string MiscSourceFileType = "MiscSourceFileType";
    public const string OtherCommonBinFileType = "OtherCommonBinFileType";
    public const string ReportFileType = "ReportFileType";
    public const string ResourceFileType = "ResourceFileType";
    public const string ScriptFileType = "ScriptFileType";
    public const string TextFileType = "TextFileType";
    public const string VBFileType = "VBFileType";
    public const string VisualJSFileType = "VisualJSFileType";
    public const string VSTeamTestFileType = "VSTeamTestFileType";
    public const string XMLFileType = "XMLFileType";
    public const string ExistingParentFileException = "ExistingParentFileException";
    public const string MergeEditDeleteException = "MergeEditDeleteException";
    public const string CannotMergeDeletePendingChild = "CannotMergeDeletePendingChild";
    public const string CannotSpecifyNewNameException = "CannotSpecifyNewNameException";
    public const string DestroyRecursionTypeMustBeFull = "DestroyRecursionTypeMustBeFull";
    public const string StopAtSpecMustBeNullOrLastestIfNotKeepingHistory = "StopAtSpecMustBeNullOrLastestIfNotKeepingHistory";
    public const string CannotDestroyItemInUseByShelf = "CannotDestroyItemInUseByShelf";
    public const string CannotDestroyItemInUseByWorkspace = "CannotDestroyItemInUseByWorkspace";
    public const string DestroyChangesetComment = "DestroyChangesetComment";
    public const string DestroyEventLogMessage = "DestroyEventLogMessage";
    public const string DestroyEventLogMessageBrief = "DestroyEventLogMessageBrief";
    public const string UnshelvingPartialRenameException = "UnshelvingPartialRenameException";
    public const string IdentityDeletedException = "IdentityDeletedException";
    public const string CannotPendEditOnDeletedFileWithGetLatestException = "CannotPendEditOnDeletedFileWithGetLatestException";
    public const string CannotPendEditOnRenamedFileWithGetLatestException = "CannotPendEditOnRenamedFileWithGetLatestException";
    public const string OptionRequestedButNotSupported = "OptionRequestedButNotSupported";
    public const string MaxRowsEvaluatedException = "MaxRowsEvaluatedException";
    public const string WorkingFolderWildcard = "WorkingFolderWildcard";
    public const string WorkingFolderDepthNotSupported = "WorkingFolderDepthNotSupported";
    public const string CannotFindLatestChangesetException = "CannotFindLatestChangesetException";
    public const string CannotShelvePartialUndeleteException = "CannotShelvePartialUndeleteException";
    public const string DuplicateLabelItem = "DuplicateLabelItem";
    public const string InvalidLevelForLockItem = "InvalidLevelForLockItem";
    public const string InvalidGetOptionMaxResults = "InvalidGetOptionMaxResults";
    public const string PendingLocalVersionMismatchException = "PendingLocalVersionMismatchException";
    public const string ArtifactIdentifierRequiredException = "ArtifactIdentifierRequiredException";
    public const string RefreshIdentityException = "RefreshIdentityException";
    public const string CannotCheckinAllWithEdits = "CannotCheckinAllWithEdits";
    public const string WorkspaceVerOlderThanRollbackVerException = "WorkspaceVerOlderThanRollbackVerException";
    public const string TargetPathHasInCompatiblePendingChangeException = "TargetPathHasInCompatiblePendingChangeException";
    public const string RollbackTargetPathHasNamespacePendingChangeConflict = "RollbackTargetPathHasNamespacePendingChangeConflict";
    public const string CannotRollbackWithExistingConflict = "CannotRollbackWithExistingConflict";
    public const string CannotRollbackSourceOrBaseDestroyed = "CannotRollbackSourceOrBaseDestroyed";
    public const string CannotRollbackLocalItemConflict = "CannotRollbackLocalItemConflict";
    public const string CannotUndeleteDifferentDeletionId = "CannotUndeleteDifferentDeletionId";
    public const string CannotDeleteEditItemWithConflict = "CannotDeleteEditItemWithConflict";
    public const string ParentDeleteException = "ParentDeleteException";
    public const string RollbackItemNotOwnedByRoot = "RollbackItemNotOwnedByRoot";
    public const string RollbackInvalidVersionSpecFrom = "RollbackInvalidVersionSpecFrom";
    public const string RollbackInvalidVersionSpecTo = "RollbackInvalidVersionSpecTo";
    public const string RollbackConflictingPendingRename = "RollbackConflictingPendingRename";
    public const string BranchObjectParentChildAlreadyExists = "BranchObjectParentChildAlreadyExists";
    public const string IdentityNotFoundException = "IdentityNotFoundException";
    public const string BranchParentCycle = "BranchParentCycle";
    public const string BranchParentDoesNotExist = "BranchParentDoesNotExist";
    public const string BranchParentMaximumDepthExceeded = "BranchParentMaximumDepthExceeded";
    public const string BranchParentNoMergeRelationship = "BranchParentNoMergeRelationship";
    public const string CannotCreateBranchAlreadyExists = "CannotCreateBranchAlreadyExists";
    public const string CannotUpdateBranchDoesNotExist = "CannotUpdateBranchDoesNotExist";
    public const string BranchParentNotFound = "BranchParentNotFound";
    public const string MaxInputsExceeded = "MaxInputsExceeded";
    public const string ItemNotLatestException = "ItemNotLatestException";
    public const string WorkingFolderDepthCloakNotSupported = "WorkingFolderDepthCloakNotSupported";
    public const string BranchMappingNotUnderRoot = "BranchMappingNotUnderRoot";
    public const string VersionSpecNotAllowed = "VersionSpecNotAllowed";
    public const string GlobalAnnotationsNotSupported = "GlobalAnnotationsNotSupported";
    public const string InvalidOptionCombination = "InvalidOptionCombination";
    public const string SecurityConfigurationException = "SecurityConfigurationException";
    public const string PendingChangeChangedException = "PendingChangeChangedException";
    public const string AllPendingChangeWarningsNotIncluded = "AllPendingChangeWarningsNotIncluded";
    public const string AffectedChangesOnlyInPreviewMode = "AffectedChangesOnlyInPreviewMode";
    public const string CouldNotDeleteProxy = "CouldNotDeleteProxy";
    public const string CouldNotAddProxy = "CouldNotAddProxy";
    public const string Merge2SourceItemsMergingTo1Target = "Merge2SourceItemsMergingTo1Target";
    public const string DuplicateItemsInCheckInRequest = "DuplicateItemsInCheckInRequest";
    public const string UndeleteNewNameNotSupported = "UndeleteNewNameNotSupported";
    public const string CannotCheckinWithoutParentalRenameException = "CannotCheckinWithoutParentalRenameException";
    public const string CannotCheckinWithoutChildRenameDeleteException = "CannotCheckinWithoutChildRenameDeleteException";
    public const string CannotCheckinRenameAsPendingAddConflicts = "CannotCheckinRenameAsPendingAddConflicts";
    public const string EmptyCheckInRequest = "EmptyCheckInRequest";
    public const string InsufficientAccessToSetPropertiesOnChangeset = "InsufficientAccessToSetPropertiesOnChangeset";
    public const string PropertySetOperationFailed = "PropertySetOperationFailed";
    public const string InvalidCheckinTicket = "InvalidCheckinTicket";
    public const string EmptyCheckInWithDeferNotAllowed = "EmptyCheckInWithDeferNotAllowed";
    public const string TrackMergesExceededMaxBranchesLimit = "TrackMergesExceededMaxBranchesLimit";
    public const string CannotRollbackToVersionWithoutItem = "CannotRollbackToVersionWithoutItem";
    public const string StreamMustSupportSeek = "StreamMustSupportSeek";
    public const string RollbackRenameSourceExcluded = "RollbackRenameSourceExcluded";
    public const string RollbackRenameTargetExcluded = "RollbackRenameTargetExcluded";
    public const string WebMethodNotSupportedException = "WebMethodNotSupportedException";
    public const string BranchObjectNotRootOfOperationException = "BranchObjectNotRootOfOperationException";
    public const string TruncatedIdentityName = "TruncatedIdentityName";
    public const string FileFolderOnlyValidResolutionIsAcceptTheirs = "FileFolderOnlyValidResolutionIsAcceptTheirs";
    public const string FolderFileOnlyValidResolutionIsAcceptTheirs = "FolderFileOnlyValidResolutionIsAcceptTheirs";
    public const string CannotRollbackFolderToFile = "CannotRollbackFolderToFile";
    public const string CannotRollbackFileToFolder = "CannotRollbackFileToFolder";
    public const string InvalidArtifactKindSpecifiedForOperation = "InvalidArtifactKindSpecifiedForOperation";
    public const string DeleteWorkspaceStateInvalidForDestroy = "DeleteWorkspaceStateInvalidForDestroy";
    public const string AllSpecifiedItems = "AllSpecifiedItems";
    public const string CannotResolveAcceptMergeWithNonexistentVersion = "CannotResolveAcceptMergeWithNonexistentVersion";
    public const string VersionControlServiceNotRunning = "VersionControlServiceNotRunning";
    public const string UnshelveReadPermissionWarning = "UnshelveReadPermissionWarning";
    public const string QueryShelvedItemsReadPermissionWarning = "QueryShelvedItemsReadPermissionWarning";
    public const string DeleteShelvesetOnCheckinFailed = "DeleteShelvesetOnCheckinFailed";
    public const string CannotUnshelveIntoExistingConflict = "CannotUnshelveIntoExistingConflict";
    public const string CannotUnshelveMergeIntoMerge = "CannotUnshelveMergeIntoMerge";
    public const string CannotUnshelveDueToParentalDelete = "CannotUnshelveDueToParentalDelete";
    public const string CheckinDateNewerThanServerTime = "CheckinDateNewerThanServerTime";
    public const string CheckinDateOlderThanLastCheckin = "CheckinDateOlderThanLastCheckin";
    public const string CheckinDateOverflow = "CheckinDateOverflow";
    public const string TeamProjectNotEmptyException = "TeamProjectNotEmptyException";
    public const string NotPermittedForLocalWorkspace = "NotPermittedForLocalWorkspace";
    public const string LocalWorkspaceRequired = "LocalWorkspaceRequired";
    public const string CannotResolveBecauseShelvesetDeletedMessage = "CannotResolveBecauseShelvesetDeletedMessage";
    public const string CannotUnshelveDueToShelvesetParentalDelete = "CannotUnshelveDueToShelvesetParentalDelete";
    public const string CannotResolveDueToRenameAndDeleteMessage = "CannotResolveDueToRenameAndDeleteMessage";
    public const string CannotRenameDueToChildConflictMessage = "CannotRenameDueToChildConflictMessage";
    public const string CannotUndoRenameDueToChildConflictMessage = "CannotUndoRenameDueToChildConflictMessage";
    public const string CannotCheckinRenameDueToChildConflictMessage = "CannotCheckinRenameDueToChildConflictMessage";
    public const string CheckoutLocksDisabled = "CheckoutLocksDisabled";
    public const string CheckoutLocksDisabledItem = "CheckoutLocksDisabledItem";
    public const string GetLatestOnCheckoutDisabled = "GetLatestOnCheckoutDisabled";
    public const string MergeBranchSourceReadPermissionWarning = "MergeBranchSourceReadPermissionWarning";
    public const string ContentNotUploaded = "ContentNotUploaded";
    public const string RepositoryPathTooLongDueToDeletedItems = "RepositoryPathTooLongDueToDeletedItems";
    public const string RepositoryPathTooLong = "RepositoryPathTooLong";
    public const string RepositoryPathTooLongDueToOtherWorkspace = "RepositoryPathTooLongDueToOtherWorkspace";
    public const string CannotCreateNewUserDuringCheckin = "CannotCreateNewUserDuringCheckin";
    public const string GenericDatabaseUpdateError = "GenericDatabaseUpdateError";
    public const string IdenticalPathsError = "IdenticalPathsError";
    public const string InvalidOperationDueToProjectRename = "InvalidOperationDueToProjectRename";
    public const string WorkspacesToFixBeforeProjectNameUse = "WorkspacesToFixBeforeProjectNameUse";
    public const string WorkspacesToFixBeforeProjectNameUseLessThanMax = "WorkspacesToFixBeforeProjectNameUseLessThanMax";
    public const string ProjectNamePreviouslyUsed = "ProjectNamePreviouslyUsed";
    public const string VersionControlItemsStillExistForProject = "VersionControlItemsStillExistForProject";
    public const string ProjectRenamedMappingConflictException = "ProjectRenamedMappingConflictException";
    public const string SourceChangesetsCannotContainDuplicates = "SourceChangesetsCannotContainDuplicates";
    public const string ItemNotFoundException = "ItemNotFoundException";
    public const string PullRequest_Approved = "PullRequest_Approved";
    public const string PullRequest_ApprovedWithSuggestions = "PullRequest_ApprovedWithSuggestions";
    public const string PullRequest_WaitingForAuthor = "PullRequest_WaitingForAuthor";
    public const string PullRequest_Rejected = "PullRequest_Rejected";
    public const string OldCheckinPoliciesDisabled = "OldCheckinPoliciesDisabled";

    public static ResourceManager Manager => Microsoft.TeamFoundation.VersionControl.Server.Resources.s_resMgr;

    public static string Get(string resourceName) => Microsoft.TeamFoundation.VersionControl.Server.Resources.s_resMgr.GetString(resourceName, CultureInfo.CurrentUICulture);

    public static string Get(string resourceName, CultureInfo culture) => culture == null ? Microsoft.TeamFoundation.VersionControl.Server.Resources.Get(resourceName) : Microsoft.TeamFoundation.VersionControl.Server.Resources.s_resMgr.GetString(resourceName, culture);

    public static int GetInt(string resourceName) => (int) Microsoft.TeamFoundation.VersionControl.Server.Resources.s_resMgr.GetObject(resourceName, CultureInfo.CurrentUICulture);

    public static int GetInt(string resourceName, CultureInfo culture) => culture == null ? Microsoft.TeamFoundation.VersionControl.Server.Resources.GetInt(resourceName) : (int) Microsoft.TeamFoundation.VersionControl.Server.Resources.s_resMgr.GetObject(resourceName, culture);

    public static bool GetBool(string resourceName) => (bool) Microsoft.TeamFoundation.VersionControl.Server.Resources.s_resMgr.GetObject(resourceName, CultureInfo.CurrentUICulture);

    public static bool GetBool(string resourceName, CultureInfo culture) => culture == null ? Microsoft.TeamFoundation.VersionControl.Server.Resources.GetBool(resourceName) : (bool) Microsoft.TeamFoundation.VersionControl.Server.Resources.s_resMgr.GetObject(resourceName, culture);

    public static string Format(string resourceName, params object[] args) => Microsoft.TeamFoundation.VersionControl.Server.Resources.Format(resourceName, CultureInfo.CurrentUICulture, args);

    public static string Format(string resourceName, CultureInfo culture, params object[] args)
    {
      if (culture == null)
        culture = CultureInfo.CurrentUICulture;
      string format = Microsoft.TeamFoundation.VersionControl.Server.Resources.Get(resourceName, culture);
      if (args == null)
        return format;
      for (int index = 0; index < args.Length; ++index)
      {
        if (args[index] is DateTime)
        {
          DateTime dateTime = (DateTime) args[index];
          Calendar calendar = DateTimeFormatInfo.CurrentInfo.Calendar;
          if (dateTime > calendar.MaxSupportedDateTime)
            args[index] = (object) calendar.MaxSupportedDateTime;
          else if (dateTime < calendar.MinSupportedDateTime)
            args[index] = (object) calendar.MinSupportedDateTime;
        }
      }
      return string.Format((IFormatProvider) CultureInfo.CurrentCulture, format, args);
    }
  }
}
