<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DiffCoverageFolderLevelStringFormatFailed" xml:space="preserve">
    <value>:x: {0}/{1}  ({2}) coverage against {3}% target.</value>
  </data>
  <data name="ChangedFilesText" xml:space="preserve">
    <value>Changed files</value>
  </data>
  <data name="CoverageStatusCheckNotApplicable" xml:space="preserve">
    <value>Coverage status check not applicable for</value>
  </data>
  <data name="DiffCoverageCheckError" xml:space="preserve">
    <value>:heavy_exclamation_mark: Error occurred evaluating the diff coverage check.</value>
  </data>
  <data name="FailedToGetPullRequestChanges" xml:space="preserve">
    <value>Failed to get the pull request changes.</value>
  </data>
  <data name="CoverageDataNotFound" xml:space="preserve">
    <value>Coverage data not found</value>
  </data>
  <data name="CoverageConfigurationError" xml:space="preserve">
    <value>Error while reading code coverage configuration {0}.</value>
  </data>
  <data name="NoCodeCoverageText" xml:space="preserve">
    <value>Coverage for changed lines cannot be determined. No testable code was changed.</value>
  </data>
  <data name="ParallelReducerException" xml:space="preserve">
    <value>Execption(s) occured while reducing in ReduceTask.</value>
  </data>
  <data name="NoExecutableChanges" xml:space="preserve">
    <value>No executable changes or lines were deleted</value>
  </data>
  <data name="CoverageStatusCheckSucceeded" xml:space="preserve">
    <value>Coverage status check succeeded for</value>
  </data>
  <data name="DiffCoverageCheckSucceeded" xml:space="preserve">
    <value>:heavy_check_mark: Diff coverage check succeeded.</value>
  </data>
  <data name="DiffCoverageMessageFolderLevelFailed" xml:space="preserve">
    <value>:x: Diff coverage check failed due to folder level policy/policies not met</value>
  </data>
  <data name="FolderPath" xml:space="preserve">
    <value>Folder Path For Code Coverage Policy</value>
  </data>
  <data name="CoverageStatusCheckErrorWhileReadingConfiguration" xml:space="preserve">
    <value>Error occurred while reading the status check configuration for</value>
  </data>
  <data name="DiffCoverageMessageCoverageNotFound" xml:space="preserve">
    <value>Coverage for changed lines cannot be determined. Coverage data not found.</value>
  </data>
  <data name="CoverageStatusCheckMarkedAsFailedAsBuildFailed" xml:space="preserve">
    <value>Coverage status check is marked as failed as build has failed for</value>
  </data>
  <data name="DiffCoverageCheckNotApplicable" xml:space="preserve">
    <value>:heavy_minus_sign: Diff coverage check not applicable.</value>
  </data>
  <data name="ChangedLinesCoveredText" xml:space="preserve">
    <value>Changed lines covered</value>
  </data>
  <data name="CoverageStatusCheckError" xml:space="preserve">
    <value>Error occurred while evaluating coverage status checks for</value>
  </data>
  <data name="ViewFullCoverageReport" xml:space="preserve">
    <value>View full code coverage report</value>
  </data>
  <data name="CoverageStatusCheckInProgress" xml:space="preserve">
    <value>Coverage status check in progress for</value>
  </data>
  <data name="DiffCoverageLinesCoveredTextFormatString" xml:space="preserve">
    <value>{0}/{1} ({2}) changed lines are covered up to {3}.</value>
  </data>
  <data name="LinesCoveredText" xml:space="preserve">
    <value>Lines covered</value>
  </data>
  <data name="InvalidCoverageConfigurationGenericErrorMessage" xml:space="preserve">
    <value>Error while parsing the code coverage yaml configuration file</value>
  </data>
  <data name="FailedToFindFileAtSamePath" xml:space="preserve">
    <value>Not able to get the file diff due to file path changes on the target branch of this pull request. Coverage status check is marked as failed. In order to get the coverage metrics, merge the target branch to the topic branch, for this pull request.</value>
  </data>
  <data name="CoverageStatusCheckQueued" xml:space="preserve">
    <value>Coverage status check queued for</value>
  </data>
  <data name="CoverageSummaryStatusConflictMessage" xml:space="preserve">
    <value>Could not patch coverage since summary status is already '{0}'.</value>
  </data>
  <data name="DiffCoverageFolderLevelStringFormatPassed" xml:space="preserve">
    <value>:heavy_check_mark: {0}/{1}  ({2}) coverage against {3}% target.</value>
  </data>
  <data name="DiffCoverageMessageCannotDetermine" xml:space="preserve">
    <value>Coverage for changed lines cannot be determined. Either the coverage data not found or there are no executable changes in the pull request.</value>
  </data>
  <data name="CoverageStatusCheckFailed" xml:space="preserve">
    <value>Coverage status check failed for</value>
  </data>
  <data name="VstestCoverageFileDownloadFailedMessage" xml:space="preserve">
    <value>Failed to download coverage files.</value>
  </data>
  <data name="MaxFilesExceeded" xml:space="preserve">
    <value>Number of file changes in the pull request iteration exceeded {0}. File coverage evaluation is skipped.</value>
  </data>
  <data name="DiffCoverageCheckFailed" xml:space="preserve">
    <value>:x: Diff coverage check failed.</value>
  </data>
  <data name="DiffCoverageMessageNoExecutableChanges" xml:space="preserve">
    <value>There are no executable changes in the pull request.</value>
  </data>
</root>