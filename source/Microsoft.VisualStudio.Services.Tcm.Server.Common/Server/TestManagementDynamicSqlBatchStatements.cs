// Decompiled with JetBrains decompiler
// Type: Microsoft.TeamFoundation.TestManagement.Server.TestManagementDynamicSqlBatchStatements
// Assembly: Microsoft.VisualStudio.Services.Tcm.Server.Common, Version=19.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 7631C286-897C-44D1-A133-A0BB6CC047F3
// Assembly location: C:\Program Files\Azure DevOps Server 2022\Application Tier\Web Services\bin\Plugins\Microsoft.VisualStudio.Services.Tcm.Server.Common.dll

namespace Microsoft.TeamFoundation.TestManagement.Server
{
  internal static class TestManagementDynamicSqlBatchStatements
  {
    internal static string dynprc_QueryAttachments2 = "\r\n\r\n               SET NOCOUNT ON\r\n\r\n               -- Procedure: dynprc_QueryAttachments2\r\n\r\n               DECLARE @sql    NVARCHAR(MAX)\r\n               DECLARE @param  NVARCHAR(100)\r\n\r\n               SET @param = '@valueListTable typ_IntStringPairTypeTable READONLY'\r\n\r\n               -- Execute dynamically generated query\r\n               SET @sql = 'SELECT  att.TestRunId, att.TestResultId, att.AttachmentId, att.IterationId, att.ActionPath, \r\n                                   att.SessionId, att.FileName, att.Comment, att.UncompressedLength, att.CreationDate,\r\n                                   att.AttachmentType, att.IsComplete, att.TmiRunId, att.TfsFileId, att.TestCaseArea as AreaUri\r\n                           FROM    vw_Attachment AS att ' + @whereClause + ' ' + @orderByClause\r\n\r\n               -- SDL EXCEPTION: Column name and number of columns in where clause is dynamic.\r\n               -- Approved by Security Advisor [Bob Fruth (MSEC)] on 4/13/2012\r\n               EXEC sp_executesql @sql, @param, @valueListTable";
    internal static string dynprc_QueryAttachments2_UnifyingView = "\r\n\r\n               SET NOCOUNT ON\r\n\r\n               -- Procedure: dynprc_QueryAttachments2\r\n\r\n               DECLARE @sql    NVARCHAR(MAX)\r\n               DECLARE @param  NVARCHAR(100)\r\n\r\n               SET @param = '@valueListTable typ_IntStringPairTypeTable READONLY'\r\n\r\n               -- Execute dynamically generated query\r\n               SET @sql = 'SELECT  att.TestRunId, att.TestResultId, att.AttachmentId, att.IterationId, att.ActionPath, \r\n                                   att.SessionId, att.FileName, att.Comment, att.UncompressedLength, att.CreationDate,\r\n                                   att.AttachmentType, att.IsComplete, att.TmiRunId, att.TfsFileId, att.TestCaseArea as AreaUri\r\n                           FROM    TestResult.vw_Attachment AS att ' + @whereClause + ' ' + @orderByClause\r\n\r\n               -- SDL EXCEPTION: Column name and number of columns in where clause is dynamic.\r\n               -- Approved by Security Advisor [Bob Fruth (MSEC)] on 4/13/2012\r\n               EXEC sp_executesql @sql, @param, @valueListTable";
    internal static string dynprc_QueryTestSettings = "\r\n\r\n        SET NOCOUNT ON\r\n\r\n        DECLARE @sql    NVARCHAR(MAX)\r\n        DECLARE @param  NVARCHAR(100)\r\n        \r\n        -- Procedure: dbo.dynprc_QueryTestSettings\r\n\r\n        SET @param = '@valueListTable typ_IntStringPairTypeTable READONLY'\r\n\r\n        SET @sql = 'SELECT  SettingsId, Name, Description, CreatedBy, CreatedDate, ' +\r\n                           CASE WHEN @omitSettings = 1 THEN 'NULL AS ' ELSE '' END + 'Settings, MachineRoles, AreaUri, IsPublic, IsAutomated, LastUpdated, LastUpdatedBy, Revision \r\n                    FROM   vw_TestSettings ' + @whereClause + ' ' + @orderByClause\r\n\r\n        -- SDL EXCEPTION: Column name and number of columns in where clause is dynamic.\r\n        -- Approved by Security Advisor [Bob Fruth (MSEC)] on 4/13/2012\r\n        EXEC sp_executesql @sql, @param, @valueListTable";
    internal static string dynprc_QueryObjectsCount = "\r\n\r\n        SET NOCOUNT ON\r\n\r\n        DECLARE @sql    NVARCHAR(MAX)\r\n        DECLARE @param  NVARCHAR(100)\r\n\r\n        -- Procedure: dynprc_QueryObjectsCount\r\n\r\n        SET @param = '@valueListTable typ_IntStringPairTypeTable READONLY'\r\n\r\n        SET @sql = 'SELECT COUNT(*) AS Count FROM ' + @tableName + ' ' + @whereClause\r\n\r\n        -- SDL EXCEPTION: Column name and number of columns in where clause is dynamic.\r\n        -- Approved by Security Advisor [Bob Fruth (MSEC)] on 4/13/2012\r\n        EXEC sp_executesql @sql, @param, @valueListTable";
    internal static string dynprc_QueryTestResults2_UnifyingViews = "\r\n\r\n        SET NOCOUNT ON\r\n\r\n        DECLARE @sql            NVARCHAR(MAX)\r\n        DECLARE @param          NVARCHAR(100)\r\n\r\n        -- Initialize the ProcedureName for error messages.\r\n        DECLARE @procedureName NVARCHAR(MAX)            \r\n        SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..dbo.dynprc_QueryTestResults2'\r\n\r\n        SET @param = '@valueListTable typ_IntStringPairTypeTable READONLY'\r\n\r\n        --If clause contains Priority, exclude the Priority 255 results \r\n        SET @sql =\r\n        'SELECT TestRunId, TestResultId, TestCaseAreaUri AS TestCaseArea \r\n        FROM \r\n            (\r\n            SELECT  PartitionId, \r\n                    TestRunId,\r\n                    TestResultId,\r\n                    TestCaseId,\r\n                    ConfigurationId,\r\n                    TestPointId,\r\n                    CreationDate,\r\n                    LastUpdated,\r\n                    Outcome,\r\n                    State,\r\n                    DateStarted,\r\n                    DateCompleted,                    \r\n                    CASE WHEN (DateStarted IS NOT NULL AND DateCompleted IS NOT NULL)\r\n                        THEN CONVERT(BIGINT, DATEDIFF(S,DateStarted,DateCompleted)) * 10000000  -- 1 second = 10000000 ticks\r\n                        ELSE 0\r\n                    END AS Duration,\r\n                    ResolutionStateId,\r\n                    Owner,\r\n                    TestCaseTitle,\r\n                    TestCaseRevision,\r\n                    ComputerName,\r\n                    AfnStripId,\r\n                    ResetCount,\r\n                    FailureType,\r\n                    AutomatedTestName,\r\n                    AutomatedTestStorage,\r\n                    AutomatedTestType,\r\n                    AutomatedTestTypeId,\r\n                    AutomatedTestId,\r\n                    Revision,\r\n                    RunBy,\r\n                    LastUpdatedBy,\r\n                    EffectivePointState,\r\n                    AreaId,\r\n                    TestCaseAreaUri,\r\n                    TestCaseAreaPath,\r\n                    DataSpaceId,\r\n                    TestPlanId,\r\n                    BuildNumber,\r\n                    (CASE WHEN Priority=255 THEN NULL ELSE Priority END) AS Priority\r\n            FROM    TestResult.vw_TestResult\r\n        ) T ' + @whereClause + ' ' + @orderByClause\r\n\r\n        -- SDL EXCEPTION: Column name and number of columns in where clause is dynamic.\r\n        -- Approved by Security Advisor [Bob Fruth (MSEC)] on 4/13/2012\r\n        EXEC sp_executesql @sql, @param, @valueListTable";
    internal static string dynprc_QueryTestRunIds = "\r\n\r\n        SET NOCOUNT ON\r\n\r\n        DECLARE @sql           NVARCHAR(MAX)\r\n        DECLARE @param         NVARCHAR(100)\r\n\r\n        -- Initialize the ProcedureName for error messages.\r\n        DECLARE @procedureName NVARCHAR(MAX)            \r\n        SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..dbo.dynprc_QueryTestRunIds'\r\n\r\n        SET @param = '@valueListTable typ_IntStringPairTypeTable READONLY'\r\n\r\n        SET @sql = 'SELECT TestRunId FROM vw_TestRun ' + @whereClause + ' ' + @orderByClause\r\n\r\n        -- SDL EXCEPTION: Column name and number of columns in where clause is dynamic. \r\n        -- This file was also exmpted based on the exemption given on 4/13/2012 by Security Advisors [Heather Murchison; Pavel Bansky]\r\n        -- Approved by Security Advisor [Bob Fruth (MSEC)] on 4/13/2012\r\n        EXEC sp_executesql @sql, @param, @valueListTable";
    internal static string dynprc_QueryTestRuns2 = "\r\n        SET NOCOUNT ON\r\n\r\n        DECLARE @sql            NVARCHAR(MAX)\r\n        DECLARE @param          NVARCHAR(100)\r\n\r\n        -- Initialize the ProcedureName for error messages.\r\n        DECLARE @procedureName NVARCHAR(MAX)            \r\n        SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..dbo.dynprc_QueryTestRuns2'\r\n\r\n        SET @param = '@valueListTable typ_IntStringPairTypeTable READONLY'\r\n\r\n        SET @sql = \r\n            'SELECT  TestRunId, Title, CreationDate, LastUpdated, Owner, State, ErrorMessage, BuildUri, DropLocation, \r\n                    BuildNumber, BuildPlatform, BuildFlavor, BuildConfigurationId, BuildId, BuildDefinitionId, RepositoryId,\r\n                    BranchName, SourceVersion, BuildSystem, ProjectUri, TestPlanId, StartDate, CompleteDate, PostProcessState, \r\n                    DueDate, IterationUri,  IterationId, Controller, LegacySharePath, DataspaceId, TestMessageLogId, \r\n                    TestSettingsId, PublicTestSettingsId, TestEnvironmentId, LastUpdatedBy, Type, IsAutomated, Version, \r\n                    Revision, IsBvt, Comment, CONVERT(VARBINARY(8), CAST(RV AS BIGINT)) RV, TotalTests, IncompleteTests, \r\n                    NotApplicableTests, PassedTests, UnanalyzedTests, BugsCount, SourceFilter, TestCaseFilter, TestEnvironmentUrl, \r\n                    AutEnvironmentUrl, Substate, CsmContent, CsmParameters, SubscriptionName, ReleaseUri, ReleaseEnvironmentUri \r\n             FROM   vw_TestRun ' + @whereClause + ' ' + @orderByClause\r\n\r\n        -- SDL EXCEPTION: Column name and number of columns in where clause is dynamic.\r\n        -- Approved by Security Advisor [Bob Fruth (MSEC)] on 4/13/2012\r\n        EXEC sp_executesql @sql, @param, @valueListTable\r\n\r\n        -- Query the extended fields\r\n        SET @param = '@valueListTable typ_IntStringPairTypeTable READONLY, @partitionId INT'\r\n\r\n        SET @sql = \r\n        'SELECT  trx.TestRunId, trx.FieldId, trx.CreatedDate, trx.IntValue, trx.FloatValue, trx.BitValue, trx.DateTimeValue, \r\n                 trx.GuidValue, trx.StringValue \r\n         FROM     tbl_TestRunEx trx \r\n         WHERE    trx.PartitionId = @partitionId \r\n                  AND trx.TestRunId IN (SELECT TestRunId FROM vw_TestRun ' + @whereClause + ' ' + ') ' +\r\n        'OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN))'\r\n\r\n        EXEC sp_executesql @sql, @param, @valueListTable = @valueListTable, @partitionId = @partitionId";
    internal static string dynprc_QueryTestRuns2_V2 = "\r\n        SET NOCOUNT ON\r\n\r\n        DECLARE @sql            NVARCHAR(MAX)\r\n        DECLARE @param          NVARCHAR(100)\r\n\r\n        -- Initialize the ProcedureName for error messages.\r\n        DECLARE @procedureName NVARCHAR(MAX)            \r\n        SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..dbo.dynprc_QueryTestRuns2'\r\n\r\n        SET @param = '@valueListTable typ_IntStringPairTypeTable READONLY'\r\n\r\n        SET @sql = \r\n            'SELECT  TestRunId, Title, CreationDate, LastUpdated, Owner, State, ErrorMessage, BuildUri, DropLocation, \r\n                    BuildNumber, BuildPlatform, BuildFlavor, BuildConfigurationId, BuildId, BuildDefinitionId, RepoId, RepoType,\r\n                    BranchName, SourceVersion, BuildSystem, ProjectUri, TestPlanId, StartDate, CompleteDate, PostProcessState, \r\n                    DueDate, IterationUri,  IterationId, Controller, LegacySharePath, DataspaceId, TestMessageLogId, \r\n                    TestSettingsId, PublicTestSettingsId, TestEnvironmentId, LastUpdatedBy, Type, IsAutomated, Version, \r\n                    Revision, IsBvt, Comment, CONVERT(VARBINARY(8), CAST(RV AS BIGINT)) RV, TotalTests, IncompleteTests, \r\n                    NotApplicableTests, PassedTests, UnanalyzedTests, BugsCount, SourceFilter, TestCaseFilter, TestEnvironmentUrl, \r\n                    AutEnvironmentUrl, Substate, CsmContent, CsmParameters, SubscriptionName, ReleaseUri, ReleaseEnvironmentUri \r\n             FROM   vw_TestRun ' + @whereClause + ' ' + @orderByClause\r\n\r\n        -- SDL EXCEPTION: Column name and number of columns in where clause is dynamic.\r\n        -- Approved by Security Advisor [Bob Fruth (MSEC)] on 4/13/2012\r\n        EXEC sp_executesql @sql, @param, @valueListTable\r\n\r\n        -- Query the extended fields\r\n        SET @param = '@valueListTable typ_IntStringPairTypeTable READONLY, @partitionId INT'\r\n\r\n        SET @sql = \r\n        'SELECT  trx.TestRunId, trx.FieldId, trx.CreatedDate, trx.IntValue, trx.FloatValue, trx.BitValue, trx.DateTimeValue, \r\n                 trx.GuidValue, trx.StringValue \r\n         FROM     tbl_TestRunEx trx \r\n         WHERE    trx.PartitionId = @partitionId \r\n                  AND trx.TestRunId IN (SELECT TestRunId FROM vw_TestRun ' + @whereClause + ' ' + ') ' +\r\n        'OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN))'\r\n\r\n        EXEC sp_executesql @sql, @param, @valueListTable = @valueListTable, @partitionId = @partitionId";
    internal static string dynprc_QueryTestRuns2_V3 = "\r\n        SET NOCOUNT ON\r\n\r\n        DECLARE @sql            NVARCHAR(MAX)\r\n        DECLARE @param          NVARCHAR(100)\r\n\r\n        -- Initialize the ProcedureName for error messages.\r\n        DECLARE @procedureName NVARCHAR(MAX)            \r\n        SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..dbo.dynprc_QueryTestRuns2'\r\n\r\n        SET @param = '@valueListTable typ_IntStringPairTypeTable READONLY'\r\n\r\n        SET @sql = \r\n            'SELECT  TestRunId, Title, CreationDate, LastUpdated, Owner, State, ErrorMessage, BuildUri, DropLocation, \r\n                    BuildNumber, BuildPlatform, BuildFlavor, BuildConfigurationId, BuildId, BuildDefinitionId, RepoId, RepoType,\r\n                    BranchName, SourceVersion, BuildSystem, ProjectUri, TestPlanId, StartDate, CompleteDate, PostProcessState, \r\n                    DueDate, IterationUri,  IterationId, Controller, LegacySharePath, DataspaceId, TestMessageLogId, \r\n                    TestSettingsId, PublicTestSettingsId, TestEnvironmentId, LastUpdatedBy, Type, IsAutomated, Version, \r\n                    Revision, IsBvt, Comment, CONVERT(VARBINARY(8), CAST(RV AS BIGINT)) RV, TotalTests, IncompleteTests, \r\n                    NotApplicableTests, PassedTests, UnanalyzedTests, BugsCount, SourceFilter, TestCaseFilter, TestEnvironmentUrl, \r\n                    AutEnvironmentUrl, Substate, CsmContent, CsmParameters, SubscriptionName, ReleaseUri, ReleaseEnvironmentUri, ReleaseId, ReleaseEnvId, ReleaseDefId,\r\n                    ReleaseEnvDefId, ReleaseRefId \r\n             FROM   vw_TestRun ' + @whereClause + ' ' + @orderByClause\r\n\r\n        -- SDL EXCEPTION: Column name and number of columns in where clause is dynamic.\r\n        -- Approved by Security Advisor [Bob Fruth (MSEC)] on 4/13/2012\r\n        EXEC sp_executesql @sql, @param, @valueListTable";
    internal static string dynprc_GetTestExecutionReport = "SET NOCOUNT ON;\r\n\r\n        DECLARE @tfError        NVARCHAR(255);\r\n        DECLARE @param        NVARCHAR(255);  \r\n        DECLARE @sql            NVARCHAR(MAX);\r\n        DECLARE @groupBy        NVARCHAR(MAX);\r\n        DECLARE @dimensionCount INT;\r\n        DECLARE @dimension      NVARCHAR(255);\r\n\r\n        -- Initialize the ProcedureName for error messages.\r\n        DECLARE @procedureName  SYSNAME;\r\n        DECLARE @status         INT;\r\n\r\n        SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..dbo. dynprc_GetTestExecutionReport'\r\n        SELECT @dimensionCount = COUNT(*) FROM @dimensions;\r\n\r\n        IF (@dimensionCount = 0 OR @dimensionCount > 2)\r\n        BEGIN\r\n            SELECT @status = @@ERROR;\r\n            SET @tfError = dbo.func_GetMessage(550001); RAISERROR(@tfError, 16, -1, @procedureName, @status, N'Unexpected number of dimensions');\r\n        END\r\n        SELECT @groupBy = COALESCE (@groupBy + ', ','') + Name\r\n        FROM @dimensions;\r\n\r\n        -- Outcome is NULL when test is in InProgress. Get this value from Point State.\r\n        --   ToDo: the enumeration for state is available in Enumerations.cs, explore getting\r\n        --   this constant into TMClientEnums.h to use here.\r\n        -- Prefix match used to get all child suites\r\n        -- Outcomes enum values : 1 = TestOutcome_None, 4 =TestPointState_InProgress and13 = TestOutcome_InProgress\r\n        SELECT @sql = N'\r\n            SELECT    '+ @groupBy +' , COUNT(*) AS AggTestsCount\r\n            FROM (SELECT    TRe.Priority AS Priority,\r\n                    (CASE WHEN (Po.LastResultOutcome = 1 AND Po.State = 4) THEN 13 ELSE Po.LastResultOutcome END) AS Outcome,\r\n                    TRe.RunBy AS RunBy,\r\n                    TRS.Name AS Resolution,\r\n                    TFT.Name AS FailureType,\r\n                    Po.AssignedTo AS Tester,\r\n                    C.Name AS Configuration,\r\n                    (CASE WHEN S2.ParentSuiteId = 0 THEN @planName ELSE S2.Title END) AS Suite,\r\n                    TRu.IsAutomated AS RunTypeIsAutomated\r\n        FROM        tbl_Suite S1\r\n        JOIN        tbl_Plan Pl\r\n        ON          Pl.PartitionId = S1.PartitionId\r\n                    AND Pl.DataspaceId = S1.DataspaceId\r\n                    AND Pl.PlanId = S1.PlanId\r\n        JOIN        tbl_Suite S2\r\n        ON          S2.PartitionId = S1.PartitionId\r\n                    AND S2.DataspaceId = S1.DataspaceId\r\n                    AND S2.PlanId = S1.PlanId\r\n        JOIN        tbl_Point Po\r\n        ON          Po.PartitionId = S1.PartitionId\r\n                    AND Po.SuiteId = S2.SuiteId\r\n        JOIN        tbl_Configuration C\r\n        ON          C.PartitionId = S1.PartitionId\r\n                    AND C.ConfigurationId = Po.ConfigurationId\r\n        LEFT JOIN   tbl_TestRun TRu\r\n        ON          TRu.PartitionId = S1.PartitionId\r\n                    AND TRu.DataspaceId = S1.DataspaceId\r\n                    AND TRu.TestRunId = Po.LastTestRunId\r\n        LEFT JOIN   tbl_TestFailureType TFT\r\n        ON          TFT.PartitionId = S1.PartitionId\r\n                    AND TFT.FailureTypeId = Po.FailureType\r\n                    AND TFT.DataspaceId = S1.DataspaceId\r\n        LEFT JOIN   tbl_TestResolutionState TRS\r\n        ON          TRS.PartitionId = S1.PartitionId\r\n                    AND TRS.StateId = Po.LastResolutionStateId\r\n                    AND TRS.DataspaceId = S1.DataspaceId\r\n        LEFT JOIN   tbl_TestResult TRe\r\n        ON          TRe.PartitionId = S1.PartitionId\r\n                    AND TRe.TestRunId = Po.LastTestRunId\r\n                    AND TRe.TestResultId = Po.LastTestResultId\r\n        WHERE       PATINDEX(CONVERT(VARCHAR(256), S1.SuitePath, 2) + ''%'', CONVERT(VARCHAR(256), S2.SuitePath, 2)) = 1\r\n                    AND S1.PartitionId = @partitionId AND S1.SuiteId = @suiteId AND Po.Active = 1) T ' +\r\n            ' GROUP BY ' + @groupBy;\r\n\r\n        SET @param = '@suiteId INT, @partitionId INT, @planName NVARCHAR(512)'\r\n        -- Minimal trace information on failure\r\n        BEGIN TRY\r\n             EXEC sp_executesql @sql , @param, @partitionId = @partitionId, @suiteId = @suiteId, @planName = @planName\r\n        END TRY\r\n        BEGIN CATCH\r\n            SELECT @status = @@ERROR;\r\n            SET @tfError = dbo.func_GetMessage(550028); RAISERROR(@tfError, 16, -1, @procedureName, @status, @groupBy, N'SuiteId', @suiteId);\r\n        END CATCH\r\n";
    internal static string dynprc_QueryConfigurations = "\r\n\r\n            SET NOCOUNT ON\r\n\r\n            DECLARE @sql            NVARCHAR(MAX)\r\n            DECLARE @tfError        NVARCHAR(255)   -- used by the macro RAISETFSERROR\r\n            DECLARE @param          NVARCHAR(100)\r\n\r\n            -- Initialize the ProcedureName for error messages.\r\n            DECLARE @procedureName NVARCHAR(MAX)            \r\n            SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..dbo.dynprc_QueryConfigurations'\r\n\r\n            SET @param = '@valueListTable typ_IntStringPairTypeTable READONLY'\r\n\r\n            DECLARE @partitionIdStr NVARCHAR(64)\r\n            SET @partitionIdStr = CONVERT(NVARCHAR(64), @partitionId)\r\n\r\n            IF(@planId IS NULL \r\n                OR @planId = 0)\r\n            BEGIN\r\n                SET @sql = \r\n                    'SELECT  ConfigurationId, Name, Description, State, AreaUri, Revision, LastUpdated, LastUpdatedBy, IsDefault\r\n                     FROM   vw_Configuration ' + @whereClause + ' ' + @orderByClause\r\n\r\n                -- SDL EXCEPTION: Column name and number of columns in where clause is dynamic.\r\n                -- Approved by Security Advisor [Bob Fruth (MSEC)] on 4/13/2012\r\n                EXEC sp_executesql @sql, @param, @valueListTable\r\n\r\n                SET @sql =\r\n                    'SELECT  ConfigurationId, Name, Value\r\n                     FROM    tbl_ConfigurationValue\r\n                     JOIN   (SELECT ConfigurationId ConfId2\r\n                             FROM vw_Configuration ' +\r\n                             @whereClause + ') pointConfig2\r\n                     ON     PartitionId = ' + @partitionIdStr + ' AND ConfigurationId = pointConfig2.ConfId2'\r\n\r\n                -- SDL EXCEPTION: Column name and number of columns in where clause is dynamic.\r\n                -- Approved by Security Advisor [Bob Fruth (MSEC)] on 4/13/2012\r\n                EXEC sp_executesql @sql, @param, @valueListTable\r\n            END\r\n            ELSE\r\n            BEGIN\r\n\r\n                IF NOT EXISTS(\r\n                    SELECT  *\r\n                    FROM    tbl_Plan WITH (HOLDLOCK, ROWLOCK)\r\n                    WHERE   PartitionId = @partitionId\r\n                            AND PlanId = @planId\r\n                            AND State <> 255)\r\n                BEGIN\r\n                    SET @tfError = dbo.func_GetMessage(550002); RAISERROR(@tfError, 16, -1, @procedureName, 3, @planId, 0, 0);\r\n                    RETURN                    \r\n                END\r\n\r\n                DECLARE @planIdStr NVARCHAR(64)\r\n                SET @planIdStr = CONVERT(NVARCHAR(64), @planId)\r\n\r\n                SET @sql = \r\n                    'SELECT ConfigurationId, Name, Description, State, AreaUri, Revision, LastUpdated, LastUpdatedBy, IsDefault\r\n                     FROM  vw_Configuration\r\n                     JOIN  (SELECT DISTINCT ConfigurationId ConfId\r\n                            FROM tbl_Point\r\n                            WHERE PartitionId = ' + @partitionIdStr + ' AND PlanId = ' + @planIdStr + ' AND Active = 1) pointConfig\r\n                     ON     PartitionId = ' + @partitionIdStr + ' AND ConfigurationId = pointConfig.ConfId ' + @whereClause + ' ' + @orderByClause\r\n\r\n                -- SDL EXCEPTION: Column name and number of columns in where clause is dynamic.\r\n                -- Approved by Security Advisor [Bob Fruth (MSEC)] on 4/13/2012\r\n                EXEC sp_executesql @sql, @param, @valueListTable\r\n\r\n                SET @sql =\r\n                    'SELECT ConfigurationId, Name, Value\r\n                     FROM   tbl_ConfigurationValue\r\n                     JOIN   (SELECT ConfigurationId ConfId2\r\n                             FROM vw_Configuration ' + @whereClause + ') pointConfig2\r\n                     ON     ConfigurationId = pointConfig2.ConfId2\r\n                     JOIN   (SELECT DISTINCT ConfigurationId ConfId\r\n                             FROM tbl_Point\r\n                             WHERE PartitionId = ' + @partitionIdStr + ' AND PlanId = ' + @planIdStr + ' AND Active = 1) pointConfig\r\n                    ON       PartitionId = ' + @partitionIdStr + ' AND ConfigurationId = pointConfig.ConfId'\r\n\r\n                 -- SDL EXCEPTION: Column name and number of columns in where clause is dynamic.\r\n                 -- Approved by Security Advisor [Bob Fruth (MSEC)] on 4/13/2012\r\n                 EXEC sp_executesql @sql, @param, @valueListTable\r\n\r\n            END";
    internal static string dynprc_QueryTestResultTrendForRelease = "\r\n            SET NOCOUNT ON\r\n            DECLARE @sql       NVARCHAR(MAX)\r\n            DECLARE @param     NVARCHAR(260)\r\n            -- Initialize the ProcedureName for error messages.\r\n            DECLARE @procedureName SYSNAME\r\n            SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..' + object_name(@@PROCID)\r\n            SET @param = '@partitionId INT, @dataspaceId INT, @sourceWorkflow NVARCHAR(128), @definitionIds typ_IdTypeTable READONLY, @envDefinitionIds typ_IdTypeTable READONLY, @runTitles typ_NameTypeTable READONLY, @buildCount INT, @historyDays INT, @maxCompleteDate DATETIME'\r\n            SET @sql = \r\n                'DECLARE @releaseAndRunRef TABLE(ReleaseId INT,\r\n                                               ReleaseName NVARCHAR(256),\r\n                                               ReleaseUri NVARCHAR(256),\r\n                                               ReleaseDefId INT,                                               \r\n                                               TestRunId  INT)\r\n                --Set date to be current if not specified by user.\r\n                SELECT @maxCompleteDate = ISNULL(@maxCompleteDate, GETUTCDATE())\r\n                \r\n                --Finding builds and runs\r\n                INSERT INTO @releaseAndRunRef\r\n                SELECT ReleaseId, ReleaseName, ReleaseUri, ReleaseDefId, TestRunId\r\n                FROM (\r\n                        SELECT bc.ReleaseId, bc.ReleaseName, bc.ReleaseUri, bc.ReleaseDefId, bc.ReleaseCreationDate, run.TestRunId,\r\n                               DENSE_RANK() OVER (ORDER BY bc.ReleaseCreationDate DESC, bc.ReleaseId DESC) AS GroupRank\r\n                        FROM tbl_ReleaseRef bc\r\n                        JOIN tbl_TestRunContext rc\r\n                        ON   bc.PartitionId = rc.PartitionId\r\n                        AND  bc.DataspaceId = rc.DataspaceId\r\n                        AND  bc.ReleaseRefId = rc.ReleaseRefId\r\n                        JOIN tbl_TestRun run\r\n                        ON   run.PartitionId = rc.PartitionId\r\n                        AND  run.DataspaceId = rc.DataspaceId\r\n                        AND  run.TestRunContextId = rc.TestRunContextId\r\n                        AND  run.State In (3,6)   --Completed, NeedsInvestigation\r\n                        WHERE bc.PartitionId = @partitionId\r\n                        AND   bc.DataspaceId = @dataspaceId\r\n                        AND   rc.SourceWorkflow = @sourceWorkflow\r\n                        AND   bc.ReleaseCreationDate <=  @maxCompleteDate\r\n                        AND   bc.ReleaseCreationDate > DATEADD(DAY, -@historyDays, @maxCompleteDate)                        \r\n                        AND   {0}               --Release filter clause\r\n                        AND   {1}               --Run filter clause\r\n                        AND   {2}               --Environment Definition Ids filter clause                     \r\n                    ) AS Out\r\n                WHERE GroupRank <= @buildCount\r\n                OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN, @maxCompleteDate UNKNOWN))\r\n\r\n                IF EXISTS (SELECT 1 FROM @releaseAndRunRef)\r\n                BEGIN\r\n                    SELECT DISTINCT ReleaseId, ReleaseName, ReleaseUri, ReleaseDefId\r\n                    FROM @releaseAndRunRef\r\n                    ORDER BY ReleaseId DESC\r\n\t                SELECT   bri.ReleaseId, summ.TestRunId, summ.TestOutcome, ResultCount AS ResultCount, RunDuration       \r\n\t                FROM tbl_TestRunSummary summ\r\n                    JOIN @releaseAndRunRef bri\r\n                    ON   summ.PartitionId = @partitionId\r\n                         AND summ.DataspaceId = @dataspaceId\r\n                         AND summ.TestRunId = bri.TestRunId\t                \r\n                     ORDER BY bri.ReleaseId DESC, bri.TestRunId ASC\r\n                    OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                END'\r\n                EXEC sp_executesql @sql, @param, @partitionId = @partitionId, @dataspaceId = @dataspaceId, @sourceWorkflow = @sourceWorkflow, @definitionIds = @definitionIds, @envDefinitionIds = @envDefinitionIds, @runTitles = @runTitles, @buildCount = @buildCount, @historyDays = @historyDays, @maxCompleteDate = @maxCompleteDate";
    internal static string dynprc_QueryTestResultTrendForBuild = "\r\n            SET NOCOUNT ON\r\n\r\n            DECLARE @sql       NVARCHAR(MAX)\r\n            DECLARE @param     NVARCHAR(260)\r\n\r\n            -- Initialize the ProcedureName for error messages.\r\n            DECLARE @procedureName SYSNAME\r\n            SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..' + object_name(@@PROCID)\r\n\r\n            SET @param = '@partitionId INT, @dataspaceId INT, @sourceWorkflow NVARCHAR(128), @definitionIds typ_IdTypeTable READONLY, @branchNames typ_BranchNameTypeTable READONLY, @runTitles typ_NameTypeTable READONLY, @buildCount INT, @historyDays INT, @maxCompleteDate DATETIME'\r\n\r\n            SET @sql = \r\n                'DECLARE @buildAndRunRef TABLE(BuildId INT,\r\n                                               BuildNumber NVARCHAR(256),\r\n                                               BuildUri NVARCHAR(256),\r\n                                               BuildDefinitionId INT,\r\n                                               BranchName  NVARCHAR(400),\r\n                                               TestRunId  INT)\r\n\r\n                --Set date to be current if not specified by user.\r\n                SELECT @maxCompleteDate = ISNULL(@maxCompleteDate, GETUTCDATE())\r\n                \r\n                --Finding builds and runs\r\n                INSERT INTO @buildAndRunref\r\n                SELECT BuildId, BuildNumber, BuildUri, BuildDefinitionId, BranchName, TestRunId\r\n                FROM (\r\n                        SELECT bc.BuildId, bc.BuildNumber, bc.BuildUri, bc.BuildDefinitionId, bc.BranchName, bc.CreatedDate, run.TestRunId,\r\n                               DENSE_RANK() OVER (ORDER BY bc.CreatedDate DESC, bc.BuildId DESC) AS GroupRank\r\n                        FROM tbl_BuildConfiguration bc\r\n                        JOIN tbl_TestRunContext rc\r\n                        ON   bc.PartitionId = rc.PartitionId\r\n                        AND  bc.DataspaceId = rc.DataspaceId\r\n                        AND  bc.BuildConfigurationId = rc.BuildRefId\r\n                        JOIN tbl_TestRun run\r\n                        ON   run.PartitionId = rc.PartitionId\r\n                        AND  run.DataspaceId = rc.DataspaceId\r\n                        AND  run.TestRunContextId = rc.TestRunContextId\r\n                        AND  run.State In (3,6)    --Completed, NeedsInvestigation\r\n                        WHERE bc.PartitionId = @partitionId\r\n                        AND   bc.DataspaceId = @dataspaceId\r\n                        AND   rc.SourceWorkflow = @sourceWorkflow\r\n                        AND   bc.CreatedDate <=  @maxCompleteDate\r\n                        AND   bc.CreatedDate > DATEADD(DAY, -@historyDays, @maxCompleteDate)\r\n                        AND   {0}               --Build filter clause\r\n                        AND   {1}               --Run filter clause                     \r\n                    ) AS Out\r\n                WHERE GroupRank <= @buildCount\r\n                OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN, @maxCompleteDate UNKNOWN))\r\n\r\n                IF EXISTS (SELECT 1 FROM @buildAndRunRef)\r\n                BEGIN\r\n                    SELECT DISTINCT BuildId, BuildNumber, BuildUri, BuildDefinitionId, BranchName\r\n                    FROM @buildAndRunRef\r\n                    ORDER BY BuildId DESC\r\n\r\n\t              SELECT   bri.BuildId, summ.TestRunId, summ.TestOutcome, ResultCount AS ResultCount, RunDuration       \r\n\t                FROM tbl_TestRunSummary summ\r\n                    JOIN @buildAndRunRef bri\r\n                    ON   summ.PartitionId = @partitionId\r\n                         AND summ.DataspaceId = @dataspaceId\r\n                         AND summ.TestRunId = bri.TestRunId\t                \r\n                     ORDER BY bri.BuildId DESC, bri.TestRunId ASC\r\n                    OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                END'\r\n\r\n                EXEC sp_executesql @sql, @param, @partitionId = @partitionId, @dataspaceId = @dataspaceId, @sourceWorkflow = @sourceWorkflow, @definitionIds = @definitionIds, @branchNames = @branchNames, @runTitles = @runTitles, @buildCount = @buildCount, @historyDays = @historyDays, @maxCompleteDate = @maxCompleteDate";
    internal static string idynprc_FilterRunContextIdsAndQueryFailingSince = "\r\n                        DECLARE @resultDetails Table (RunContextId INT NOT NULL, TestRunId INT NOT NULL, TestResultId INT NOT NULL, DateCompleted DateTime, DateStarted DateTime, Outcome TINYINT NOT NULL)\r\n                        DECLARE @failingSinceFieldId    INT\r\n                        \r\n                        --Set date to be current if not specified by user.\r\n                        SELECT @maxCompleteDate = ISNULL(@maxCompleteDate, GETUTCDATE())\r\n\r\n                        --Fetch required runcontextids\r\n                        ;WITH ResultDetails AS (\r\n                        SELECT context.TestRunContextId, res.TestRunId, res.TestResultId, res.DateCompleted, res.DateStarted, res.Outcome, \r\n                        ROW_NUMBER() OVER (PARTITION BY context.TestRunContextId ORDER BY run.CompleteDate DESC) as Rows\r\n                        FROM  dbo.tbl_TestRun run\r\n                        JOIN  dbo.tbl_TestRunContext context \r\n                        ON    context.PartitionId = run.partitionId\r\n                              AND context.DataspaceId = run.DataspaceId\r\n                              AND context.TestRunContextId = run.TestRunContextId\r\n                        JOIN TestResult.tbl_TestCaseReference ref\r\n                        ON    ref.PartitionId = run.PartitionId\r\n                              AND ref.DataspaceId = run.DataspaceId\r\n                              AND ref.AutomatedTestName = @automatedTestName\r\n                        INNER LOOP JOIN  TestResult.tbl_TestResult res WITH (FORCESEEK(ix_TestResult_TestCaseRefId2(PartitionId, DataspaceId, TestCaseRefId)))\r\n                        ON    res.PartitionId = run.PartitionId\r\n                              AND res.DataspaceId = ref.DataspaceId\r\n                              AND res.TestCaseRefId = ref.TestCaseRefId\r\n                              AND res.TestRunId = run.TestRunId                             \r\n                        WHERE run.PartitionId = @partitionId\r\n                              AND run.DataspaceId = @dataspaceId\r\n                              AND run.State In (3,6)\r\n                              AND run.CompleteDate > DATEADD(day, -@historyDays, @maxCompleteDate) --Considering runs for last N days\r\n                              AND run.CompleteDate <= @maxCompleteDate\r\n                              )\r\n                        INSERT INTO @resultDetails\r\n                        SELECT TestRunContextId, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome from ResultDetails where Rows = 1\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN, @maxCompleteDate UNKNOWN))\r\n                    \r\n                        SELECT @failingSinceFieldId = FieldId\r\n                        FROM tbl_TestFieldsEx \r\n                        WHERE PartitionId = @partitionId\r\n                        AND DataspaceId = @dataspaceId\r\n                        AND FieldName = ''FailingSince''";
    internal static string idynprc_FilterRunContextIdsAndQueryFailingSinceV2 = "\r\n                        DECLARE @resultDetails Table (RunContextId INT NOT NULL, TestRunId INT NOT NULL, TestResultId INT NOT NULL, DateCompleted DateTime, DateStarted DateTime, Outcome TINYINT NOT NULL)\r\n                        DECLARE @failingSinceFieldId    INT\r\n                        \r\n                        --Set date to be current if not specified by user.\r\n                        SELECT @maxCompleteDate = ISNULL(@maxCompleteDate, GETUTCDATE())\r\n\r\n                        --Fetch required runcontextids\r\n                        ;WITH ResultDetails AS (\r\n                        SELECT context.TestRunContextId, res.TestRunId, res.TestResultId, res.DateCompleted, res.DateStarted, res.Outcome, \r\n                        ROW_NUMBER() OVER (PARTITION BY context.TestRunContextId ORDER BY run.CompleteDate DESC) as Rows\r\n                        FROM  dbo.tbl_TestRun run\r\n                        JOIN  dbo.tbl_TestRunContext context \r\n                        ON    context.PartitionId = run.partitionId\r\n                              AND context.DataspaceId = run.DataspaceId\r\n                              AND context.TestRunContextId = run.TestRunContextId\r\n                        JOIN TestResult.tbl_TestCaseReference ref\r\n                        ON    ref.PartitionId = run.PartitionId\r\n                              AND ref.DataspaceId = run.DataspaceId\r\n                              AND ref.AutomatedTestName = @automatedTestName\r\n                        INNER LOOP JOIN  TestResult.tbl_TestResult res WITH (FORCESEEK(ix_TestResult_TestCaseRefId2(PartitionId, DataspaceId, TestCaseRefId)))\r\n                        ON    res.PartitionId = run.PartitionId\r\n                              AND res.DataspaceId = ref.DataspaceId\r\n                              AND res.TestCaseRefId = ref.TestCaseRefId\r\n                              AND res.TestRunId = run.TestRunId                             \r\n                        WHERE run.PartitionId = @partitionId\r\n                              AND run.DataspaceId = @dataspaceId\r\n                              AND run.State In (3,6)\r\n                              AND run.CompleteDate > DATEADD(day, -@historyDays, @maxCompleteDate) --Considering runs for last N days\r\n                              AND run.CompleteDate <= @maxCompleteDate\r\n                              AND res.State = 5  -- Considering results which are in completed state\r\n                              )\r\n                        INSERT INTO @resultDetails\r\n                        SELECT TestRunContextId, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome from ResultDetails where Rows = 1\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN, @maxCompleteDate UNKNOWN))\r\n                    \r\n                        SELECT @failingSinceFieldId = FieldId\r\n                        FROM tbl_TestFieldsEx \r\n                        WHERE PartitionId = @partitionId\r\n                        AND DataspaceId = @dataspaceId\r\n                        AND FieldName = ''FailingSince''";
    internal static string idynprc_FilterRunContextIdsAndQueryFailingSinceV3 = "\r\n                        DECLARE @resultDetails Table (RunContextId INT NOT NULL, TestRunId INT NOT NULL, TestResultId INT NOT NULL, DateCompleted DateTime, DateStarted DateTime, Outcome TINYINT NOT NULL)\r\n                        DECLARE @failingSinceFieldId    INT\r\n                        \r\n                        --Set date to be current if not specified by user.\r\n                        SELECT @maxCompleteDate = ISNULL(@maxCompleteDate, GETUTCDATE())\r\n\r\n                        --Fetch required runcontextids\r\n                        ;WITH ResultDetails AS (\r\n                        SELECT context.TestRunContextId, res.TestRunId, res.TestResultId, res.DateCompleted, res.DateStarted, res.Outcome, \r\n                        ROW_NUMBER() OVER (PARTITION BY context.TestRunContextId ORDER BY run.CompleteDate DESC) as Rows\r\n                        FROM  dbo.tbl_TestRun run\r\n                        JOIN  dbo.tbl_TestRunContext context \r\n                        ON    context.PartitionId = run.partitionId\r\n                              AND context.DataspaceId = run.DataspaceId\r\n                              AND context.TestRunContextId = run.TestRunContextId\r\n                        JOIN TestResult.tbl_TestCaseReference ref\r\n                        ON    ref.PartitionId = run.PartitionId\r\n                              AND ref.DataspaceId = run.DataspaceId\r\n                              AND ref.AutomatedTestNameHash = @automatedTestNameHash\r\n                        INNER LOOP JOIN  TestResult.tbl_TestResult res WITH (FORCESEEK(ix_TestResult_TestCaseRefId2(PartitionId, DataspaceId, TestCaseRefId)))\r\n                        ON    res.PartitionId = run.PartitionId\r\n                              AND res.DataspaceId = ref.DataspaceId\r\n                              AND res.TestCaseRefId = ref.TestCaseRefId\r\n                              AND res.TestRunId = run.TestRunId                             \r\n                        WHERE run.PartitionId = @partitionId\r\n                              AND run.DataspaceId = @dataspaceId\r\n                              AND run.State In (3,4,6) -- TestRunState_Passed, TestRunState_Aborted, TestRunState_NeedsInvestigation\r\n                              AND run.CompleteDate > DATEADD(day, -@historyDays, @maxCompleteDate) --Considering runs for last N days\r\n                              AND run.CompleteDate <= @maxCompleteDate\r\n                              AND res.State = 5  -- Considering results which are in completed state\r\n                              )\r\n                        INSERT INTO @resultDetails\r\n                        SELECT TestRunContextId, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome from ResultDetails where Rows = 1\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN, @maxCompleteDate UNKNOWN))\r\n                    \r\n                        SELECT @failingSinceFieldId = FieldId\r\n                        FROM tbl_TestFieldsEx \r\n                        WHERE PartitionId = @partitionId\r\n                        AND DataspaceId = @dataspaceId\r\n                        AND FieldName = ''FailingSince''";
    internal static string dynprc_QueryTestCaseResultHistory = "\r\n            SET NOCOUNT ON\r\n\r\n            DECLARE @sql       NVARCHAR(MAX)\r\n            DECLARE @param     NVARCHAR(150)\r\n\r\n\r\n            -- Initialize the ProcedureName for error messages.\r\n            DECLARE @procedureName SYSNAME\r\n            SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..' + object_name(@@PROCID)\r\n\r\n            SET @param = '@partitionId INT, @dataspaceId INT, @automatedTestName NVARCHAR(256), @maxCompleteDate DATETIME, @historyDays INT, @buildDays INT, @definitionId INT'\r\n\r\n            SET @sql = \r\n                '\r\n                        DECLARE @workflowDetails Table (BranchName NVARCHAR(400), TestRunId INT NOT NULL, TestResultId INT NOT NULL, DateCompleted DateTime, DateStarted DateTime, Outcome TINYINT NOT NULL, BuildId INT, BuildNumber NVARCHAR(256), ReleaseId INT, ReleaseName NVARCHAR(256))\r\n                        \r\n                        {1}\r\n\r\n                        ;WITH WorkflowDetailsCTE AS(\r\n                        SELECT buildConfiguration.BranchName, resultDetails.TestRunId, resultDetails.TestResultId, resultDetails.DateCompleted, resultDetails.DateStarted, resultDetails.Outcome, buildConfiguration.BuildId, buildConfiguration.BuildNumber, releaseRef.ReleaseId, releaseRef.ReleaseName,\r\n                        ROW_NUMBER() OVER (PARTITION BY buildConfiguration.BranchName ORDER BY context.TestRunContextId DESC) Rows\r\n                        FROM tbl_BuildConfiguration buildConfiguration\r\n                        JOIN tbl_testRunContext context\r\n                        ON   context.PartitionId = buildConfiguration.partitionId\r\n                             AND context.DataspaceId = buildConfiguration.DataspaceId\r\n                             AND context.BuildRefId = buildConfiguration.BuildConfigurationId\r\n                        LEFT JOIN tbl_ReleaseRef releaseRef\r\n                        ON   releaseRef.PartitionId = context.partitionId\r\n                             AND releaseRef.DataspaceId = context.DataspaceId\r\n                             AND releaseRef.ReleaseRefId = context.ReleaseRefId\r\n                        JOIN @resultDetails resultDetails\r\n                        ON    resultDetails.runContextId = context.TestRunContextId\r\n                        WHERE buildConfiguration.CreatedDate > DATEADD(day, -@buildDays, @maxCompleteDate) --Considering builds for last N days\r\n                              AND buildConfiguration.CreatedDate <= @maxCompleteDate\r\n                              AND buildConfiguration.DataspaceId = @dataspaceId\r\n                              AND buildConfiguration.PartitionId = @partitionId\r\n                              AND buildConfiguration.BranchName not like ''%refs/pull/%''\r\n                              {0}\r\n                        )                        \r\n                        INSERT INTO @workflowDetails\r\n                        SELECT BranchName, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome, BuildId, BuildNumber, ReleaseId, ReleaseName from WorkflowDetailsCTE where Rows = 1\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN, @maxCompleteDate UNKNOWN))\r\n\r\n                        SELECT BranchName, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome, BuildId, BuildNumber, ReleaseId, ReleaseName from @workFlowDetails\r\n\r\n                        SELECT  wfd.TestRunId, wfd.TestResultId, resEx.StringValue AS FailingSince\r\n                        FROM @workFlowDetails wfd\r\n                        JOIN TestResult.tbl_TestResultEx resEx\r\n                        ON   resEx.PartitionId = @partitionId\r\n                             AND resEx.DataspaceId = @dataspaceId\r\n                             AND resEx.TestRunId = wfd.TestRunId\r\n                             AND resEx.TestResultId = wfd.TestResultId\r\n                             AND resEx.FieldId = @failingSinceFieldId\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                        '\r\n\r\n            EXEC sp_executesql @sql, @param, @partitionId = @partitionId, @dataspaceId = @dataspaceId, @automatedTestName = @automatedTestName, @maxCompleteDate = @maxCompleteDate, @historyDays = @historyDays, @buildDays = @buildDays, @definitionId = @definitionId";
    internal static string dynprc_QueryTestCaseResultHistoryForEnvironment = "\r\n            SET NOCOUNT ON\r\n\r\n            DECLARE @sql       NVARCHAR(MAX)\r\n            DECLARE @param     NVARCHAR(200)\r\n\r\n\r\n            -- Initialize the ProcedureName for error messages.\r\n            DECLARE @procedureName SYSNAME\r\n            SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..' + object_name(@@PROCID)\r\n\r\n            SET @param = '@partitionId INT, @dataspaceId INT, @automatedTestName NVARCHAR(256), @maxCompleteDate DATETIME, @historyDays INT, @definitionId INT, @branchName NVARCHAR(400)'\r\n\r\n            SET @sql = \r\n                '\r\n                        DECLARE @workflowDetails Table (ReleaseEnvDefId INT NOT NULL, TestRunId INT NOT NULL, TestResultId INT NOT NULL, DateCompleted DateTime, DateStarted DateTime, Outcome TINYINT NOT NULL, ReleaseId INT, ReleaseName NVARCHAR(256))\r\n                        \r\n                        {1}\r\n                        \r\n                        IF (@branchName = N'''')\r\n                        BEGIN\r\n                            ;WITH WorkflowDetailsCTE AS(\r\n                            SELECT releaseRef.ReleaseEnvDefId, resultDetails.TestRunId, resultDetails.TestResultId, resultDetails.DateCompleted, resultDetails.DateStarted, resultDetails.Outcome, releaseRef.ReleaseId, releaseRef.ReleaseName,\r\n                            ROW_NUMBER() OVER (PARTITION BY releaseRef.ReleaseEnvDefId ORDER BY context.TestRunContextId DESC) Rows\r\n                            FROM tbl_ReleaseRef releaseRef\r\n                            JOIN tbl_testRunContext context\r\n                            ON   context.PartitionId = releaseRef.partitionId\r\n                                 AND context.DataspaceId = releaseRef.DataspaceId\r\n                                 AND context.ReleaseRefId = releaseRef.ReleaseRefId\r\n                            JOIN @resultDetails resultDetails\r\n                            ON    resultDetails.runContextId = context.TestRunContextId\r\n                            WHERE releaseRef.DataspaceId = @dataspaceId\r\n                                  AND releaseRef.PartitionId = @partitionId\r\n                                  AND releaseRef.ReleaseEnvDefId IS NOT NULL\r\n                            )\r\n                            INSERT INTO @workflowDetails\r\n                            SELECT ReleaseEnvDefId, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome, ReleaseId, ReleaseName from WorkflowDetailsCTE where Rows = 1\r\n                            OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                        END\r\n                        ELSE\r\n                        BEGIN\r\n                            ;WITH WorkflowDetailsCTE AS(\r\n                            SELECT releaseRef.ReleaseEnvDefId, resultDetails.TestRunId, resultDetails.TestResultId, resultDetails.DateCompleted, resultDetails.DateStarted, resultDetails.Outcome, releaseRef.ReleaseId, releaseRef.ReleaseName,\r\n                            ROW_NUMBER() OVER (PARTITION BY releaseRef.ReleaseEnvDefId ORDER BY context.TestRunContextId DESC) Rows\r\n                            FROM tbl_ReleaseRef releaseRef\r\n                            JOIN tbl_BuildConfiguration bc\r\n                            ON  bc.PartitionId = @partitionId\r\n                                AND bc.DataspaceId = @dataspaceId\r\n                                AND bc.BranchName = @branchName\r\n                            JOIN tbl_testRunContext context\r\n                            ON   context.PartitionId = releaseRef.partitionId\r\n                                 AND context.DataspaceId = releaseRef.DataspaceId\r\n                                 AND context.ReleaseRefId = releaseRef.ReleaseRefId\r\n                                 AND context.BuildRefId = bc.BuildConfigurationId\r\n                            JOIN @resultDetails resultDetails\r\n                            ON    resultDetails.runContextId = context.TestRunContextId\r\n                            WHERE releaseRef.DataspaceId = @dataspaceId\r\n                                  AND releaseRef.PartitionId = @partitionId\r\n                                  AND releaseRef.ReleaseEnvDefId IS NOT NULL\r\n                            )\r\n                            INSERT INTO @workflowDetails\r\n                            SELECT ReleaseEnvDefId, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome, ReleaseId, ReleaseName from WorkflowDetailsCTE where Rows = 1\r\n                            OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                        END\r\n\r\n                        SELECT ReleaseEnvDefId, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome, ReleaseId, ReleaseName from @workFlowDetails\r\n\r\n                        SELECT  wfd.TestRunId, wfd.TestResultId, resEx.StringValue AS FailingSince\r\n                        FROM @workFlowDetails wfd\r\n                        JOIN TestResult.tbl_TestResultEx resEx\r\n                        ON   resEx.PartitionId = @partitionId\r\n                             AND resEx.DataspaceId = @dataspaceId\r\n                             AND resEx.TestRunId = wfd.TestRunId\r\n                             AND resEx.TestResultId = wfd.TestResultId\r\n                             AND resEx.FieldId = @failingSinceFieldId\r\n                         OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                        '\r\n\r\n            EXEC sp_executesql @sql, @param, @partitionId = @partitionId, @dataspaceId = @dataspaceId, @automatedTestName = @automatedTestName, @maxCompleteDate = @maxCompleteDate, @historyDays = @historyDays, @definitionId = @definitionId, @branchName = @branchName";
    internal static string dynprc_QueryTestCaseResultHistoryV2 = "\r\n            SET NOCOUNT ON\r\n\r\n            DECLARE @sql       NVARCHAR(MAX)\r\n            DECLARE @param     NVARCHAR(160)\r\n\r\n\r\n            -- Initialize the ProcedureName for error messages.\r\n            DECLARE @procedureName SYSNAME\r\n            SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..' + object_name(@@PROCID)\r\n\r\n            SET @param = '@partitionId INT, @dataspaceId INT, @automatedTestNameHash VARBINARY(32), @maxCompleteDate DATETIME, @historyDays INT, @buildDays INT, @definitionId INT'\r\n\r\n            SET @sql = \r\n                '\r\n                        DECLARE @workflowDetails Table (BranchName NVARCHAR(400), TestRunId INT NOT NULL, TestResultId INT NOT NULL, DateCompleted DateTime, DateStarted DateTime, Outcome TINYINT NOT NULL, BuildId INT, BuildNumber NVARCHAR(256), ReleaseId INT, ReleaseName NVARCHAR(256))\r\n                        \r\n                        {1}\r\n\r\n                        ;WITH WorkflowDetailsCTE AS(\r\n                        SELECT buildConfiguration.BranchName, resultDetails.TestRunId, resultDetails.TestResultId, resultDetails.DateCompleted, resultDetails.DateStarted, resultDetails.Outcome, buildConfiguration.BuildId, buildConfiguration.BuildNumber, releaseRef.ReleaseId, releaseRef.ReleaseName,\r\n                        ROW_NUMBER() OVER (PARTITION BY buildConfiguration.BranchName ORDER BY context.TestRunContextId DESC) Rows\r\n                        FROM tbl_BuildConfiguration buildConfiguration\r\n                        JOIN tbl_testRunContext context\r\n                        ON   context.PartitionId = buildConfiguration.partitionId\r\n                             AND context.DataspaceId = buildConfiguration.DataspaceId\r\n                             AND context.BuildRefId = buildConfiguration.BuildConfigurationId\r\n                        LEFT JOIN tbl_ReleaseRef releaseRef\r\n                        ON   releaseRef.PartitionId = context.partitionId\r\n                             AND releaseRef.DataspaceId = context.DataspaceId\r\n                             AND releaseRef.ReleaseRefId = context.ReleaseRefId\r\n                        JOIN @resultDetails resultDetails\r\n                        ON    resultDetails.runContextId = context.TestRunContextId\r\n                        WHERE buildConfiguration.CreatedDate > DATEADD(day, -@buildDays, @maxCompleteDate) --Considering builds for last N days\r\n                              AND buildConfiguration.CreatedDate <= @maxCompleteDate\r\n                              AND buildConfiguration.DataspaceId = @dataspaceId\r\n                              AND buildConfiguration.PartitionId = @partitionId\r\n                              AND buildConfiguration.BranchName not like ''refs/pull/[0-9]%''                      \r\n                              {0}\r\n                        )                        \r\n                        INSERT INTO @workflowDetails\r\n                        SELECT BranchName, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome, BuildId, BuildNumber, ReleaseId, ReleaseName from WorkflowDetailsCTE where Rows = 1\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN, @maxCompleteDate UNKNOWN))\r\n\r\n                        SELECT BranchName, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome, BuildId, BuildNumber, ReleaseId, ReleaseName from @workFlowDetails\r\n\r\n                        SELECT  wfd.TestRunId, wfd.TestResultId, resEx.StringValue AS FailingSince\r\n                        FROM @workFlowDetails wfd\r\n                        JOIN TestResult.tbl_TestResultEx resEx\r\n                        ON   resEx.PartitionId = @partitionId\r\n                             AND resEx.DataspaceId = @dataspaceId\r\n                             AND resEx.TestRunId = wfd.TestRunId\r\n                             AND resEx.TestResultId = wfd.TestResultId\r\n                             AND resEx.FieldId = @failingSinceFieldId\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                        '\r\n\r\n            EXEC sp_executesql @sql, @param, @partitionId = @partitionId, @dataspaceId = @dataspaceId, @automatedTestNameHash = @automatedTestNameHash, @maxCompleteDate = @maxCompleteDate, @historyDays = @historyDays, @buildDays = @buildDays, @definitionId = @definitionId";
    internal static string dynprc_QueryTestCaseResultHistoryWithTfvcBranchFiltering = "\r\n            SET NOCOUNT ON\r\n\r\n            DECLARE @sql       NVARCHAR(MAX)\r\n            DECLARE @param     NVARCHAR(160)\r\n\r\n\r\n            -- Initialize the ProcedureName for error messages.\r\n            DECLARE @procedureName SYSNAME\r\n            SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..' + object_name(@@PROCID)\r\n\r\n            SET @param = '@partitionId INT, @dataspaceId INT, @automatedTestNameHash VARBINARY(32), @maxCompleteDate DATETIME, @historyDays INT, @buildDays INT, @definitionId INT'\r\n\r\n            SET @sql = \r\n                '\r\n                        DECLARE @workflowDetails Table (BranchName NVARCHAR(400), TestRunId INT NOT NULL, TestResultId INT NOT NULL, DateCompleted DateTime, DateStarted DateTime, Outcome TINYINT NOT NULL, BuildId INT, BuildNumber NVARCHAR(256), ReleaseId INT, ReleaseName NVARCHAR(256))\r\n                        \r\n                        {1}\r\n\r\n                        ;WITH WorkflowDetailsCTE AS(\r\n                        SELECT buildConfiguration.BranchName, resultDetails.TestRunId, resultDetails.TestResultId, resultDetails.DateCompleted, resultDetails.DateStarted, resultDetails.Outcome, buildConfiguration.BuildId, buildConfiguration.BuildNumber, releaseRef.ReleaseId, releaseRef.ReleaseName,\r\n                        ROW_NUMBER() OVER (PARTITION BY buildConfiguration.BranchName ORDER BY context.TestRunContextId DESC) Rows\r\n                        FROM tbl_BuildConfiguration buildConfiguration\r\n                        JOIN tbl_testRunContext context\r\n                        ON   context.PartitionId = buildConfiguration.partitionId\r\n                             AND context.DataspaceId = buildConfiguration.DataspaceId\r\n                             AND context.BuildRefId = buildConfiguration.BuildConfigurationId\r\n                        LEFT JOIN tbl_ReleaseRef releaseRef\r\n                        ON   releaseRef.PartitionId = context.partitionId\r\n                             AND releaseRef.DataspaceId = context.DataspaceId\r\n                             AND releaseRef.ReleaseRefId = context.ReleaseRefId\r\n                        JOIN @resultDetails resultDetails\r\n                        ON    resultDetails.runContextId = context.TestRunContextId\r\n                        WHERE buildConfiguration.CreatedDate > DATEADD(day, -@buildDays, @maxCompleteDate) --Considering builds for last N days\r\n                              AND buildConfiguration.CreatedDate <= @maxCompleteDate\r\n                              AND buildConfiguration.DataspaceId = @dataspaceId\r\n                              AND buildConfiguration.PartitionId = @partitionId\r\n                              AND buildConfiguration.RepoType <> ''TfsVersionControl'' AND buildConfiguration.BranchName not like ''refs/pull/[0-9]%''\r\n                              {0}\r\n                        UNION\r\n                        SELECT buildConfiguration.BranchName, resultDetails.TestRunId, resultDetails.TestResultId, resultDetails.DateCompleted, resultDetails.DateStarted, resultDetails.Outcome, buildConfiguration.BuildId, buildConfiguration.BuildNumber, releaseRef.ReleaseId, releaseRef.ReleaseName,\r\n                        ROW_NUMBER() OVER (PARTITION BY buildConfiguration.BranchName ORDER BY context.TestRunContextId DESC) Rows\r\n                        FROM tbl_BuildConfiguration buildConfiguration\r\n                        JOIN tbl_testRunContext context\r\n                        ON   context.PartitionId = buildConfiguration.partitionId\r\n                             AND context.DataspaceId = buildConfiguration.DataspaceId\r\n                             AND context.BuildRefId = buildConfiguration.BuildConfigurationId\r\n                        LEFT JOIN tbl_ReleaseRef releaseRef\r\n                        ON   releaseRef.PartitionId = context.partitionId\r\n                             AND releaseRef.DataspaceId = context.DataspaceId\r\n                             AND releaseRef.ReleaseRefId = context.ReleaseRefId\r\n                        JOIN @resultDetails resultDetails\r\n                        ON    resultDetails.runContextId = context.TestRunContextId\r\n                        WHERE buildConfiguration.CreatedDate > DATEADD(day, -@buildDays, @maxCompleteDate) --Considering builds for last N days\r\n                              AND buildConfiguration.CreatedDate <= @maxCompleteDate\r\n                              AND buildConfiguration.DataspaceId = @dataspaceId\r\n                              AND buildConfiguration.PartitionId = @partitionId\r\n                              AND buildConfiguration.RepoType = ''TfsVersionControl'' AND buildConfiguration.BranchName like ''$/%''\r\n                              {0}\r\n                        )                        \r\n                        INSERT INTO @workflowDetails\r\n                        SELECT BranchName, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome, BuildId, BuildNumber, ReleaseId, ReleaseName from WorkflowDetailsCTE where Rows = 1\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN, @maxCompleteDate UNKNOWN))\r\n\r\n                        SELECT BranchName, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome, BuildId, BuildNumber, ReleaseId, ReleaseName from @workFlowDetails\r\n\r\n                        SELECT  wfd.TestRunId, wfd.TestResultId, resEx.StringValue AS FailingSince\r\n                        FROM @workFlowDetails wfd\r\n                        JOIN TestResult.tbl_TestResultEx resEx\r\n                        ON   resEx.PartitionId = @partitionId\r\n                             AND resEx.DataspaceId = @dataspaceId\r\n                             AND resEx.TestRunId = wfd.TestRunId\r\n                             AND resEx.TestResultId = wfd.TestResultId\r\n                             AND resEx.FieldId = @failingSinceFieldId\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                        '\r\n\r\n            EXEC sp_executesql @sql, @param, @partitionId = @partitionId, @dataspaceId = @dataspaceId, @automatedTestNameHash = @automatedTestNameHash, @maxCompleteDate = @maxCompleteDate, @historyDays = @historyDays, @buildDays = @buildDays, @definitionId = @definitionId";
    internal static string dynprc_QueryTestCaseResultHistoryForEnvironmentV2 = "\r\n            SET NOCOUNT ON\r\n\r\n            DECLARE @sql       NVARCHAR(MAX)\r\n            DECLARE @param     NVARCHAR(200)\r\n\r\n\r\n            -- Initialize the ProcedureName for error messages.\r\n            DECLARE @procedureName SYSNAME\r\n            SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..' + object_name(@@PROCID)\r\n\r\n            SET @param = '@partitionId INT, @dataspaceId INT, @automatedTestNameHash VARBINARY(32), @maxCompleteDate DATETIME, @historyDays INT, @definitionId INT, @branchName NVARCHAR(400)'\r\n\r\n            SET @sql = \r\n                '\r\n                        DECLARE @workflowDetails Table (ReleaseEnvDefId INT NOT NULL, TestRunId INT NOT NULL, TestResultId INT NOT NULL, DateCompleted DateTime, DateStarted DateTime, Outcome TINYINT NOT NULL, ReleaseId INT, ReleaseName NVARCHAR(256))\r\n                        \r\n                        {1}\r\n                        \r\n                        IF (@branchName = N'''')\r\n                        BEGIN\r\n                            ;WITH WorkflowDetailsCTE AS(\r\n                            SELECT releaseRef.ReleaseEnvDefId, resultDetails.TestRunId, resultDetails.TestResultId, resultDetails.DateCompleted, resultDetails.DateStarted, resultDetails.Outcome, releaseRef.ReleaseId, releaseRef.ReleaseName,\r\n                            ROW_NUMBER() OVER (PARTITION BY releaseRef.ReleaseEnvDefId ORDER BY context.TestRunContextId DESC) Rows\r\n                            FROM tbl_ReleaseRef releaseRef\r\n                            JOIN tbl_testRunContext context\r\n                            ON   context.PartitionId = releaseRef.partitionId\r\n                                 AND context.DataspaceId = releaseRef.DataspaceId\r\n                                 AND context.ReleaseRefId = releaseRef.ReleaseRefId\r\n                            JOIN @resultDetails resultDetails\r\n                            ON    resultDetails.runContextId = context.TestRunContextId\r\n                            WHERE releaseRef.DataspaceId = @dataspaceId\r\n                                  AND releaseRef.PartitionId = @partitionId\r\n                                  AND releaseRef.ReleaseEnvDefId IS NOT NULL\r\n                            )\r\n                            INSERT INTO @workflowDetails\r\n                            SELECT ReleaseEnvDefId, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome, ReleaseId, ReleaseName from WorkflowDetailsCTE where Rows = 1\r\n                            OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                        END\r\n                        ELSE\r\n                        BEGIN\r\n                            ;WITH WorkflowDetailsCTE AS(\r\n                            SELECT releaseRef.ReleaseEnvDefId, resultDetails.TestRunId, resultDetails.TestResultId, resultDetails.DateCompleted, resultDetails.DateStarted, resultDetails.Outcome, releaseRef.ReleaseId, releaseRef.ReleaseName,\r\n                            ROW_NUMBER() OVER (PARTITION BY releaseRef.ReleaseEnvDefId ORDER BY context.TestRunContextId DESC) Rows\r\n                            FROM tbl_ReleaseRef releaseRef\r\n                            JOIN tbl_BuildConfiguration bc\r\n                            ON  bc.PartitionId = @partitionId\r\n                                AND bc.DataspaceId = @dataspaceId\r\n                                AND bc.BranchName = @branchName\r\n                            JOIN tbl_testRunContext context\r\n                            ON   context.PartitionId = releaseRef.partitionId\r\n                                 AND context.DataspaceId = releaseRef.DataspaceId\r\n                                 AND context.ReleaseRefId = releaseRef.ReleaseRefId\r\n                                 AND context.BuildRefId = bc.BuildConfigurationId\r\n                            JOIN @resultDetails resultDetails\r\n                            ON    resultDetails.runContextId = context.TestRunContextId\r\n                            WHERE releaseRef.DataspaceId = @dataspaceId\r\n                                  AND releaseRef.PartitionId = @partitionId\r\n                                  AND releaseRef.ReleaseEnvDefId IS NOT NULL\r\n                            )\r\n                            INSERT INTO @workflowDetails\r\n                            SELECT ReleaseEnvDefId, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome, ReleaseId, ReleaseName from WorkflowDetailsCTE where Rows = 1\r\n                            OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                        END\r\n\r\n                        SELECT ReleaseEnvDefId, TestRunId, TestResultId, DateCompleted, DateStarted, Outcome, ReleaseId, ReleaseName from @workFlowDetails\r\n\r\n                        SELECT  wfd.TestRunId, wfd.TestResultId, resEx.StringValue AS FailingSince\r\n                        FROM @workFlowDetails wfd\r\n                        JOIN TestResult.tbl_TestResultEx resEx\r\n                        ON   resEx.PartitionId = @partitionId\r\n                             AND resEx.DataspaceId = @dataspaceId\r\n                             AND resEx.TestRunId = wfd.TestRunId\r\n                             AND resEx.TestResultId = wfd.TestResultId\r\n                             AND resEx.FieldId = @failingSinceFieldId\r\n                         OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                        '\r\n\r\n            EXEC sp_executesql @sql, @param, @partitionId = @partitionId, @dataspaceId = @dataspaceId, @automatedTestNameHash = @automatedTestNameHash, @maxCompleteDate = @maxCompleteDate, @historyDays = @historyDays, @definitionId = @definitionId, @branchName = @branchName";
    private static string _selectRunIdsForBuildOrRelease = "\r\n        IF (@releaseId > 0)\r\n                BEGIN\r\n                    IF (@releaseEnvId > 0)\r\n                    BEGIN\r\n                        WITH relRefs AS\r\n                        (\r\n                            SELECT PartitionId, DataspaceId, ReleaseRefId, ROW_NUMBER() OVER(PARTITION BY ReleaseId, ReleaseEnvId ORDER BY Attempt DESC) AS ReleaseOrder\r\n                            FROM tbl_ReleaseRef\r\n                            WHERE PartitionId = @partitionId\r\n                                  AND DataspaceId = @dataspaceId\r\n                                  AND ReleaseId = @releaseId\r\n                                  AND ReleaseEnvId = @releaseEnvId\r\n                        )\r\n                        INSERT INTO @runIds (Id)\r\n                        SELECT run.TestRunId \r\n                        FROM relRefs rr\r\n                        INNER LOOP JOIN tbl_TestRunContext rc WITH(FORCESEEK(ix_TestRunContext_DataspaceId_ReleaseRefId(PartitionId, DataspaceId, ReleaseRefId)))\r\n                        ON rc.PartitionId = rr.PartitionId\r\n                            AND rc.DataspaceId = rr.DataspaceId\r\n                            AND rc.ReleaseRefId = rr.ReleaseRefId\r\n                            AND rc.SourceWorkflow = @sourceWorkflow\r\n                        INNER LOOP JOIN tbl_TestRun run WITH(FORCESEEK(ix_TestRun_DataspaceId_TestRunContextId(PartitionId, DataspaceId, TestRunContextId)))\r\n                        ON run.PartitionId = rc.PartitionId\r\n                            AND run.DataspaceId = rc.DataspaceId\r\n                            AND run.TestRunContextId = rc.TestRunContextId\r\n                        WHERE rr.ReleaseOrder = 1\r\n                            AND run.State In (3,6)\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                    END\r\n                    ELSE\r\n                        BEGIN\r\n                        WITH relRefs AS\r\n                        (\r\n                            SELECT PartitionId, DataspaceId, ReleaseRefId, ReleaseEnvId, ROW_NUMBER() OVER(PARTITION BY ReleaseId, ReleaseEnvId ORDER BY Attempt DESC) AS ReleaseOrder\r\n                            FROM tbl_ReleaseRef\r\n                            WHERE PartitionId = @partitionId\r\n                                  AND DataspaceId = @dataspaceId\r\n                                  AND ReleaseId = @releaseId\r\n                        )\r\n                        INSERT INTO @runIds (Id, ReleaseEnvId)\r\n                        SELECT run.TestRunId, rr.ReleaseEnvId\r\n                        FROM relRefs rr\r\n                        INNER LOOP JOIN tbl_TestRunContext rc WITH(FORCESEEK(ix_TestRunContext_DataspaceId_ReleaseRefId(PartitionId, DataspaceId, ReleaseRefId)))\r\n                        ON rc.PartitionId = rr.PartitionId\r\n                            AND rc.DataspaceId = rr.DataspaceId\r\n                            AND rc.ReleaseRefId = rr.ReleaseRefId\r\n                            AND rc.SourceWorkflow = @sourceWorkflow\r\n                        INNER LOOP JOIN tbl_TestRun run WITH(FORCESEEK(ix_TestRun_DataspaceId_TestRunContextId(PartitionId, DataspaceId, TestRunContextId)))\r\n                        ON run.PartitionId = rc.PartitionId\r\n                            AND run.DataspaceId = rc.DataspaceId\r\n                            AND run.TestRunContextId = rc.TestRunContextId\r\n                        WHERE rr.ReleaseOrder = 1\r\n                            AND run.State In (3,6) \r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                    END                    \r\n                END\r\n                ELSE\r\n                BEGIN\r\n                    WITH BuildConfig AS\r\n                    (\r\n                        SELECT PartitionId, DataspaceId, BuildConfigurationId\r\n                        FROM tbl_BuildConfiguration WITH (FORCESEEK(ix_BuildConfiguration_BuildUri2(PartitionId, BuildUri))) \r\n                        WHERE PartitionId = @partitionId\r\n                              AND BuildUri = @buildUri \r\n                    )\r\n                    INSERT INTO @runIds (Id)\r\n                    SELECT run.TestRunId \r\n                    FROM BuildConfig bc1\r\n                    INNER LOOP JOIN tbl_TestRunContext rc WITH(FORCESEEK(ix_TestRunContext_DataspaceId_BuildRefId(PartitionId, DataspaceId, BuildRefId)))\r\n                    ON rc.PartitionId = bc1.PartitionId\r\n                        AND rc.DataspaceId = bc1.DataspaceId\r\n                        AND rc.BuildRefId = bc1.BuildConfigurationId\r\n                        AND rc.SourceWorkflow = @sourceWorkflow\r\n                    INNER LOOP JOIN tbl_TestRun run WITH(FORCESEEK(ix_TestRun_DataspaceId_TestRunContextId(PartitionId, DataspaceId, TestRunContextId)))\r\n                    ON run.PartitionId = rc.PartitionId\r\n                        AND run.DataspaceId = rc.DataspaceId\r\n                        AND run.TestRunContextId = rc.TestRunContextId\r\n                        AND run.State In (3,6)\r\n                    OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN))\r\n                END\r\n";
    internal static string dynprc_QueryAggregatedResultsForBuildBySuite_UnifyingViews_V2 = "\r\n            SET NOCOUNT ON\r\n\r\n            DECLARE @sql       NVARCHAR(MAX)\r\n            DECLARE @param     NVARCHAR(210)\r\n\r\n            -- Initialize the ProcedureName for error messages.\r\n            DECLARE @procedureName SYSNAME\r\n            SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..' + object_name(@@PROCID)\r\n\r\n            SET @param = '@partitionId INT, @dataspaceId INT, @buildId INT, @buildUri NVARCHAR(256), @releaseId INT, @releaseEnvId INT, @sourceWorkflow NVARCHAR(128)'\r\n\r\n            SET @sql = \r\n                'DECLARE @runIds Table (Id INT NOT NULL, Title NVARCHAR(256), State TINYINT, CompleteDate DATETIME, ReleaseEnvId INT)\r\n                 DECLARE @failingSinceFieldId INT\r\n                 DECLARE @pointIds Table (PointId INT, PlanId INT, SuiteId INT)\r\n                \r\n            " + TestManagementDynamicSqlBatchStatements._selectRunIdsForBuildOrRelease + "                \r\n\r\n                IF EXISTS (SELECT 1 FROM @runIds)\r\n                BEGIN \r\n                        INSERT INTO @pointIds (PointId, PlanId, SuiteId)\r\n                        SELECT point.PointId, point.PlanId, point.SuiteId\r\n                        FROM @runIds ids\r\n                        INNER LOOP JOIN dbo.tbl_TestRun run\r\n                        ON  run.PartitionId = @partitionId\r\n                            AND run.DataspaceId = @dataspaceId\r\n                            AND run.TestRunId = ids.Id\r\n                        INNER LOOP JOIN TestResult.tbl_TestResult res\r\n                        ON  res.PartitionId = @partitionId\r\n                            AND res.DataspaceId = @dataspaceId\r\n                            AND res.TestRunId = ids.Id\r\n                        INNER LOOP JOIN TestResult.tbl_TestCaseReference ref WITH (FORCESEEK(ixc_TestCaseReference_TestCaseRefId(PartitionId, DataspaceId, TestCaseRefId)))\r\n                        ON ref.PartitionId = res.PartitionId\r\n                           AND ref.DataspaceId = res.DataspaceId\r\n                           AND ref.TestCaseRefId = res.TestCaseRefId \r\n                        INNER LOOP JOIN tbl_Point point\r\n                        ON point.PartitionId = @partitionId\r\n                           AND point.PlanId = run.TestPlanId\r\n                           AND point.PointId = ref.TestPointId\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n\r\n                        SELECT DISTINCT PointId, PlanId, SuiteId\r\n                        FROM @pointIds ids\r\n                                                \r\n                        ; WITH SuiteIds AS (\r\n                            SELECT DISTINCT SuiteId\r\n                            FROM @pointIds ids\r\n                        )\r\n                        SELECT suite.SuiteId, suite.ParentSuiteId, suite.PlanId, suite.Title\r\n                        FROM SuiteIds ids\r\n                        INNER LOOP JOIN tbl_Suite suite                          \r\n                        ON  suite.PartitionId = @partitionId\r\n                            AND suite.dataSpaceId = @dataspaceId \r\n                            AND suite.SuiteId = ids.SuiteId                                              \r\n                        OPTION (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n\r\n                        UPDATE ids\r\n                        SET ids.Title = r.Title\r\n                        FROM @runIds ids\r\n                        INNER LOOP JOIN dbo.tbl_TestRun r\r\n                        ON r.TestRunId = ids.Id\r\n                        WHERE r.PartitionId = @partitionId\r\n                        AND r.DataspaceId = @dataspaceId\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                        \r\n                        --Calculate duration by start and complete date\r\n                        ;WITH result AS\r\n                        (\r\n                            SELECT res.TestRunId, res.TestResultId, ref.TestPointId, ref.TestCaseId, ref.Priority, ref.AutomatedTestStorage, res.Outcome, ISNULL(CONVERT(BIGINT,  TestResult.func_GetDuration(DateStarted, DateCompleted)), 0) AS Duration, r.TestPlanId\r\n                            FROM @runIds run\r\n                            INNER LOOP JOIN dbo.tbl_TestRun r\r\n                            ON  r.PartitionId = @partitionId\r\n                                AND r.DataspaceId = @dataspaceId\r\n                                AND r.TestRunId = run.Id\r\n                            INNER LOOP JOIN TestResult.tbl_TestResult res WITH (FORCESEEK(ixc_TestResult_TestRunId_TestResultId(PartitionId, DataspaceId, TestRunId)))\r\n                            ON  res.PartitionId = @partitionId\r\n                                AND res.DataspaceId = @dataspaceId\r\n                                AND res.TestRunId = run.Id\r\n                            INNER LOOP JOIN TestResult.tbl_TestCaseReference ref WITH (FORCESEEK(ixc_TestCaseReference_TestCaseRefId(PartitionId, DataspaceId, TestCaseRefId)))\r\n                            ON  ref.PartitionId = res.PartitionId\r\n                                AND ref.DataspaceId = res.DataspaceId\r\n                                AND ref.TestCaseRefId = res.TestCaseRefId\r\n                        )\r\n                        SELECT {0}, COUNT(Outcome) AS ResultCount, ISNULL(SUM(Duration), 0)  AS AggregatedDuration\r\n                        FROM result \r\n                        LEFT LOOP JOIN tbl_Point point\r\n                        ON point.PartitionId = @partitionId\r\n                           AND point.PlanId = result.TestPlanId\r\n                           AND point.PointId = result.TestPointId\r\n                        GROUP BY {0}\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n\r\n                        ;WITH result AS\r\n                        (\r\n                            SELECT res.TestRunId, \r\n                                   res.TestResultId, \r\n                                   res.CreationDate,\r\n                                   res.TestCaseRefId,\r\n                                   ref.TestCaseId,\r\n                                   ref.ConfigurationId,\r\n                                   ref.TestPointId,\r\n                                   res.State,\r\n                                   res.Outcome,\r\n                                   res.ResolutionStateId,\r\n                                   res.LastUpdated,\r\n                                   res.DateStarted,\r\n                                   res.DateCompleted,\r\n                                   res.Owner,\r\n                                   ref.Priority,\r\n                                   ISNULL(TestResult.func_GetDuration(res.DateStarted, res.DateCompleted), 0) AS Duration,\r\n                                   ref.TestCaseTitle,\r\n                                   ref.TestCaseRevision,\r\n                                   ref.Owner AS TestCaseOwner,\r\n                                   res.ComputerName,\r\n                                   res.AfnStripId,\r\n                                   res.ResetCount,\r\n                                   res.FailureType,\r\n                                   ref.AutomatedTestName,\r\n                                   ref.AutomatedTestStorage,\r\n                                   ref.AutomatedTestType,\r\n                                   NULL AS AutomatedTestTypeId,\r\n                                   ref.AutomatedTestId,\r\n                                   res.Revision,\r\n                                   res.RunBy,\r\n                                   res.LastUpdatedBy,\r\n                                   NULL AS Comment,\r\n                                   NULL AS ErrorMessage\r\n                            FROM @runIds run\r\n                            INNER LOOP JOIN TestResult.tbl_TestResult res WITH (FORCESEEK(ixc_TestResult_TestRunId_TestResultId(PartitionId, DataspaceId, TestRunId)))\r\n                            ON res.PartitionId = @partitionId\r\n                               AND res.DataspaceId = @dataspaceId\r\n                               AND res.TestRunId = run.Id\r\n                            INNER LOOP JOIN TestResult.tbl_TestCaseReference ref WITH (FORCESEEK(ixc_TestCaseReference_TestCaseRefId(PartitionId, DataspaceId, TestCaseRefId)))\r\n                            ON ref.PartitionId = res.PartitionId\r\n                               AND ref.DataspaceId = res.DataspaceId\r\n                               AND ref.TestCaseRefId = res.TestCaseRefId\r\n                        ) \r\n                        SELECT  {1}\r\n                        FROM result\r\n                        WHERE 1 = 1\r\n                              {2}\r\n                              {3}\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                END'\r\n\r\n                EXEC sp_executesql @sql, @param, @partitionId = @partitionId, @dataspaceId = @dataspaceId, @buildId = @buildId, @buildUri = @buildUri, @releaseId = @releaseId, @releaseEnvId = @releaseEnvId, @sourceWorkflow = @sourceWorkflow";
    internal static string _selectTestResultsForBuildOrRelease = "\r\n        ;WITH result AS\r\n        (\r\n            SELECT res.TestRunId, \r\n                    res.TestResultId, \r\n                    res.CreationDate,\r\n                    res.TestCaseRefId,\r\n                    ref.TestCaseId,\r\n                    ref.ConfigurationId,\r\n                    ref.TestPointId,\r\n                    res.State,\r\n                    res.Outcome,\r\n                    res.ResolutionStateId,\r\n                    res.LastUpdated,\r\n                    res.DateStarted,\r\n                    res.DateCompleted,\r\n                    res.Owner,\r\n                    ref.Priority,\r\n                    ISNULL(TestResult.func_GetDuration(res.DateStarted, res.DateCompleted), 0) AS Duration,\r\n                    ref.TestCaseTitle,\r\n                    ref.TestCaseRevision,\r\n                    ref.Owner AS TestCaseOwner,\r\n                    res.ComputerName,\r\n                    res.AfnStripId,\r\n                    res.ResetCount,\r\n                    res.FailureType,\r\n                    ref.AutomatedTestName,\r\n                    ref.AutomatedTestStorage,\r\n                    ref.AutomatedTestType,\r\n                    NULL AS AutomatedTestTypeId,\r\n                    ref.AutomatedTestId,\r\n                    res.Revision,\r\n                    res.RunBy,\r\n                    res.LastUpdatedBy,\r\n                    NULL AS Comment,\r\n                    NULL AS ErrorMessage,\r\n                    run.Title as Title\r\n            FROM @runIds run\r\n            INNER LOOP JOIN TestResult.tbl_TestResult res WITH (FORCESEEK(ixc_TestResult_TestRunId_TestResultId(PartitionId, DataspaceId, TestRunId)))\r\n            ON res.PartitionId = @partitionId\r\n                AND res.DataspaceId = @dataspaceId\r\n                AND res.TestRunId = run.Id\r\n            INNER LOOP JOIN TestResult.tbl_TestCaseReference ref WITH (FORCESEEK(ixc_TestCaseReference_TestCaseRefId(PartitionId, DataspaceId, TestCaseRefId)))\r\n            ON ref.PartitionId = res.PartitionId\r\n                AND ref.DataspaceId = res.DataspaceId\r\n                AND ref.TestCaseRefId = res.TestCaseRefId\r\n        )";
    internal static string dynprc_QueryAggregatedResultsForBuildV2_UnifyingViews_V2 = "\r\n            SET NOCOUNT ON\r\n\r\n            DECLARE @sql       NVARCHAR(MAX)\r\n            DECLARE @param     NVARCHAR(210)\r\n      \r\n            -- Initialize the ProcedureName for error messages.\r\n            DECLARE @procedureName SYSNAME\r\n            SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..' + object_name(@@PROCID)\r\n\r\n            SET @param = '@partitionId INT, @maxOrderByCount INT, @dataspaceId INT, @buildId INT, @buildUri NVARCHAR(256), @releaseId INT, @releaseEnvId INT, @sourceWorkflow NVARCHAR(128)'\r\n\r\n            SET @sql = \r\n                'DECLARE @runIds Table (Id INT NOT NULL, Title NVARCHAR(256), State TINYINT, CompleteDate DATETIME, ReleaseEnvId INT, TotalTests INT)\r\n                 DECLARE @failingSinceFieldId INT\r\n\r\n                " + TestManagementDynamicSqlBatchStatements._selectRunIdsForBuildOrRelease + "\r\n\r\n                IF EXISTS (SELECT 1 FROM @runIds)\r\n                BEGIN\r\n                    UPDATE ids\r\n                    SET ids.Title = r.Title,\r\n                        ids.State = r.State,\r\n                        ids.CompleteDate = r.CompleteDate,\r\n                        ids.TotalTests = r.TotalTests\r\n                    FROM @runIds ids\r\n                    INNER LOOP JOIN dbo.tbl_TestRun r\r\n                    ON r.TestRunId = ids.Id\r\n                    WHERE r.PartitionId = @partitionId\r\n                    AND r.DataspaceId = @dataspaceId\r\n                    OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n\r\n                    {0}\r\n                        \r\n                    If (SELECT SUM(TotalTests) from @runIds ) > @maxOrderByCount\r\n                    BEGIN\r\n                        " + TestManagementDynamicSqlBatchStatements._selectTestResultsForBuildOrRelease + "\r\n                        SELECT {1} FROM result\r\n                        WHERE 1 = 1\r\n                              {2}\r\n                        OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                   END; \r\n                   ELSE\r\n                   BEGIN\r\n                          " + TestManagementDynamicSqlBatchStatements._selectTestResultsForBuildOrRelease + "\r\n                          SELECT {1} FROM result\r\n                          WHERE 1 = 1\r\n                                {2}\r\n                                {3}\r\n                          OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                   END;\r\n                END'\r\n\r\n                EXEC sp_executesql @sql, @param, @partitionId = @partitionId, @dataspaceId = @dataspaceId, @buildId = @buildId, @buildUri = @buildUri, @releaseId = @releaseId, @releaseEnvId = @releaseEnvId, @sourceWorkflow = @sourceWorkflow, @maxOrderByCount = @maxOrderByCount";
    internal static string stmt_groupTestResultsBy = "--Calculate duration by start and complete date\r\n                    ;WITH result AS\r\n                    (\r\n                         SELECT res.TestRunId, res.TestResultId, ref.TestPointId, ref.TestCaseId, ref.Priority, ref.AutomatedTestStorage, res.Outcome, ref.Owner AS TestCaseOwner, ISNULL(CONVERT(BIGINT,  TestResult.func_GetDuration(DateStarted, DateCompleted)), 0) AS Duration, run.Title, run.State, run.CompleteDate, run.ReleaseEnvId\r\n                         FROM @runIds run\r\n                         INNER LOOP JOIN TestResult.tbl_TestResult res WITH (FORCESEEK(ixc_TestResult_TestRunId_TestResultId(PartitionId, DataspaceId, TestRunId)))\r\n                         ON res.PartitionId = @partitionId\r\n                            AND res.DataspaceId = @dataspaceId\r\n                            AND res.TestRunId = run.Id\r\n                         INNER LOOP JOIN TestResult.tbl_TestCaseReference ref WITH (FORCESEEK(ixc_TestCaseReference_TestCaseRefId(PartitionId, DataspaceId, TestCaseRefId)))\r\n                         ON ref.PartitionId = @partitionId\r\n                            AND ref.DataspaceId = @dataspaceId\r\n                            AND ref.TestCaseRefId = res.TestCaseRefId \r\n                    )\r\n                    SELECT {0}, COUNT(Outcome) AS ResultCount, ISNULL(SUM(Duration), 0)  AS AggregatedDuration\r\n                    FROM result\r\n                    GROUP BY {0} \r\n                    OPTION (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))";
    internal static string dynprc_QueryAggregatedResultsForBuildByRequirement_UnifyingViews_V2 = "\r\n            SET NOCOUNT ON\r\n\r\n            DECLARE @sql       NVARCHAR(MAX)\r\n            DECLARE @param     NVARCHAR(210)\r\n\r\n            -- Initialize the ProcedureName for error messages.\r\n            DECLARE @procedureName SYSNAME\r\n            SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..' + object_name(@@PROCID)\r\n\r\n            SET @param = '@partitionId INT, @dataspaceId INT, @buildId INT, @buildUri NVARCHAR(256), @releaseId INT, @releaseEnvId INT, @sourceWorkflow NVARCHAR(128)'\r\n\r\n            SET @sql = \r\n                'DECLARE @runIds Table (Id INT NOT NULL, Title NVARCHAR(256), State TINYINT, CompleteDate DATETIME, ReleaseEnvId INT)\r\n                 DECLARE @failingSinceFieldId INT\r\n\r\n                " + TestManagementDynamicSqlBatchStatements._selectRunIdsForBuildOrRelease + "\r\n\r\n                IF EXISTS (SELECT 1 FROM @runIds)\r\n                BEGIN\r\n                    UPDATE ids\r\n                    SET ids.Title = r.Title\r\n                    FROM @runIds ids\r\n                    INNER LOOP JOIN dbo.tbl_TestRun r\r\n                    ON r.TestRunId = ids.Id\r\n                    WHERE r.PartitionId = @partitionId\r\n                    AND r.DataspaceId = @dataspaceId\r\n                    OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n\r\n                    --Calculate duration by start and complete date\r\n                    SELECT {0}, COUNT(Outcome) AS ResultCount, ISNULL(SUM(CONVERT(BIGINT, TestResult.func_GetDuration(DateStarted, DateCompleted))), 0) AS AggregatedDuration\r\n                    FROM @runIds run\r\n                    INNER LOOP JOIN TestResult.tbl_TestResult result                    \r\n                    ON   run.Id = result.TestRunId\r\n                    INNER LOOP JOIN TestResult.tbl_TestCaseReference ref WITH (FORCESEEK(ixc_TestCaseReference_TestCaseRefId(PartitionId, DataspaceId, TestCaseRefId)))\r\n                    ON   ref.PartitionId = result.PartitionId\r\n                         AND ref.DataspaceId = result.DataspaceId\r\n                         AND ref.TestCaseRefId = result.TestCaseRefId\r\n                    LEFT LOOP JOIN TestResult.tbl_TestCaseMetadata testMetadata\r\n                    ON   testMetadata.PartitionId = @partitionId\r\n                         AND testMetadata.DataspaceId = @dataspaceId\r\n                         AND testMetadata.Name = ref.AutomatedTestName\r\n                    LEFT LOOP JOIN TestResult.tbl_RequirementsToTestsMapping requirementMapping\r\n                    ON   testMetadata.PartitionId = requirementMapping.PartitionId\r\n                         AND testMetadata.DataspaceId = requirementMapping.DataspaceId\r\n                         AND testMetadata.TestMetadataId = requirementMapping.TestMetadataId\r\n                         AND requirementMapping.DeletionDate IS NULL\r\n                    WHERE result.PartitionId = @partitionId\r\n                          AND result.DataspaceId = @dataspaceId\r\n                    GROUP BY {0}\r\n                    OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n\r\n                    ;WITH result AS\r\n                    (\r\n                        SELECT  res.TestRunId, \r\n                                res.TestResultId, \r\n                                res.TestCaseRefId,\r\n                                res.CreationDate,                           \r\n                                ref.TestCaseId,\r\n                                ref.ConfigurationId,\r\n                                ref.TestPointId,\r\n                                res.State,\r\n                                res.Outcome,\r\n                                res.ResolutionStateId,\r\n                                res.LastUpdated,\r\n                                res.DateStarted,\r\n                                res.DateCompleted,\r\n                                res.Owner,\r\n                                ref.Priority,\r\n                                ISNULL(TestResult.func_GetDuration(res.DateStarted, res.DateCompleted), 0) AS Duration,\r\n                                ref.TestCaseTitle,\r\n                                ref.TestCaseRevision,\r\n                                ref.Owner AS TestCaseOwner,\r\n                                res.ComputerName,\r\n                                res.AfnStripId,\r\n                                res.ResetCount,\r\n                                res.FailureType,\r\n                                ref.AutomatedTestName,\r\n                                ref.AutomatedTestStorage,\r\n                                ref.AutomatedTestType,\r\n                                NULL AS AutomatedTestTypeId,\r\n                                ref.AutomatedTestId,\r\n                                res.Revision,\r\n                                res.RunBy,\r\n                                res.LastUpdatedBy\r\n                        FROM @runIds run\r\n                        INNER LOOP JOIN TestResult.tbl_TestResult res WITH (FORCESEEK(ixc_TestResult_TestRunId_TestResultId(PartitionId, DataspaceId, TestRunId)))\r\n                        ON res.PartitionId = @partitionId\r\n                            AND res.DataspaceId = @dataspaceId\r\n                            AND res.TestRunId = run.Id\r\n                        INNER LOOP JOIN TestResult.tbl_TestCaseReference ref WITH (FORCESEEK(ixc_TestCaseReference_TestCaseRefId(PartitionId, DataspaceId, TestCaseRefId)))\r\n                        ON ref.PartitionId = res.PartitionId\r\n                            AND ref.DataspaceId = res.DataspaceId\r\n                            AND ref.TestCaseRefId = res.TestCaseRefId\r\n                   )\r\n                    SELECT {1}\r\n                    FROM result                    \r\n                    LEFT JOIN TestResult.tbl_TestCaseMetadata testMetadata\r\n                    ON   testMetadata.PartitionId = @partitionId\r\n                         AND testMetadata.DataspaceId = @dataspaceId\r\n                         AND testMetadata.Name = result.AutomatedTestName\r\n                    LEFT JOIN TestResult.tbl_RequirementsToTestsMapping requirementMapping\r\n                    ON   testMetadata.PartitionId = requirementMapping.PartitionId\r\n                         AND testMetadata.DataspaceId = requirementMapping.DataspaceId\r\n                         AND testMetadata.TestMetadataId = requirementMapping.TestMetadataId\r\n                         AND requirementMapping.DeletionDate IS NULL\r\n                    WHERE 1 = 1\r\n                          {2}\r\n                          {3}\r\n                    OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                END'\r\n\r\n                EXEC sp_executesql @sql, @param, @partitionId = @partitionId, @dataspaceId = @dataspaceId, @buildId = @buildId, @buildUri = @buildUri, @releaseId = @releaseId, @releaseEnvId = @releaseEnvId, @sourceWorkflow = @sourceWorkflow";
    internal static string dynprc_QueryTestResultsByIds_UnifyingViews = "\r\n            SET NOCOUNT ON\r\n\r\n            DECLARE @sql       NVARCHAR(MAX)\r\n            DECLARE @param     NVARCHAR(180)\r\n\r\n            -- Initialize the ProcedureName for error messages.\r\n            DECLARE @procedureName SYSNAME\r\n            SELECT  @procedureName = @@SERVERNAME + '.' + db_name() + '..' + object_name(@@PROCID)\r\n\r\n            SET @param = '@partitionId INT, @dataspaceId INT, @idsTable typ_TestCaseResultIdAndRevTypeTable READONLY, @additionalFields typ_NameTypeTable READONLY, @runIds dbo.typ_Int32Table READONLY'\r\n\r\n            SET @sql =\r\n                'SELECT {0}\r\n                FROM\r\n                (\r\n                    SELECT  res.TestRunId, \r\n                            res.TestResultId, \r\n                            res.CreationDate,\r\n                            res.TestCaseRefId,\r\n                            ref.TestCaseId,\r\n                            ref.ConfigurationId,\r\n                            ref.TestPointId,\r\n                            res.State,\r\n                            res.Outcome,\r\n                            res.ResolutionStateId,\r\n                            res.LastUpdated,\r\n                            res.DateStarted,\r\n                            res.DateCompleted,\r\n                            res.Owner,\r\n                            ref.Priority,\r\n                            CONVERT(BIGINT, 0) AS Duration,   -- Duration will be calculated on server by start and complete date for this dync sproc.\r\n                            ref.TestCaseTitle,\r\n                            ref.TestCaseRevision,\r\n                            ref.Owner AS TestCaseOwner,\r\n                            res.ComputerName,\r\n                            res.AfnStripId,\r\n                            res.ResetCount,\r\n                            res.FailureType,\r\n                            ref.AutomatedTestName,\r\n                            ref.AutomatedTestStorage,\r\n                            ref.AutomatedTestType,\r\n                            NULL AS AutomatedTestTypeId,\r\n                            ref.AutomatedTestId,\r\n                            res.Revision,\r\n                            res.RunBy,\r\n                            res.LastUpdatedBy,\r\n                            NULL AS Comment,\r\n                            NULL AS ErrorMessage\r\n                    FROM @idsTable id\r\n                    INNER LOOP JOIN TestResult.tbl_TestResult res WITH (FORCESEEK(ixc_TestResult_TestRunId_TestResultId(PartitionId, DataspaceId, TestRunId)))\r\n                    ON res.PartitionId = @partitionId\r\n                        AND res.DataspaceId = @dataspaceId\r\n                        AND res.TestRunId = id.TestRunId\r\n                        AND res.TestResultId = id.TestResultId\r\n                    INNER LOOP JOIN TestResult.tbl_TestCaseReference ref WITH (FORCESEEK(ixc_TestCaseReference_TestCaseRefId(PartitionId, DataspaceId, TestCaseRefId)))\r\n                    ON ref.PartitionId = res.PartitionId\r\n                        AND ref.DataspaceId = res.DataspaceId\r\n                        AND ref.TestCaseRefId = res.TestCaseRefId\r\n                ) result\r\n                OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n\r\n                IF({1})\r\n                BEGIN\r\n                    SELECT trx.TestRunId,\r\n                           trx.TestResultId,\r\n                           tex.FieldName,\r\n                           trx.FieldId,\r\n                           trx.IntValue,\r\n                           trx.FloatValue,\r\n                           trx.BitValue,\r\n                           trx.DateTimeValue,\r\n                           trx.GuidValue,\r\n                           trx.StringValue\r\n                    FROM @idsTable id\r\n                    INNER LOOP JOIN TestResult.tbl_TestResultEx trx WITH (FORCESEEK(ixc_TestResultEx_TestRunId_TestResultId_FieldId(PartitionId, DataspaceId, TestRunId ,TestResultId)))\r\n                    ON   trx.TestRunId = id.TestRunId\r\n                         AND trx.TestResultId = id.TestResultId\r\n                    INNER LOOP JOIN tbl_TestFieldsEx tex\r\n                    ON   tex.PartitionId = trx.PartitionId\r\n                         AND tex.DataspaceId = trx.DataspaceId\r\n                         AND tex.FieldId = trx.FieldId\r\n                    WHERE trx.PartitionId = @partitionId\r\n                          AND trx.DataspaceId = @dataspaceId\r\n                          AND tex.FieldName IN (SELECT Name FROM @additionalFields)\r\n                    OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                END \r\n                \r\n                IF({2})\r\n                BEGIN\r\n                    SELECT          run.TestRunId AS RunId, \r\n                                    bc.BuildId,\r\n                                    bc.BuildDefinitionId\r\n                    FROM @runIds AS id\r\n                    INNER LOOP JOIN dbo.tbl_TestRun AS run\r\n                    ON              run.PartitionId = @partitionId\r\n                                    AND run.DataspaceId = @dataspaceId\r\n                                    AND run.TestRunId = id.Val\r\n                    INNER LOOP JOIN dbo.tbl_TestRunContext AS trc\r\n                    ON              run.PartitionId = trc.PartitionId\r\n                                    AND run.DataspaceId = trc.DataspaceId\r\n                                    AND run.TestRunContextId = trc.TestRunContextId\r\n                    INNER LOOP JOIN dbo.tbl_BuildConfiguration as bc                    \r\n                    ON              trc.PartitionId = bc.PartitionId\r\n                                    AND trc.DataspaceId = bc.DataspaceId\r\n                                    AND trc.BuildRefId = bc.BuildConfigurationId\r\n                    OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                END\r\n\r\n                IF({3})\r\n                BEGIN\r\n                    SELECT          run.TestRunId AS RunId,\r\n                                    rr.ReleaseId,\r\n                                    rr.ReleaseEnvId,\r\n                                    rr.ReleaseDefId,\r\n                                    rr.ReleaseEnvDefId\r\n                    FROM @runIds AS id\r\n                    INNER LOOP JOIN dbo.tbl_TestRun AS run\r\n                    ON              run.PartitionId = @partitionId\r\n                                    AND run.DataspaceId = @dataspaceId\r\n                                    AND run.TestRunId = id.Val\r\n                    INNER LOOP JOIN dbo.tbl_TestRunContext AS trc\r\n                    ON              run.PartitionId = trc.PartitionId\r\n                                    AND run.DataspaceId = trc.DataspaceId\r\n                                    AND run.TestRunContextId = trc.TestRunContextId\r\n                    INNER LOOP JOIN dbo.tbl_ReleaseRef as rr               \r\n                    ON              trc.PartitionId = rr.PartitionId\r\n                                    AND trc.DataspaceId = rr.DataspaceId\r\n                                    AND trc.ReleaseRefId = rr.ReleaseRefId\r\n                    OPTION  (OPTIMIZE FOR (@partitionId UNKNOWN, @dataspaceId UNKNOWN))\r\n                END\r\n                '\r\n\r\n                EXEC sp_executesql @sql, @param, @partitionId = @partitionId, @dataspaceId = @dataspaceId, @idsTable = @idsTable, @additionalFields = @additionalFields, @runIds = @runIds";
  }
}
