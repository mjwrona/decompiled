<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MachineRequestOutcome" xml:space="preserve">
    <value>The request status is '{0}'</value>
  </data>
  <data name="MachinePoolTypeDeleteException" xml:space="preserve">
    <value>Cannot delete active pool type {0}</value>
  </data>
  <data name="MachinePoolNotFoundException" xml:space="preserve">
    <value>The machine pool {0} was not found.</value>
  </data>
  <data name="MachineRequestTagNotFoundException" xml:space="preserve">
    <value>The machine request tag {1} for type {0} does not exist.</value>
  </data>
  <data name="MachineOSImageDoesNotExistException" xml:space="preserve">
    <value>The image {0} does not exist in pool type {1}.</value>
  </data>
  <data name="NoPoolsFoundToRouteImageLabel" xml:space="preserve">
    <value>No pools found to route image label {0}.</value>
  </data>
  <data name="MachineRequestResourceDoesNotExistException" xml:space="preserve">
    <value>The machine request resource {0} {1} was not found.</value>
  </data>
  <data name="UpdateMachineInstanceAccessDeniedException" xml:space="preserve">
    <value>User does not have access to Update a Machine Instance</value>
  </data>
  <data name="FailedToProvisionResources" xml:space="preserve">
    <value>An error occurred while provisioning resources (Error Type: {0}).</value>
  </data>
  <data name="ServiceDefinitionDoesNotExist" xml:space="preserve">
    <value>The service definition with service type '{0}' and identifier '{1}' does not exist.</value>
  </data>
  <data name="ImageLabelExistsException" xml:space="preserve">
    <value>An image label with the label {0} already exists.</value>
  </data>
  <data name="MachineImageExistsException" xml:space="preserve">
    <value>The image {0}_{1} already exists.</value>
  </data>
  <data name="MachineInstanceExistsException" xml:space="preserve">
    <value>The machine {0} already exists for pool {1}.</value>
  </data>
  <data name="MachinePoolAliasExistsException" xml:space="preserve">
    <value>The machine pool {0}/{1} is already redirected to {2}/{3}</value>
  </data>
  <data name="MachineRequestInProgressException" xml:space="preserve">
    <value>The machine request {2} is currently in progress on computer {1} in pool {0}.</value>
  </data>
  <data name="MachineRequestAlreadyStartedException" xml:space="preserve">
    <value>The machine request {1} for pool {0} cannot be started because it has already started.</value>
  </data>
  <data name="VirtualMachineDiskAlreadyExistsException" xml:space="preserve">
    <value>A virtual machine disk named {0} already exists.</value>
  </data>
  <data name="RegisterMachineAccessDeniedException" xml:space="preserve">
    <value>Authenticated Identity does not have access to Get Registration Info or Register a Machine Instance.</value>
  </data>
  <data name="ImageLabelDoesNotExistException" xml:space="preserve">
    <value>An image label with the label {0} does not exist.</value>
  </data>
  <data name="MachineRequestQueuePositionMessage" xml:space="preserve">
    <value>Waiting for a job.</value>
  </data>
  <data name="ResourceGroupAlreadyExistsException" xml:space="preserve">
    <value>A resource group already exists with identifier {0}</value>
  </data>
  <data name="ManagePoolResourcesAccessDeniedException" xml:space="preserve">
    <value>User does not have access to Manage Pool Resources</value>
  </data>
  <data name="MachineRequestTypeNotFoundException" xml:space="preserve">
    <value>The machine request type {0} was not found.</value>
  </data>
  <data name="MachinePoolTypeDoesNotExistException" xml:space="preserve">
    <value>A machine pool type with name {0} does not exist.</value>
  </data>
  <data name="MachineImageNotFoundException" xml:space="preserve">
    <value>The image {0} was not found.</value>
  </data>
  <data name="TrustedHostShutDownException" xml:space="preserve">
    <value>Trusted host {0} can only be shutdown with a Force option.</value>
  </data>
  <data name="DefaultImageAlreadyExistsException" xml:space="preserve">
    <value>Friendly image name '{0}' is already set as default. Use commandlet Set-DefaultImage to set a new friendly name as default.</value>
  </data>
  <data name="MultipleAliasesExistForSameMachinePoolException" xml:space="preserve">
    <value>The machine pool {0}/{1} is set to redirect to more than one pools.</value>
  </data>
  <data name="MachineRequestDoesNotExistException" xml:space="preserve">
    <value>The machine request {1} does not exist for pool {0}.</value>
  </data>
  <data name="NoDefaultImageExistsException" xml:space="preserve">
    <value>A default image name hasn't been defined. Create a default image and try again.</value>
  </data>
  <data name="CannotDeleteAndAddMetadataException" xml:space="preserve">
    <value>Cannot simultaneously remove metadata while passing in new metadata for an Image Label Update.</value>
  </data>
  <data name="StorageAccountNotFoundException" xml:space="preserve">
    <value>A storage account with the name {0} was not found.</value>
  </data>
  <data name="AgentSpecAlreadyExists" xml:space="preserve">
    <value>Agent spec {0} already exists.</value>
  </data>
  <data name="TooManyRequestsException" xml:space="preserve">
    <value>Too many requests queued for host {0}. Try again later.</value>
  </data>
  <data name="ImageWithGivenNameDoesNotExistException" xml:space="preserve">
    <value>The friendly image name '{0}' does not exist.</value>
  </data>
  <data name="MachineOSImageExistsException" xml:space="preserve">
    <value>The image {0} already exists in pool type {1}.</value>
  </data>
  <data name="MachinePoolTypeExistsException" xml:space="preserve">
    <value>A machine pool type already exists with name {0}.</value>
  </data>
  <data name="ImageLabelEmptyException" xml:space="preserve">
    <value>No valid image label found in agent specification.</value>
  </data>
  <data name="ProcessRequestAccessDeniedException" xml:space="preserve">
    <value>Authenticated Identity does not have access to Process Machine Requests</value>
  </data>
  <data name="MachinePoolExistsException" xml:space="preserve">
    <value>The machine pool {0} already exists.</value>
  </data>
  <data name="AgentSpecDoesNotExist" xml:space="preserve">
    <value>Agent spec {0} does not exist.</value>
  </data>
  <data name="MachineImageDeleteException" xml:space="preserve">
    <value>Cannot delete active machine os image {0}.</value>
  </data>
  <data name="StorageAccountAlreadyExistsException" xml:space="preserve">
    <value>A storage account with the name {0} already exists.</value>
  </data>
  <data name="FinishArbitraryRequestAccessDeniedException" xml:space="preserve">
    <value>Authenticated Identity does not have access to Finish Arbitrary Machine Requests</value>
  </data>
  <data name="MachineRequestQueuePositionUnavailable" xml:space="preserve">
    <value>Request queue position information is unavailable.</value>
  </data>
  <data name="NoSupportedImageLabelsFoundForNestedPoolException" xml:space="preserve">
    <value>No supported image labels found for nested pool {0}.</value>
  </data>
  <data name="ResourceGroupNotFoundException" xml:space="preserve">
    <value>A resource group was not found with identifier {0}</value>
  </data>
  <data name="MustAddBothCurrentAndPreviousImageVersionException" xml:space="preserve">
    <value>Image Labels must contain both a Current Image Version and a Previous Image Version, or neither.</value>
  </data>
  <data name="MachineOSImageDeleteException" xml:space="preserve">
    <value>Cannot delete active machine os image {0} from pool type {1}.</value>
  </data>
  <data name="MachineRequestAlreadyFinishedException" xml:space="preserve">
    <value>The machine request {1} for pool {0} cannot be started because it has already finished.</value>
  </data>
  <data name="ImageNameAlreadyExistsException" xml:space="preserve">
    <value>The friendly image name '{0}' already exists. </value>
  </data>
  <data name="MachinePoolDeleteException" xml:space="preserve">
    <value>The machine pool {0} cannot be deleted because it is currently managing machine instances. Delete the remaining machine instances and try the operation again.</value>
  </data>
  <data name="MachineInstanceNotFoundException" xml:space="preserve">
    <value>The machine {0} was not found for pool {1}.</value>
  </data>
  <data name="QueueMachineRequestAccessDeniedException" xml:space="preserve">
    <value>User does not have access to Queue a Machine Request</value>
  </data>
  <data name="FinishRequestAccessDeniedException" xml:space="preserve">
    <value>Authenticated Identity does not have access to Finish Machine Requests</value>
  </data>
  <data name="MessageIdAlreadyExistsException" xml:space="preserve">
    <value>A Resource Provider Message with Id {0} already exists</value>
  </data>
</root>