<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IncorrectParameterTypeExceptionFormat" xml:space="preserve">
    <value>The method's parameter should be an object of type {0}, but is {1} or null.</value>
  </data>
  <data name="Response_Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Error_SubscriptionInputValueTooBigFormat" xml:space="preserve">
    <value>Subscription input '{0}' has a value of {1} that is greater than the allowed maximum {2}.</value>
  </data>
  <data name="Error_SubscriptionInputPatternMismatchFormat" xml:space="preserve">
    <value>The value of subscription input '{0}' does not match the required pattern '{1}'.</value>
  </data>
  <data name="HttpActionTask_HeaderKeyValueTemplate" xml:space="preserve">
    <value>  {0}: {1}{2}</value>
  </data>
  <data name="HttpActionTask_ReasonPhraseTemplate" xml:space="preserve">
    <value>Reason Phrase: {0}{1}</value>
  </data>
  <data name="Response_OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Error_ConsumerNotFoundByIdFormat" xml:space="preserve">
    <value>No consumer could be found with id "{0}".</value>
  </data>
  <data name="HttpActionTask_ContentTemplate" xml:space="preserve">
    <value>Content:{0}{1}{0}</value>
  </data>
  <data name="Error_NoPublishers" xml:space="preserve">
    <value>No publishers are defined in this endpoint.</value>
  </data>
  <data name="Response_ErrorNoResponse" xml:space="preserve">
    <value>There was an error sending the request, so there was no response.  
Error(s):
{0}</value>
  </data>
  <data name="Error_SubscriptionInputScopeUnsupportedFormat" xml:space="preserve">
    <value>Subscription input '{0}' is not supported at scope '{1}'.</value>
  </data>
  <data name="Error_SubscriptionInputValueTooSmallFormat" xml:space="preserve">
    <value>Subscription input '{0}' has a value of {1} that is less than the allowed minimum {2}.</value>
  </data>
  <data name="HttpActionTask_MethodTemplate" xml:space="preserve">
    <value>Method: {0}{1}</value>
  </data>
  <data name="Error_SubscriptionInputDataTypeMismatchFormat" xml:space="preserve">
    <value>Subscription input '{0}' does not match the required data type '{1}'.</value>
  </data>
  <data name="Error_PublisherNotFoundByIdFormat" xml:space="preserve">
    <value>No publisher could be found with id "{0}".</value>
  </data>
  <data name="HttpActionTask_HttpVersionTemplate" xml:space="preserve">
    <value>HTTP Version: {0}{1}</value>
  </data>
  <data name="Error_SubscriptionInputInvalidLengthFormat" xml:space="preserve">
    <value>Subscription input '{0}' has a length of {1} but must be between {2} and {3}.</value>
  </data>
  <data name="Error_NotificationNotFoundByIdFormat" xml:space="preserve">
    <value>Could not find notification with id "{0}".</value>
  </data>
  <data name="Error_NoSubscriptionWithId" xml:space="preserve">
    <value>No subscription could be found with id {0}.</value>
  </data>
  <data name="Response_OnPremFirewall" xml:space="preserve">
    <value>Be sure there are no firewall rules blocking requests going out to the endpoint selected.</value>
  </data>
  <data name="Error_SubscriptionInputOutOfRangeFormat" xml:space="preserve">
    <value>Subscription input '{0}' has a value of {1} but must be between {2} and {3}.</value>
  </data>
  <data name="HttpActionTask_HeadersStartTemplate" xml:space="preserve">
    <value>Headers:{0}{{{0}</value>
  </data>
  <data name="Error_PublisherIdNotSpecified" xml:space="preserve">
    <value>Multiple publishers are defined in this endpoint. You must specify the publisherId of the desired Service Hooks publisher.</value>
  </data>
  <data name="Error_SubscriptionInputInvalidLengthTooBigFormat" xml:space="preserve">
    <value>Subscription input '{0}' has a length of {1} that is greater than the allowed maximum {2}.</value>
  </data>
  <data name="Error_ConsumerActionNotFoundByIdFormat" xml:space="preserve">
    <value>No consumer action could be found with id "{0}" for consumer "{1}".</value>
  </data>
  <data name="Error_SubscriptionScopeChangeNotAllowed" xml:space="preserve">
    <value>Subscriptions are not allowed to change their scope; subscription id '{0}' attempted to do this.</value>
  </data>
  <data name="Error_SubscriptionInputLoopbackUrl" xml:space="preserve">
    <value>Loopback Urls are not allowed.</value>
  </data>
  <data name="Error_PublisherEventTypeNotFoundByIdFormat" xml:space="preserve">
    <value>No publisher event type could be found with id "{0}" for publisher "{1}".</value>
  </data>
  <data name="Error_SubscriptionInputInvalidLengthTooSmallFormat" xml:space="preserve">
    <value>Subscription input '{0}' has a length of {1} that is less than the allowed minimum {2}.</value>
  </data>
  <data name="Error_ConsumerNotAvailableByIdFormat" xml:space="preserve">
    <value>The consumer with id "{0}" is not available.</value>
  </data>
  <data name="HttpActionTask_StatusCodeTemplate" xml:space="preserve">
    <value>Status Code: {0}{1}</value>
  </data>
  <data name="HttpActionTask_UriTemplate" xml:space="preserve">
    <value>URI: {0}{1}</value>
  </data>
  <data name="HttpActionTask_HeadersEndTemplate" xml:space="preserve">
    <value>}}{0}</value>
  </data>
  <data name="Error_MissingRequiredSubscriptionInputFormat" xml:space="preserve">
    <value>The subscription is missing required input '{0}'.</value>
  </data>
</root>