<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HistoryGridQueueTime" xml:space="preserve">
    <value>Queue Time</value>
  </data>
  <data name="HistoryGridRunTime" xml:space="preserve">
    <value>Run Time</value>
  </data>
  <data name="HistoryGridStartTime" xml:space="preserve">
    <value>Start Time</value>
  </data>
  <data name="DialogHistoryPriority" xml:space="preserve">
    <value>Priority:</value>
  </data>
  <data name="DialogHistoryResultMessage" xml:space="preserve">
    <value>Result Message:</value>
  </data>
  <data name="TitleJobHistoryDetails" xml:space="preserve">
    <value>Job History Details</value>
  </data>
  <data name="ClientSideDetailsHeader" xml:space="preserve">
    <value>Job Queue Details</value>
  </data>
  <data name="DialogHistoryHostId" xml:space="preserve">
    <value>Host Id:</value>
  </data>
  <data name="QueueGridHostName" xml:space="preserve">
    <value>Host Name</value>
  </data>
  <data name="HistoryGridTimeInQueue" xml:space="preserve">
    <value>Time in Queue</value>
  </data>
  <data name="DialogHistoryQueuedReasons" xml:space="preserve">
    <value>Queued Reasons:</value>
  </data>
  <data name="DialogDefinitionEnabledState" xml:space="preserve">
    <value>Enabled State:</value>
  </data>
  <data name="ClientSideJobQueuePositionDescription" xml:space="preserve">
    <value>The chart below describes the job queue; it provides the counts for each queue type.  The possible values are: InProgress, Queue, Scheduled, HostOffline, HostDormant.</value>
  </data>
  <data name="HistoryGridJobId" xml:space="preserve">
    <value>Job Id</value>
  </data>
  <data name="HistoryGridEndTime" xml:space="preserve">
    <value>End Time</value>
  </data>
  <data name="ClientSideHistoryResultsHeader" xml:space="preserve">
    <value>Job History Results For The Time Period</value>
  </data>
  <data name="DialogHistoryResult" xml:space="preserve">
    <value>Result:</value>
  </data>
  <data name="QueueGridPriority" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="ContextMenuViewHistory" xml:space="preserve">
    <value>View history</value>
  </data>
  <data name="JobHistory" xml:space="preserve">
    <value>JobHistory</value>
  </data>
  <data name="DialogDefinitionJobName" xml:space="preserve">
    <value>Job Name:</value>
  </data>
  <data name="DialogDefinitionJobData" xml:space="preserve">
    <value>Job Data:</value>
  </data>
  <data name="ClientSideRunTimeDescription" xml:space="preserve">
    <value>The chart below displays total amount of run time this particular job has taken over the time period.  Click on any of the bars in the chart to get the list of jobs contributing to the total.  Tip: Hover over the bars in the chart to get the number of jobs which ran to calculate the total run time.</value>
  </data>
  <data name="JobName" xml:space="preserve">
    <value>Job Name:</value>
  </data>
  <data name="JobHistoryForJob" xml:space="preserve">
    <value>Job History for Job:</value>
  </data>
  <data name="HistoryGridJobName" xml:space="preserve">
    <value>Job Name</value>
  </data>
  <data name="DialogHistoryQueueTime" xml:space="preserve">
    <value>Queue Time:</value>
  </data>
  <data name="DialogHistoryStartTime" xml:space="preserve">
    <value>Start Time:</value>
  </data>
  <data name="DialogDefinitionPriorityClass" xml:space="preserve">
    <value>Priority Class:</value>
  </data>
  <data name="HistoryGridPriority" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="ContextMenuViewDefinition" xml:space="preserve">
    <value>View definition</value>
  </data>
  <data name="HistoryGridResult" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="HistoryGridHostName" xml:space="preserve">
    <value>Host Name</value>
  </data>
  <data name="DialogHistoryHost" xml:space="preserve">
    <value>Host:</value>
  </data>
  <data name="ClientSideResultTypesHeader" xml:space="preserve">
    <value>Result Counts</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="ClientSideAvgRunQueueTimeHeader" xml:space="preserve">
    <value>Average Run and Queue Time With Total Number of Jobs</value>
  </data>
  <data name="HistoryGridJobSource" xml:space="preserve">
    <value>Job Source</value>
  </data>
  <data name="DialogDefinitionExtension" xml:space="preserve">
    <value>Extension:</value>
  </data>
  <data name="DialogDefinitionTitle" xml:space="preserve">
    <value>Title:</value>
  </data>
  <data name="DialogDefinitionJobId" xml:space="preserve">
    <value>Job Id:</value>
  </data>
  <data name="TitleJobDefinitionDetails" xml:space="preserve">
    <value>Job Definition Details</value>
  </data>
  <data name="ClientSideDetailsDescription" xml:space="preserve">
    <value>Below is the list of job queue entries for the specific type.</value>
  </data>
  <data name="ClientSideNumberOfResultsHeader" xml:space="preserve">
    <value>Number Of Jobs Run</value>
  </data>
  <data name="DialogHistoryRunDuration" xml:space="preserve">
    <value>Run Duration:</value>
  </data>
  <data name="HistoryGridHistoryId" xml:space="preserve">
    <value>History Id</value>
  </data>
  <data name="TabTitleJobHistory" xml:space="preserve">
    <value>Job History</value>
  </data>
  <data name="ClientSideAvgRunQueueTimeDescription" xml:space="preserve">
    <value>The chart below combines the average queue time and run time for jobs; you can also view how many jobs were run at each hour.</value>
  </data>
  <data name="DialogHistoryEndTime" xml:space="preserve">
    <value>End Time:</value>
  </data>
  <data name="DialogCloseButtonText" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="DialogHistoryJobId" xml:space="preserve">
    <value>Job Id:</value>
  </data>
  <data name="DialogHistoryAgent" xml:space="preserve">
    <value>Agent:</value>
  </data>
  <data name="DialogHistoryTitle" xml:space="preserve">
    <value>Title:</value>
  </data>
  <data name="ClientSideNumberOfResultsDescription" xml:space="preserve">
    <value>The chart below displays the number of times a job has run combined with the number of result types for that particular job.  Click on any of the bars in the chart to display details on those jobs.  Tip:  Hover over each result type for additional information.</value>
  </data>
  <data name="ClientSideResultTypesDescription" xml:space="preserve">
    <value>The chart below displays the number of different result types over the time period.  Click on any of the result types to display those result history entries (the most recent 100 will be displayed).  Tip:  Hover over each result to get additional information.</value>
  </data>
  <data name="QueueGridJobName" xml:space="preserve">
    <value>Job Name</value>
  </data>
  <data name="ClientSideJobQueuePositionHeader" xml:space="preserve">
    <value>Job Queue Types</value>
  </data>
  <data name="Filters" xml:space="preserve">
    <value>Filters:</value>
  </data>
  <data name="QueueGridQueueDuration" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="DialogHistoryAgentId" xml:space="preserve">
    <value>Agent Id:</value>
  </data>
  <data name="DialogHistoryJobName" xml:space="preserve">
    <value>Job Name:</value>
  </data>
  <data name="ClientSideRunTimeHeader" xml:space="preserve">
    <value>Total Run Time For Each Job</value>
  </data>
  <data name="DialogHistoryQueueDuration" xml:space="preserve">
    <value>Queue Duration:</value>
  </data>
  <data name="ResultType" xml:space="preserve">
    <value>Result Type:</value>
  </data>
  <data name="JobGridDescription" xml:space="preserve">
    <value>The grid below shows the job history results over the stated period of time (up to 500 entries).  Below is the list of filters which may be limiting the data which is returned.  By default, the successful jobs ARE NOT shown to minimize distractions when reviewing the results.</value>
  </data>
  <data name="NoJobResultsToDisplay" xml:space="preserve">
    <value>There are not job results which fall within the given timeframe with the filters provided - if any.</value>
  </data>
</root>