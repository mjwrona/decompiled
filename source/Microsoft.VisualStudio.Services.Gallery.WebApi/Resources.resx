<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UseOfResistrictedPart" xml:space="preserve">
    <value>The package part named '{0}' is reserved and can't be supplied by the caller.</value>
  </data>
  <data name="PublicExtensionCantBeShared" xml:space="preserve">
    <value>Public extensions can't be shared.</value>
  </data>
  <data name="ExtensionAlreadyExists" xml:space="preserve">
    <value>The extension already exists.</value>
  </data>
  <data name="ReviewAlreadyExistsException" xml:space="preserve">
    <value>You have already submitted a review for this extension.</value>
  </data>
  <data name="ReviewProductVersionMismatch" xml:space="preserve">
    <value>The Review product version {0} does not match with latest extension version {1}.</value>
  </data>
  <data name="InvalidPackageStream" xml:space="preserve">
    <value>Failed to open extension package.</value>
  </data>
  <data name="ExtensionVersionNotFound" xml:space="preserve">
    <value>The extension '{0}' doesn't contain the requested version '{1}'.</value>
  </data>
  <data name="CharacterLimitExceeded" xml:space="preserve">
    <value>The character limit was exceeded for the parameter '{0}'. Maximum character limit is {1}.</value>
  </data>
  <data name="ExtensionAssetNotFound" xml:space="preserve">
    <value>The extension '{0}' doesn't contain the requested asset type '{2}' in version '{1}'.</value>
  </data>
  <data name="InvalidPublisherName" xml:space="preserve">
    <value>The publisher name '{0}' is invalid. Publisher names may only contain 'A' through 'Z', 'a' through 'z', '0' through '9' and '-'. The publisher name must start with an alphabetic or numeric character.</value>
  </data>
  <data name="InvalidCategoryName" xml:space="preserve">
    <value>The category name '{0}' is invalid. Category names may only contain 'A' through 'Z', 'a' through 'z', '0' through '9', '.' and '-', space, '&amp;'. The category name must start with an alphabetic or numeric character and should contain less or equal to 63 characters</value>
  </data>
  <data name="PublisherDomainDoesNotExist" xml:space="preserve">
    <value>The requested Publisher doesn't have any domain associated with it.</value>
  </data>
  <data name="ExtensionDoesNotExist" xml:space="preserve">
    <value>The requested extension '{0}' doesn't exist.</value>
  </data>
  <data name="MustSupplyQueryValues" xml:space="preserve">
    <value>When executing a '{0}' query type, one or more values must be supplied.</value>
  </data>
  <data name="KeyLengthMustBeDivisibleByEight" xml:space="preserve">
    <value>The keyLength '{0}' is not valid, it must be divisible by 8.</value>
  </data>
  <data name="InvalidExtensionIdentifier" xml:space="preserve">
    <value>The string '{0}' is not a valid extension identifer. A valid extension identifier is made up of a {{publisherName}}.{{extensionName}}.</value>
  </data>
  <data name="NoAuthorizationToResource" xml:space="preserve">
    <value>The user '{0}' is not authorized to access this resource.</value>
  </data>
  <data name="ExtensionSizeExceeded" xml:space="preserve">
    <value>The extension package size '{0} bytes' exceeds the maximum package size '{1} bytes'</value>
  </data>
  <data name="ExtensionInfoDoesNotExist" xml:space="preserve">
    <value>Extension info doesn't exist in asset details.</value>
  </data>
  <data name="TokenNotFoundInDnsTxtRecords" xml:space="preserve">
    <value>Verification token not found in DNS TXT record</value>
  </data>
  <data name="PublisherDoesNotExist" xml:space="preserve">
    <value>The requested publisher doesn't exist.</value>
  </data>
  <data name="MissingContributionJson" xml:space="preserve">
    <value>No valid Contribution was found.</value>
  </data>
  <data name="InvalidAssetType" xml:space="preserve">
    <value>The asset type '{0}' is invalid. Asset types may only contain 'A' through 'Z', 'a' through 'z', '0' through '9', '.', '@' and '-'. The asset type can't have more than one consecutive '.'.</value>
  </data>
  <data name="DeprecatedExtensionCantBeUndeprecated" xml:space="preserve">
    <value>An extension that was deprecated can't be undeprecated</value>
  </data>
  <data name="QnAItemDoesNotExistException" xml:space="preserve">
    <value>No question or answer with id {0} exists for this product.</value>
  </data>
  <data name="InvalidPackageManifest" xml:space="preserve">
    <value>The package manifest is not valid. {0}</value>
  </data>
  <data name="ExtensionNoVersionFound" xml:space="preserve">
    <value>No version information found for extension '{0}'.</value>
  </data>
  <data name="InvalidPublisherDisplayName" xml:space="preserve">
    <value>The publisher display name '{0}' is invalid. Publisher display names should not contain following chars ';', '[', ']', '@', '|', '"', '%', '\', '/', ',', '&gt;'.</value>
  </data>
  <data name="DnsTokenNotVerified" xml:space="preserve">
    <value>The Publisher's domain is not verified using DNS TXT record</value>
  </data>
  <data name="InvalidProductVersion" xml:space="preserve">
    <value>Invalid version number: {0}</value>
  </data>
  <data name="TheSignatureMustMatchTheElements" xml:space="preserve">
    <value>The signature within the token must match the signature given in the token.</value>
  </data>
  <data name="ReviewAlreadyReportedException" xml:space="preserve">
    <value>You have already reported this review.</value>
  </data>
  <data name="InvalidPrivateTokenFormat" xml:space="preserve">
    <value>The token supplied to the private extension filter isn't valid.</value>
  </data>
  <data name="AzurePublisherExistsException" xml:space="preserve">
    <value>The azure publisher with publisher name {0} and azure publisher id {1} already exists.</value>
  </data>
  <data name="InvalidExtensionName" xml:space="preserve">
    <value>The extension ID '{0}' is invalid. Extension ID must be less than 63 characters and can only contain 'A' through 'Z', 'a' through 'z', '0' through '9', and '-'. It must start with an alphanumeric character.</value>
  </data>
  <data name="VerifiedPublisherRequired" xml:space="preserve">
    <value>Publishing public Azure DevOps Services extension requires verification. Publisher '{0}' is not verified. Visit {1} to learn more. </value>
  </data>
  <data name="PrivateTokenHasExpired" xml:space="preserve">
    <value>The token supplied has expired, a refreshed token is required.</value>
  </data>
  <data name="InvalidTag" xml:space="preserve">
    <value>The supplied tag '{0}' is not a valid tag. It must not be empty or start with a special character (!,@,#,$,%,^,&amp;,*).</value>
  </data>
  <data name="QnAItemAlreadyReportedException" xml:space="preserve">
    <value>You have already reported this question.</value>
  </data>
  <data name="UnsupportedTokenFormat" xml:space="preserve">
    <value>The token format MUST be of type JWT and signing algorithm HS256.</value>
  </data>
  <data name="SignedTokensMustHaveClaims" xml:space="preserve">
    <value>Generating an empty token isn't valid. All tokens must have at least one claim.</value>
  </data>
  <data name="MissingPackageManifest" xml:space="preserve">
    <value>No valid PackageManifest was found.</value>
  </data>
  <data name="ThereMustBeElementsAndSignature" xml:space="preserve">
    <value>The token must have all component elements and a valid signature.</value>
  </data>
  <data name="InvalidElementFormat" xml:space="preserve">
    <value>Elements must be made up of &lt;name&gt;=&lt;value&gt; and no extra equals may be in the name or value.</value>
  </data>
  <data name="InvalidSignedToken" xml:space="preserve">
    <value>The token supplied isn't a valid signed token. Reason: {0}</value>
  </data>
  <data name="InvalidPackageFormat" xml:space="preserve">
    <value>The package file supplied is not a valid format. The reason for the failure was: '{0}'.</value>
  </data>
  <data name="InvalidElementForToken" xml:space="preserve">
    <value>Signed tokens can't have the element '{0}' supplied. It is a restricted element for internal use only.</value>
  </data>
  <data name="InvalidTokenDate" xml:space="preserve">
    <value>The value supplied for the date '{0}' is an invalid value for JWTWebTokens.</value>
  </data>
  <data name="InvalidExtensionVersion" xml:space="preserve">
    <value>The version string '{0}' doesn't conform to the requirements for a version. It must be one to four numbers in the range 0 to 2147483647, with each number seperated by a period. It must contain at least one non-zero number.</value>
  </data>
  <data name="ReviewDoesNotExistException" xml:space="preserve">
    <value>The review with id {0} does not exist for this product</value>
  </data>
  <data name="PublisherAlreadyExists" xml:space="preserve">
    <value>This publisher ID is taken. Try a different one.</value>
  </data>
  <data name="AccountSpecifiedIsInvalid" xml:space="preserve">
    <value>The organization information specified in the private query isn't valid.</value>
  </data>
</root>