<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentError_TokenizerCodePagesMustMatch" xml:space="preserve">
    <value>The code pages for the passed in token parsing streams must be identical.</value>
  </data>
  <data name="InvalidDiffOperation" xml:space="preserve">
    <value>Invalid diff operation encountered: {0}</value>
  </data>
  <data name="VssDiffChangeTo" xml:space="preserve">
    <value>        To: </value>
  </data>
  <data name="UnexpectedEndOfStream" xml:space="preserve">
    <value>TF10010: Source control unexpectedly encountered the end of the stream: {0}</value>
  </data>
  <data name="InvalidCodePage" xml:space="preserve">
    <value>TF10009: The code page you specified is either not recognized or not installed: {0}</value>
  </data>
  <data name="IncompleteSurrogatePair" xml:space="preserve">
    <value>The surrogate pair was incomplete at stream offset {0:d}.</value>
  </data>
  <data name="CouldNotRereadEntireToken" xml:space="preserve">
    <value>The code could not reread a token from the stream that it had previously read successfully.</value>
  </data>
  <data name="WriteOnceProperty" xml:space="preserve">
    <value>TF10011: The {0} property cannot be changed after it is set.</value>
  </data>
  <data name="ArgOutOfRange" xml:space="preserve">
    <value>The argument was out of range.</value>
  </data>
  <data name="InternalCodeError" xml:space="preserve">
    <value>TF10008: Source control encountered an unexpected error. Contact Microsoft Product Support Services.</value>
  </data>
  <data name="VssDiffInsert" xml:space="preserve">
    <value>{0,3}    Insert: </value>
  </data>
  <data name="VssDiffDelete" xml:space="preserve">
    <value>{0,3}    Delete: </value>
  </data>
  <data name="ReversedSurrogatePair" xml:space="preserve">
    <value>A low surrogate was detected before the high surrogate.</value>
  </data>
  <data name="VssDiffChange" xml:space="preserve">
    <value>{0,3} Change: </value>
  </data>
  <data name="ArgumentError_TokenStreamsMustSeek" xml:space="preserve">
    <value>The token stream '{0}' must return true from .CanSeek.</value>
  </data>
  <data name="ArgumentError_TokenizerTypesMustMatch" xml:space="preserve">
    <value>The types of the tokenizer objects must be identical.</value>
  </data>
  <data name="IncompleteCharacter" xml:space="preserve">
    <value>The character was incomplete at stream offset {0:d}. The file labeled '{1}' might be in a different encoding than {2}, or it might have been corrupted. Verify the encoding settings, and check the file for errors.</value>
  </data>
  <data name="TokenizersMustBeInitialized" xml:space="preserve">
    <value>The tokenizers for this diff object must be set before trying to diff them.</value>
  </data>
</root>