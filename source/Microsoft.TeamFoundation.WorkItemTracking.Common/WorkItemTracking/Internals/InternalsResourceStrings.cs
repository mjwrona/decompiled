// Decompiled with JetBrains decompiler
// Type: Microsoft.TeamFoundation.WorkItemTracking.Internals.InternalsResourceStrings
// Assembly: Microsoft.TeamFoundation.WorkItemTracking.Common, Version=19.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: E674B254-26A0-4D88-8FF3-86800090789C
// Assembly location: C:\Program Files\Azure DevOps Server 2022\Application Tier\Web Services\bin\Microsoft.TeamFoundation.WorkItemTracking.Common.dll

using System;
using System.ComponentModel;
using System.Globalization;
using System.Reflection;
using System.Resources;

namespace Microsoft.TeamFoundation.WorkItemTracking.Internals
{
  [EditorBrowsable(EditorBrowsableState.Never)]
  public static class InternalsResourceStrings
  {
    private static ResourceManager s_resMgr = new ResourceManager("ResourceStrings", typeof (InternalsResourceStrings).GetTypeInfo().Assembly);
    public const string BuletPlainText = "BuletPlainText";
    public const string ErrorInGroupNotSupported = "ErrorInGroupNotSupported";
    public const string ErrorInvalidQueryItemName = "ErrorInvalidQueryItemName";
    public const string ErrorQueryFieldsComparisonNotSupported = "ErrorQueryFieldsComparisonNotSupported";
    public const string ErrorWitCategoriesNotSupported = "ErrorWitCategoriesNotSupported";
    public const string ErrorWitLinksNotSupported = "ErrorWitLinksNotSupported";
    public const string ErrorWrongFieldTypeInInGroup = "ErrorWrongFieldTypeInInGroup";
    public const string FileUploadedExceededMax = "FileUploadedExceededMax";
    public const string ImageAltTextEnd = "ImageAltTextEnd";
    public const string ImageAltTextStart = "ImageAltTextStart";
    public const string QueryHierarchyNameCannotBeEmpty = "QueryHierarchyNameCannotBeEmpty";
    public const string QueryNameTooLong = "QueryNameTooLong";
    public const string UnrecognizedServerData = "UnrecognizedServerData";
    public const string ErrorNotUniqueStoredQuery = "ErrorNotUniqueStoredQuery";
    public const string ErrorUnexpected = "ErrorUnexpected";
    public const string ErrorUnexpectedWithDetails = "ErrorUnexpectedWithDetails";
    public const string ErrorWorkItemTypeAlreadyExists = "ErrorWorkItemTypeAlreadyExists";
    public const string ErrorServerInternalUnknown = "ErrorServerInternalUnknown";
    public const string ErrorRequestNotCancelable = "ErrorRequestNotCancelable";
    public const string ErrorInvalidQueryName = "ErrorInvalidQueryName";
    public const string ErrorInvalidQueryText = "ErrorInvalidQueryText";
    public const string ImportWorkitemTypeException = "ImportWorkitemTypeException";
    public const string ErrorAuthorizeFieldChanges = "ErrorAuthorizeFieldChanges";
    public const string ErrorChangeWorkItemTypeAlreadyChanged = "ErrorChangeWorkItemTypeAlreadyChanged";
    public const string ErrorChangeWorkItemTypeInvalidProjectID = "ErrorChangeWorkItemTypeInvalidProjectID";
    public const string ErrorChangeActionAlreadyChanged = "ErrorChangeActionAlreadyChanged";
    public const string ErrorBadAdminDataFieldsOutOfRange = "ErrorBadAdminDataFieldsOutOfRange";
    public const string ErrorBadAdminDataInvalidFieldType = "ErrorBadAdminDataInvalidFieldType";
    public const string ErrorBadAdminDataInvalidFieldName = "ErrorBadAdminDataInvalidFieldName";
    public const string ErrorBadAdminDataInvalidFieldReferenceName = "ErrorBadAdminDataInvalidFieldReferenceName";
    public const string ErrorBadAdminDataUnimplementedReadRuleCondition = "ErrorBadAdminDataUnimplementedReadRuleCondition";
    public const string ErrorBadAdminDataRuleFlagsNonEditable = "ErrorBadAdminDataRuleFlagsNonEditable";
    public const string ErrorBadAdminDataRuleEnforcementIsNotImplemented = "ErrorBadAdminDataRuleEnforcementIsNotImplemented";
    public const string ErrorBadAdminDataDenyAdminNotAllowed = "ErrorBadAdminDataDenyAdminNotAllowed";
    public const string ErrorBadAdminCannotAddRuleOnCoreFields = "ErrorBadAdminCannotAddRuleOnCoreFields";
    public const string ErrorLookupRuleTreeIdNotFound = "ErrorLookupRuleTreeIdNotFound";
    public const string ErrorWorkItemUpdateForceRollback = "ErrorWorkItemUpdateForceRollback";
    public const string ErrorChangesRejected = "ErrorChangesRejected";
    public const string ErrorBadServiceConfig = "ErrorBadServiceConfig";
    public const string ErrorSqlErrorLoginFailed = "ErrorSqlErrorLoginFailed";
    public const string ErrorSqlErrorDeadlock = "ErrorSqlErrorDeadlock";
    public const string ErrorSqlErrorTimeOutOrServerNotResponding = "ErrorSqlErrorTimeOutOrServerNotResponding";
    public const string ErrorCannotOpenDatabase = "ErrorCannotOpenDatabase";
    public const string ErrorNotAProjectUser = "ErrorNotAProjectUser";
    public const string ErrorNotANamespaceAdmin = "ErrorNotANamespaceAdmin";
    public const string ErrorWorkItemUpdateWorkItemMissingOrUpdated = "ErrorWorkItemUpdateWorkItemMissingOrUpdated";
    public const string ErrorAddConstantNotValidDomainAccount = "ErrorAddConstantNotValidDomainAccount";
    public const string ErrorChangeFieldReportingTypeAlreadySet = "ErrorChangeFieldReportingTypeAlreadySet";
    public const string ErrorInvalidFieldSpecified = "ErrorInvalidFieldSpecified";
    public const string ErrorAddSetInvalidParentIDOrConstID = "ErrorAddSetInvalidParentIDOrConstID";
    public const string ErrorQueryDepthTooLarge = "ErrorQueryDepthTooLarge";
    public const string InvalidProjectNodeId = "InvalidProjectNodeId";
    public const string ErrorAddFileFileAlreadyExists = "ErrorAddFileFileAlreadyExists";
    public const string ErrorAddFileFailedToFindFile = "ErrorAddFileFailedToFindFile";
    public const string ErrorSqlInsufficientMemory = "ErrorSqlInsufficientMemory";
    public const string ErrorNotEnoughFields = "ErrorNotEnoughFields";
    public const string IndexAssociatedWithFieldError = "IndexAssociatedWithFieldError";
    public const string ErrorNoPermissionToModify = "ErrorNoPermissionToModify";
    public const string ErrorNoPermissionToModifyField = "ErrorNoPermissionToModifyField";
    public const string ErrorNoPermissionToModifyRules = "ErrorNoPermissionToModifyRules";
    public const string ErrorUserOrGroupNotFound = "ErrorUserOrGroupNotFound";
    public const string ImportWorkItemLinkTypeException_InvalidRules = "ImportWorkItemLinkTypeException_InvalidRules";
    public const string ImportWorkItemLinkTypeException_InvalidTopology = "ImportWorkItemLinkTypeException_InvalidTopology";
    public const string ImportWorkItemLinkTypeException_ReverseNameInvalid = "ImportWorkItemLinkTypeException_ReverseNameInvalid";
    public const string ImportWorkItemLinkTypeException_ReferenceNameInUse = "ImportWorkItemLinkTypeException_ReferenceNameInUse";
    public const string ImportWorkItemLinkTypeException_ForwardNameInUse = "ImportWorkItemLinkTypeException_ForwardNameInUse";
    public const string ImportWorkItemLinkTypeException_ReverseNameInUse = "ImportWorkItemLinkTypeException_ReverseNameInUse";
    public const string ImportWorkItemLinkTypeException_NothingSpecified = "ImportWorkItemLinkTypeException_NothingSpecified";
    public const string ImportWorkItemLinkTypeException_EditDenied = "ImportWorkItemLinkTypeException_EditDenied";
    public const string ImportWorkItemLinkTypeException_ModifyTopology = "ImportWorkItemLinkTypeException_ModifyTopology";
    public const string ImportWorkItemLinkTypeException_DeleteDenied = "ImportWorkItemLinkTypeException_DeleteDenied";
    public const string LinkTypeNotFound = "LinkTypeNotFound";
    public const string LinkTypeNotSupportedForQuerying = "LinkTypeNotSupportedForQuerying";
    public const string LinkNotFoundForDelete = "LinkNotFoundForDelete";
    public const string LinkNotFoundForEdit = "LinkNotFoundForEdit";
    public const string AddLinkCannotLinkToSelf = "AddLinkCannotLinkToSelf";
    public const string AddRemoteLinkCannotLinkToSameAccount = "AddRemoteLinkCannotLinkToSameAccount";
    public const string AddRemoteLinkAccountRequired = "AddRemoteLinkAccountRequired";
    public const string RemoteLinkInvalidUriException = "RemoteLinkInvalidUriException";
    public const string AddRemoteLinkProjectRequired = "AddRemoteLinkProjectRequired";
    public const string AddLinkDisabledType = "AddLinkDisabledType";
    public const string AddLinkCircularity = "AddLinkCircularity";
    public const string AddLinkExtraParent = "AddLinkExtraParent";
    public const string AddLinkAlreadyExists = "AddLinkAlreadyExists";
    public const string AddLinkMaxDepthExceeded = "AddLinkMaxDepthExceeded";
    public const string AddLinkLimitExceeded = "AddLinkLimitExceeded";
    public const string LinkAuthorizationFailed = "LinkAuthorizationFailed";
    public const string LinkAuthorizationFailedAreaIdChanged = "LinkAuthorizationFailedAreaIdChanged";
    public const string LinkAuthorizationFailedLinkLocked = "LinkAuthorizationFailedLinkLocked";
    public const string QueryHierarchyDeniedOrNotExist = "QueryHierarchyDeniedOrNotExist";
    public const string QueryHierarchyParentDoesNotExist = "QueryHierarchyParentDoesNotExist";
    public const string QueryHierarchyParentIsNotAFolder = "QueryHierarchyParentIsNotAFolder";
    public const string QueryHierarchyNameConflictsWithExistingItem = "QueryHierarchyNameConflictsWithExistingItem";
    public const string QueryHierarchyCircularReference = "QueryHierarchyCircularReference";
    public const string QueryHierarchyTypeMismatch = "QueryHierarchyTypeMismatch";
    public const string QueryHierarchyItemAlreadyExists = "QueryHierarchyItemAlreadyExists";
    public const string QueryHierarchyCannotMoveRootFolder = "QueryHierarchyCannotMoveRootFolder";
    public const string QueryHierarchyCannotDeleteRootFolder = "QueryHierarchyCannotDeleteRootFolder";
    public const string ErrorGlobalListInUse = "ErrorGlobalListInUse";
    public const string ErrorWorkItemTypeInUse = "ErrorWorkItemTypeInUse";
    public const string ErrorBisAttributeNotFound = "ErrorBisAttributeNotFound";
    public const string ErrorInvalidOnParamedQuery = "ErrorInvalidOnParamedQuery";
    public const string ErrorBisMiddleTierNotRegistered = "ErrorBisMiddleTierNotRegistered";
    public const string ErrorNodeNotExist = "ErrorNodeNotExist";
    public const string ErrorCannotFindNodeFromId = "ErrorCannotFindNodeFromId";
    public const string ErrorCouldNotConnect = "ErrorCouldNotConnect";
    public const string ErrorDeniedOrNotExist = "ErrorDeniedOrNotExist";
    public const string ErrorDuplicateGlobalList = "ErrorDuplicateGlobalList";
    public const string ErrorDuplicateListItem = "ErrorDuplicateListItem";
    public const string ErrorDuplicateReason = "ErrorDuplicateReason";
    public const string ErrorDuplicatePattern = "ErrorDuplicatePattern";
    public const string ErrorFieldDefinitionNotExist = "ErrorFieldDefinitionNotExist";
    public const string ErrorFieldDefinitionNotExistGeneral = "ErrorFieldDefinitionNotExistGeneral";
    public const string ErrorFieldDefinitionIdNotExist = "ErrorFieldDefinitionIdNotExist";
    public const string ErrorFieldIdNotExist = "ErrorFieldIdNotExist";
    public const string ErrorFieldNotFound = "ErrorFieldNotFound";
    public const string ErrorFieldTypeMismatch = "ErrorFieldTypeMismatch";
    public const string ErrorGlobalListNotFound = "ErrorGlobalListNotFound";
    public const string ErrorInvalidState = "ErrorInvalidState";
    public const string ErrorManyDefaultStates = "ErrorManyDefaultStates";
    public const string ErrorDuplicateFieldName = "ErrorDuplicateFieldName";
    public const string ErrorDuplicateFieldNameBackup = "ErrorDuplicateFieldNameBackup";
    public const string ErrorManyStates = "ErrorManyStates";
    public const string ErrorNoDefaultState = "ErrorNoDefaultState";
    public const string ErrorProjectNotExist = "ErrorProjectNotExist";
    public const string ErrorProjectIdNotExist = "ErrorProjectIdNotExist";
    public const string ErrorRelatedLinkNotExist = "ErrorRelatedLinkNotExist";
    public const string ErrorRelatedLinkToSelf = "ErrorRelatedLinkToSelf";
    public const string ErrorWorkItemStoreAlreadyConnected = "ErrorWorkItemStoreAlreadyConnected";
    public const string ErrorWorkItemTypeNotExist = "ErrorWorkItemTypeNotExist";
    public const string ErrorWorkItemTypeNameInvalid = "ErrorWorkItemTypeNameInvalid";
    public const string ErrorProhibitedMeasure = "ErrorProhibitedMeasure";
    public const string ErrorWorkItemUpdateFieldsConflict = "ErrorWorkItemUpdateFieldsConflict";
    public const string ErrorWorkItemUpdateRuleViolation = "ErrorWorkItemUpdateRuleViolation";
    public const string ErrorIncompatibleMeasure = "ErrorIncompatibleMeasure";
    public const string ErrorIncompatibleDimension = "ErrorIncompatibleDimension";
    public const string ErrorIncompatibleDetail = "ErrorIncompatibleDetail";
    public const string ErrorUnsupportedReportingFieldType = "ErrorUnsupportedReportingFieldType";
    public const string ErrorDuplicateActions = "ErrorDuplicateActions";
    public const string ErrorPageSizeLocked = "ErrorPageSizeLocked";
    public const string ErrorPageSizeRange = "ErrorPageSizeRange";
    public const string ErrorActionsForInitialTransition = "ErrorActionsForInitialTransition";
    public const string ErrorDuplicateGlobalListItem = "ErrorDuplicateGlobalListItem";
    public const string ErrorWrongRuleForFieldType = "ErrorWrongRuleForFieldType";
    public const string ErrorInconsistentFieldTypes = "ErrorInconsistentFieldTypes";
    public const string ErrorFieldSelfReference = "ErrorFieldSelfReference";
    public const string ErrorInvalidListItem = "ErrorInvalidListItem";
    public const string ErrorCannotSortBy = "ErrorCannotSortBy";
    public const string ErrorLinkCommentTooLong = "ErrorLinkCommentTooLong";
    public const string ErrorLinkLocationTooLong = "ErrorLinkLocationTooLong";
    public const string ErrorHistory = "ErrorHistory";
    public const string ErrorIgnoreField = "ErrorIgnoreField";
    public const string ErrorInvalidURL = "ErrorInvalidURL";
    public const string ErrorItemIsNew = "ErrorItemIsNew";
    public const string ErrorItemNotOpen = "ErrorItemNotOpen";
    public const string ErrorItemOpen = "ErrorItemOpen";
    public const string ErrorQueryNestingLimit = "ErrorQueryNestingLimit";
    public const string ErrorItemAlreadyUpdatedOnServer = "ErrorItemAlreadyUpdatedOnServer";
    public const string ErrorInvalidTreeNode = "ErrorInvalidTreeNode";
    public const string ErrorReadOnlyField = "ErrorReadOnlyField";
    public const string ErrorBatchSaveFailed = "ErrorBatchSaveFailed";
    public const string ErrorInconsistentRules = "ErrorInconsistentRules";
    public const string ErrorUnknownFormField = "ErrorUnknownFormField";
    public const string ErrorCannotUseTreePathType = "ErrorCannotUseTreePathType";
    public const string ErrorCannotUseHistoryType = "ErrorCannotUseHistoryType";
    public const string QueryNameEmpty = "QueryNameEmpty";
    public const string QueryTextEmpty = "QueryTextEmpty";
    public const string ErrorWorkItemValidation = "ErrorWorkItemValidation";
    public const string ErrorWorkItemNotExistOrNoAccess = "ErrorWorkItemNotExistOrNoAccess";
    public const string ErrorWorkItemChangeRejected = "ErrorWorkItemChangeRejected";
    public const string ErrorRequestCancelledByUser = "ErrorRequestCancelledByUser";
    public const string ErrorDuplicateWorkItem = "ErrorDuplicateWorkItem";
    public const string ErrorInvalidProject = "ErrorInvalidProject";
    public const string ErrorAttachmentFileNotFound = "ErrorAttachmentFileNotFound";
    public const string ErrorAttachmentCommentTooLong = "ErrorAttachmentCommentTooLong";
    public const string ErrorAttachmentAlreadyExists = "ErrorAttachmentAlreadyExists";
    public const string ErrorMaxNewAttachments = "ErrorMaxNewAttachments";
    public const string FileUploadedExceededMaxMb = "FileUploadedExceededMaxMb";
    public const string FileUploadedExceededMaxBytes = "FileUploadedExceededMaxBytes";
    public const string CannotChangeQueryScope = "CannotChangeQueryScope";
    public const string QueryAlreadySaved = "QueryAlreadySaved";
    public const string QueryDescriptionTooLong = "QueryDescriptionTooLong";
    public const string TagFormatCreate = "TagFormatCreate";
    public const string TagFormatEdit = "TagFormatEdit";
    public const string TagFormatTransition = "TagFormatTransition";
    public const string TagAuth = "TagAuth";
    public const string UnknownUser = "UnknownUser";
    public const string CopiedCommentItem = "CopiedCommentItem";
    public const string WorkItemTag = "WorkItemTag";
    public const string CopiedCommentNewItem = "CopiedCommentNewItem";
    public const string ErrorInvalidFieldValue = "ErrorInvalidFieldValue";
    public const string ErrorInvalidFieldName = "ErrorInvalidFieldName";
    public const string ErrorInvalidFieldReferenceName = "ErrorInvalidFieldReferenceName";
    public const string ErrorInternalField = "ErrorInternalField";
    public const string ErrorInvalidRuleForFieldType = "ErrorInvalidRuleForFieldType";
    public const string ErrorInvalidRuleForField = "ErrorInvalidRuleForField";
    public const string ErrorDuplicateFieldReference = "ErrorDuplicateFieldReference";
    public const string ErrorFieldAlreadyExists = "ErrorFieldAlreadyExists";
    public const string ErrorFieldNotQueryable = "ErrorFieldNotQueryable";
    public const string ErrorUserNotFoundForSid = "ErrorUserNotFoundForSid";
    public const string ErrorServerRejectedChangesException = "ErrorServerRejectedChangesException";
    public const string ErrorOrphanedItem = "ErrorOrphanedItem";
    public const string ErrorOrphanedLink = "ErrorOrphanedLink";
    public const string AttachmentChangedException = "AttachmentChangedException";
    public const string AttachmentExistsException = "AttachmentExistsException";
    public const string AttachmentNotFoundException = "AttachmentNotFoundException";
    public const string WebExceptionConnectFailed = "WebExceptionConnectFailed";
    public const string WebExceptionCouldNotReachServer = "WebExceptionCouldNotReachServer";
    public const string CouldNotReachServer = "CouldNotReachServer";
    public const string WebExceptionTimeOut = "WebExceptionTimeOut";
    public const string BackendArgumentException = "BackendArgumentException";
    public const string ErrorMissingConstant = "ErrorMissingConstant";
    public const string ErrorInvalidXmlNamespace = "ErrorInvalidXmlNamespace";
    public const string ErrorCannotRenameField = "ErrorCannotRenameField";
    public const string ErrorDifferentReportingSettings = "ErrorDifferentReportingSettings";
    public const string FieldNameChanged = "FieldNameChanged";
    public const string ErrorDuplicateFieldDefinition = "ErrorDuplicateFieldDefinition";
    public const string WarningMissingIdentity = "WarningMissingIdentity";
    public const string ErrorNoImportPermissions = "ErrorNoImportPermissions";
    public const string ErrorMissingRequiredAttribute = "ErrorMissingRequiredAttribute";
    public const string WhereIsNotEmptyOnParamedQuery = "WhereIsNotEmptyOnParamedQuery";
    public const string ErrorInvalidQueryColumn = "ErrorInvalidQueryColumn";
    public const string ErrorCantSortBy = "ErrorCantSortBy";
    public const string ErrorDuplicateStateInTransition = "ErrorDuplicateStateInTransition";
    public const string ErrorDuplicateTransition = "ErrorDuplicateTransition";
    public const string ErrorAttachmentUploadFailed = "ErrorAttachmentUploadFailed";
    public const string ErrorTwoWidthElements = "ErrorTwoWidthElements";
    public const string ErrorNoWidthElements = "ErrorNoWidthElements";
    public const string ErrorReportingFieldNamesCollision = "ErrorReportingFieldNamesCollision";
    public const string LinkTypeCannotUpdateTopology = "LinkTypeCannotUpdateTopology";
    public const string LinkTypeSourceRelationNameRequired = "LinkTypeSourceRelationNameRequired";
    public const string LinkTypeTargetRelationNameRequired = "LinkTypeTargetRelationNameRequired";
    public const string LinkTypeTopologyNotSpecified = "LinkTypeTopologyNotSpecified";
    public const string LinkTypeNonDirectionalSourceTargetDifferent = "LinkTypeNonDirectionalSourceTargetDifferent";
    public const string LinkTypeDirectionalSourceTargetSame = "LinkTypeDirectionalSourceTargetSame";
    public const string LinkTypeNameConflict = "LinkTypeNameConflict";
    public const string LinkTypeRefNameConflict = "LinkTypeRefNameConflict";
    public const string LinkTypeFieldRefNameConflict = "LinkTypeFieldRefNameConflict";
    public const string ErrorInvalidLinkTypeName = "ErrorInvalidLinkTypeName";
    public const string ErrorInvalidLinkTypeReferenceName = "ErrorInvalidLinkTypeReferenceName";
    public const string ErrorInvalidLinkTypeReferenceNameSystem = "ErrorInvalidLinkTypeReferenceNameSystem";
    public const string FieldLinkTypeRefNameConflict = "FieldLinkTypeRefNameConflict";
    public const string LinkTypeCannotBeModified = "LinkTypeCannotBeModified";
    public const string LinkTypeHasBeenDeleted = "LinkTypeHasBeenDeleted";
    public const string ErrorNoPermissions = "ErrorNoPermissions";
    public const string LinkTypeCannotBeDeleted = "LinkTypeCannotBeDeleted";
    public const string ErrorWorkItemLinkTypeNotExist = "ErrorWorkItemLinkTypeNotExist";
    public const string DifferentStores = "DifferentStores";
    public const string LinkNotFound2 = "LinkNotFound2";
    public const string AddLinkCircularity2 = "AddLinkCircularity2";
    public const string AddLinkAlreadyExists2 = "AddLinkAlreadyExists2";
    public const string AddLinkExtraParent2 = "AddLinkExtraParent2";
    public const string AddLinkExtraParent3 = "AddLinkExtraParent3";
    public const string ErrorBatchSaveNullWorkItem = "ErrorBatchSaveNullWorkItem";
    public const string ErrorBatchSaveDuplicateWorkItem = "ErrorBatchSaveDuplicateWorkItem";
    public const string ErrorBatchSaveInvalidWorkitem = "ErrorBatchSaveInvalidWorkitem";
    public const string ErrorLinkAlreadyAdded = "ErrorLinkAlreadyAdded";
    public const string ErrorDuplicateExternalLink = "ErrorDuplicateExternalLink";
    public const string ErrorHyperLinkAlreadyAdded = "ErrorHyperLinkAlreadyAdded";
    public const string ErrorDuplicateHyperlink = "ErrorDuplicateHyperlink";
    public const string ErrorWorkItemLinkAlreadyAdded = "ErrorWorkItemLinkAlreadyAdded";
    public const string ErrorDuplicateWorkItemLink = "ErrorDuplicateWorkItemLink";
    public const string ErrorWorkItemLinkChangeTargetId = "ErrorWorkItemLinkChangeTargetId";
    public const string ErrorWorkItemLinkChangeSourceId = "ErrorWorkItemLinkChangeSourceId";
    public const string ErrorWorkItemLinkNeedTargetId = "ErrorWorkItemLinkNeedTargetId";
    public const string ErrorWorkItemLinkOneOfIds = "ErrorWorkItemLinkOneOfIds";
    public const string ErrorWorkItemLinkToUndefined = "ErrorWorkItemLinkToUndefined";
    public const string ErrorWorkItemNeedCollection = "ErrorWorkItemNeedCollection";
    public const string ErrorWorkItemIsNotReadyToSave = "ErrorWorkItemIsNotReadyToSave";
    public const string ErrorCantModifyIdField = "ErrorCantModifyIdField";
    public const string ErrorMalformedUri = "ErrorMalformedUri";
    public const string QueryLinksOnParamedQuery = "QueryLinksOnParamedQuery";
    public const string IncorrectEndAsyncQuery = "IncorrectEndAsyncQuery";
    public const string IncorrectWorkItemQueryMethod = "IncorrectWorkItemQueryMethod";
    public const string IncorrectLinkedWorkItemQueryMethod = "IncorrectLinkedWorkItemQueryMethod";
    public const string LinksControlDuplicateName = "LinksControlDuplicateName";
    public const string LinksControlLinkColumnInvalidAttributes = "LinksControlLinkColumnInvalidAttributes";
    public const string LinksControlLinkColumnDuplicateColumn = "LinksControlLinkColumnDuplicateColumn";
    public const string LinksControlDuplicateFilterName = "LinksControlDuplicateFilterName";
    public const string LinksControlDuplicateWITFilterName = "LinksControlDuplicateWITFilterName";
    public const string LinksControlCannotContainLinksOptions = "LinksControlCannotContainLinksOptions";
    public const string LinksControlUnknownFilterName = "LinksControlUnknownFilterName";
    public const string LinksControlLinkAttributeInvalid = "LinksControlLinkAttributeInvalid";
    public const string LinksControlAllFiltersCannotContainChildren = "LinksControlAllFiltersCannotContainChildren";
    public const string LinksControlExcludeAllLinkTypesFiltersCannotContainWorkItemTypeFilters = "LinksControlExcludeAllLinkTypesFiltersCannotContainWorkItemTypeFilters";
    public const string LinksControlNonDirectionalLinkWithFilterOn = "LinksControlNonDirectionalLinkWithFilterOn";
    public const string ErrorNullLinkInArray = "ErrorNullLinkInArray";
    public const string ErrorNoAreaWriteAccess = "ErrorNoAreaWriteAccess";
    public const string QueryHierarchyTeamQueries = "QueryHierarchyTeamQueries";
    public const string QueryHierarchyMyQueries = "QueryHierarchyMyQueries";
    public const string QueryHierarchyCannotAddSelfAsChild = "QueryHierarchyCannotAddSelfAsChild";
    public const string QueryHierarchyCannotAddDeletedItems = "QueryHierarchyCannotAddDeletedItems";
    public const string QueryHierarchyCannotAddToDeletedFolder = "QueryHierarchyCannotAddToDeletedFolder";
    public const string QueryHierarchyServerDoesNotSupportFolders = "QueryHierarchyServerDoesNotSupportFolders";
    public const string QueryHierarchyServerDoesNotSupportPermissions = "QueryHierarchyServerDoesNotSupportPermissions";
    public const string IsEmptyValidWith = "IsEmptyValidWith";
    public const string QueryHierarchyCannotAddParentAsChild = "QueryHierarchyCannotAddParentAsChild";
    public const string QueryHierarchyNameConflict = "QueryHierarchyNameConflict";
    public const string ArgumentCannotBeEmpty = "ArgumentCannotBeEmpty";
    public const string QueryHierarchyQueryTextCannotBeEmpty = "QueryHierarchyQueryTextCannotBeEmpty";
    public const string QueryHierarchyAddingAcrossStoresProhibited = "QueryHierarchyAddingAcrossStoresProhibited";
    public const string QueryHierarchyRootNodesMayNotBeModified = "QueryHierarchyRootNodesMayNotBeModified";
    public const string QueryHierarchyCannotModifyDeletedItems = "QueryHierarchyCannotModifyDeletedItems";
    public const string QueryHierarchyCannotDeleteDeletedItems = "QueryHierarchyCannotDeleteDeletedItems";
    public const string QueryHierarchyCannotDeleteOrphanedItems = "QueryHierarchyCannotDeleteOrphanedItems";
    public const string QueryHierarchyMoveBetweenProjectsProhibited = "QueryHierarchyMoveBetweenProjectsProhibited";
    public const string ErrorCannotImportWITNoPermissionToModifyFieldForAllProjects = "ErrorCannotImportWITNoPermissionToModifyFieldForAllProjects";
    public const string ErrorUnknownTypeInCategory = "ErrorUnknownTypeInCategory";
    public const string ErrorDuplicateTypeInCategory = "ErrorDuplicateTypeInCategory";
    public const string ErrorInvalidXml = "ErrorInvalidXml";
    public const string ListSeparator = "ListSeparator";
    public const string ErrorControlLabelAttrMissing = "ErrorControlLabelAttrMissing";
    public const string ErrorLinkParamsTooFew = "ErrorLinkParamsTooFew";
    public const string ErrorInvalidParam = "ErrorInvalidParam";
    public const string InvalidParamIndexError = "InvalidParamIndexError";
    public const string ParamIndexDuplicateError = "ParamIndexDuplicateError";
    public const string InvalidUrlRootFormat = "InvalidUrlRootFormat";
    public const string UnsupportedUriScheme = "UnsupportedUriScheme";
    public const string UnsupportedUriSchemeWebpageControl = "UnsupportedUriSchemeWebpageControl";
    public const string WebpageControlInvalidAttributes = "WebpageControlInvalidAttributes";
    public const string ArgumentCannotBeNullOrEmpty = "ArgumentCannotBeNullOrEmpty";
    public const string ErrorFieldReportabilityChange = "ErrorFieldReportabilityChange";
    public const string ErrorFieldIndexingInvalidType = "ErrorFieldIndexingInvalidType";
    public const string ErrorInvalidProjectId = "ErrorInvalidProjectId";
    public const string ErrorMissingProjectScope = "ErrorMissingProjectScope";
    public const string ErrorGuidFieldsNotSupported = "ErrorGuidFieldsNotSupported";
    public const string ErrorBoolFieldsNotSupported = "ErrorBoolFieldsNotSupported";
    public const string ErrorRevisionQueriesNotSupported = "ErrorRevisionQueriesNotSupported";
    public const string ErrorLinkLockingNotSupported = "ErrorLinkLockingNotSupported";
    public const string ErrorComputedFieldInRevisionQuery = "ErrorComputedFieldInRevisionQuery";
    public const string ErrorDifferentProjectsInBatchSave = "ErrorDifferentProjectsInBatchSave";
    public const string ErrorFullTextService = "ErrorFullTextService";
    public const string ErrorRenameSafeChanged = "ErrorRenameSafeChanged";
    public const string ErrorRenameSafeNotValid = "ErrorRenameSafeNotValid";
    public const string ErrorGlobalWorkflowNotSupported = "ErrorGlobalWorkflowNotSupported";
    public const string IncorrectWorkItemState = "IncorrectWorkItemState";
    public const string ErrorSavingWorkItemTagFailed = "ErrorSavingWorkItemTagFailed";
    public const string ErrorImageNotFound = "ErrorImageNotFound";
    public const string ErrorImageUploadFailed = "ErrorImageUploadFailed";
    public const string ErrorDeleteFieldNoPermission = "ErrorDeleteFieldNoPermission";
    public const string ErrorDifferentFieldDefinitions = "ErrorDifferentFieldDefinitions";
    public const string FormatterQuery = "FormatterQuery";
    public const string PredicateError = "PredicateError";
    public const string PredicateErrorInvalidValueType = "PredicateErrorInvalidValueType";
    public const string PredicateErrorMissingFieldName = "PredicateErrorMissingFieldName";
    public const string ErrorDuplicateWorkItemTypeletID = "ErrorDuplicateWorkItemTypeletID";
    public const string ErrorDuplicateWorkItemTypeletName = "ErrorDuplicateWorkItemTypeletName";
    public const string ErrorWorkItemTypeletDoesNotExist = "ErrorWorkItemTypeletDoesNotExist";
    public const string SearchPageCancelled = "SearchPageCancelled";
    public const string SearchPageExceededCharacterLimit = "SearchPageExceededCharacterLimit";
    public const string SearchPageExceededTermLimit = "SearchPageExceededTermLimit";
    public const string SearchPageFailed = "SearchPageFailed";
    public const string SearchPageFormatException = "SearchPageFormatException";
    public const string SearchPageKeywordHelpTextWithoutRepro = "SearchPageKeywordHelpTextWithoutRepro";
    public const string SearchPageKeywordHelpTextWithRepro = "SearchPageKeywordHelpTextWithRepro";
    public const string SearchPageKeywordNotHelpTextWithoutRepro = "SearchPageKeywordNotHelpTextWithoutRepro";
    public const string SearchPageKeywordNotHelpTextWithRepro = "SearchPageKeywordNotHelpTextWithRepro";
    public const string ErrorSearchInvalidFieldName = "ErrorSearchInvalidFieldName";
    public const string ErrorObseleteFeature = "ErrorObseleteFeature";
    public const string ErrorIdentityFieldsNotSupported = "ErrorIdentityFieldsNotSupported";
    public const string ErrorIdentityMustBeAGroup = "ErrorIdentityMustBeAGroup";
    public const string ErrorMissingIdentity = "ErrorMissingIdentity";
    public const string ErrorOnlyIdentitiesAllowedInIdentityFields = "ErrorOnlyIdentitiesAllowedInIdentityFields";
    public const string ErrorAddFileFileDoesNotExist = "ErrorAddFileFileDoesNotExist";
    public const string WorkItemAttachmentIncorrectOffset = "WorkItemAttachmentIncorrectOffset";
    public const string ErrorWorkItemTypeNameNotUnique = "ErrorWorkItemTypeNameNotUnique";
    public const string ErrorWorkItemTypeReferenceNameNotUnique = "ErrorWorkItemTypeReferenceNameNotUnique";
    public const string ErrorInvalidWorkItemTypeReferenceName = "ErrorInvalidWorkItemTypeReferenceName";
    public const string ErrorIdentityNotFound = "ErrorIdentityNotFound";
    public const string FieldTypeInvalid = "FieldTypeInvalid";
    public const string WebLayout_ControlTypeNotAllowed = "WebLayout_ControlTypeNotAllowed";
    public const string WebLayout_SystemControlTypeNotAllowed = "WebLayout_SystemControlTypeNotAllowed";
    public const string WebLayout_SystemControlNameDuplicated = "WebLayout_SystemControlNameDuplicated";
    public const string WebLayout_SystemControlFieldNameNotAllowed = "WebLayout_SystemControlFieldNameNotAllowed";
    public const string WebLayout_FieldNameNotAllowed = "WebLayout_FieldNameNotAllowed";
    public const string WebLayout_ControlTypeOnlyAllowedInFirstSection = "WebLayout_ControlTypeOnlyAllowedInFirstSection";
    public const string WorkItemFormAttachments = "WorkItemFormAttachments";
    public const string WorkItemFormHistory = "WorkItemFormHistory";
    public const string WorkItemFormLinks = "WorkItemFormLinks";
    public const string WebLayout_InvalidOrDuplicatedPageLabel = "WebLayout_InvalidOrDuplicatedPageLabel";
    public const string WebLayout_InvalidOrDuplicatedGroupLabel = "WebLayout_InvalidOrDuplicatedGroupLabel";
    public const string WebLayout_InvalidControlsInGroup = "WebLayout_InvalidControlsInGroup";
    public const string WebLayout_RequiredFieldsNotInBothLayouts = "WebLayout_RequiredFieldsNotInBothLayouts";
    public const string WebLayout_DuplicateControlsInGroup = "WebLayout_DuplicateControlsInGroup";
    public const string WebLayoutLinksControlLinkColumnInvalidAttributes = "WebLayoutLinksControlLinkColumnInvalidAttributes";
    public const string Control = "Control";
    public const string Group = "Group";
    public const string Page = "Page";
    public const string WebLayout_InvalidContributionType = "WebLayout_InvalidContributionType";
    public const string WebLayout_InvalidContributionInputValue = "WebLayout_InvalidContributionInputValue";
    public const string WebLayout_InvalidContributionInputId = "WebLayout_InvalidContributionInputId";
    public const string WebLayout_InvalidContributionInputType = "WebLayout_InvalidContributionInputType";
    public const string WebLayout_ContributionInputNotSpecified = "WebLayout_ContributionInputNotSpecified";
    public const string WebLayout_ContributionNotFoundOrNotInListedExtensionsElement = "WebLayout_ContributionNotFoundOrNotInListedExtensionsElement";
    public const string WebLayout_FormExtensionNotFoundOrNoFormContribution = "WebLayout_FormExtensionNotFoundOrNoFormContribution";
    public const string WebLayout_FormExtensionDoesNotHavePageGroupOrControlContribution = "WebLayout_FormExtensionDoesNotHavePageGroupOrControlContribution";
    public const string WebLayout_UnsupportedAutoInjectionContributionType = "WebLayout_UnsupportedAutoInjectionContributionType";
    public const string WebLayout_DuplicateGroupContributions = "WebLayout_DuplicateGroupContributions";
    public const string WebLayout_DuplicatePageContributions = "WebLayout_DuplicatePageContributions";
    public const string WebLayout_FormExtensionNotDeclared = "WebLayout_FormExtensionNotDeclared";
    public const string MultipleControlsInLinksGroupException = "MultipleControlsInLinksGroupException";
    public const string NewFormFirstPageTitle = "NewFormFirstPageTitle";
    public const string WebLayout_ControlHeightNotAllowed = "WebLayout_ControlHeightNotAllowed";
    public const string WorkItemFormDevelopment = "WorkItemFormDevelopment";
    public const string WorkItemFormRelatedWork = "WorkItemFormRelatedWork";
    public const string ErrorGroupContainsAADGroupMember = "ErrorGroupContainsAADGroupMember";
    public const string ErrorGroupContainsAADGroupSnippet = "ErrorGroupContainsAADGroupSnippet";
    public const string ErrorGroupContainsAADGroupSnippetTeamProject = "ErrorGroupContainsAADGroupSnippetTeamProject";
    public const string ErrorReportabilityValidationFailed = "ErrorReportabilityValidationFailed";
    public const string WebLayout_SystemControlReplacesFieldNotAllowed = "WebLayout_SystemControlReplacesFieldNotAllowed";
    public const string WebLayout_SystemControlReplacesFieldDuplicated = "WebLayout_SystemControlReplacesFieldDuplicated";
    public const string WorkItemTypeListItemMustHaveValue = "WorkItemTypeListItemMustHaveValue";
    public const string DataImportWhitelistedLinksControlUnknownFilterName = "DataImportWhitelistedLinksControlUnknownFilterName";
    public const string WebLayout_ControlNotRecognized = "WebLayout_ControlNotRecognized";
    public const string WebLayout_SystemControlHiddenFieldNotAllowed = "WebLayout_SystemControlHiddenFieldNotAllowed";
    public const string ErrorGroupContainsADGroupMember = "ErrorGroupContainsADGroupMember";
    public const string FileDownloadExceededMaxBytes = "FileDownloadExceededMaxBytes";
    public const string FileDownloadExceededMaxMb = "FileDownloadExceededMaxMb";
    public const string ErrorGroupIdentityNotFound = "ErrorGroupIdentityNotFound";
    public const string RemoteLinkAddLockedLink = "RemoteLinkAddLockedLink";
    public const string AddRemoteLinkWhenPendingDelete = "AddRemoteLinkWhenPendingDelete";
    public const string InvalidContributionInputIdException = "InvalidContributionInputIdException";

    public static ResourceManager Manager => InternalsResourceStrings.s_resMgr;

    public static string Get(string resourceName) => InternalsResourceStrings.s_resMgr.GetString(resourceName, CultureInfo.CurrentUICulture);

    public static string Get(string resourceName, CultureInfo culture) => culture == null ? InternalsResourceStrings.Get(resourceName) : InternalsResourceStrings.s_resMgr.GetString(resourceName, culture);

    public static int GetInt(string resourceName) => (int) InternalsResourceStrings.s_resMgr.GetObject(resourceName, CultureInfo.CurrentUICulture);

    public static int GetInt(string resourceName, CultureInfo culture) => culture == null ? InternalsResourceStrings.GetInt(resourceName) : (int) InternalsResourceStrings.s_resMgr.GetObject(resourceName, culture);

    public static bool GetBool(string resourceName) => (bool) InternalsResourceStrings.s_resMgr.GetObject(resourceName, CultureInfo.CurrentUICulture);

    public static bool GetBool(string resourceName, CultureInfo culture) => culture == null ? InternalsResourceStrings.GetBool(resourceName) : (bool) InternalsResourceStrings.s_resMgr.GetObject(resourceName, culture);

    public static string Format(string resourceName, params object[] args) => InternalsResourceStrings.Format(resourceName, CultureInfo.CurrentUICulture, args);

    public static string Format(string resourceName, CultureInfo culture, params object[] args)
    {
      if (culture == null)
        culture = CultureInfo.CurrentUICulture;
      string format = InternalsResourceStrings.Get(resourceName, culture);
      if (args == null)
        return format;
      for (int index = 0; index < args.Length; ++index)
      {
        if (args[index] is DateTime)
        {
          DateTime dateTime = (DateTime) args[index];
          Calendar calendar = DateTimeFormatInfo.CurrentInfo.Calendar;
          if (dateTime > calendar.MaxSupportedDateTime)
            args[index] = (object) calendar.MaxSupportedDateTime;
          else if (dateTime < calendar.MinSupportedDateTime)
            args[index] = (object) calendar.MinSupportedDateTime;
        }
      }
      return string.Format((IFormatProvider) CultureInfo.CurrentCulture, format, args);
    }
  }
}
