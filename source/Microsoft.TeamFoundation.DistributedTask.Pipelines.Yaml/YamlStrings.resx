<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InvalidEachParameter1" xml:space="preserve">
    <value>The value '{0}' is unexpected. The expected format of an 'each' expression is: ${{ each &lt;identifier&gt; in &lt;value&gt; }}</value>
  </data>
  <data name="EnvironmentResourceNameConflict" xml:space="preserve">
    <value>Environment name cannot contain resourceName '{0}' if resourceName is explicitly specified '{1}'.</value>
  </data>
  <data name="CannotFindTaskIdFromArtifactExtension" xml:space="preserve">
    <value>Cannot find the task ID for the build resource extension {0}</value>
  </data>
  <data name="ExpectedMapping" xml:space="preserve">
    <value>Expected a mapping</value>
  </data>
  <data name="CannotOverrideSystemVariable" xml:space="preserve">
    <value>Cannot override system variable '{0}'</value>
  </data>
  <data name="MissingTemplateParameterValue" xml:space="preserve">
    <value>A value for the '{0}' parameter must be provided.</value>
  </data>
  <data name="ExpressionNotClosed" xml:space="preserve">
    <value>The expression is not closed. An unescaped ${{ sequence was found, but the closing }} sequence was not found.</value>
  </data>
  <data name="CronSyntaxError" xml:space="preserve">
    <value>Error while validating cron input. Improperly formed cron syntax: '{0}'.</value>
  </data>
  <data name="ExpectedDocumentEnd" xml:space="preserve">
    <value>Expected document end parse event</value>
  </data>
  <data name="MaxObjectSizeExceeded" xml:space="preserve">
    <value>Maximum object size exceeded. Reduce the size of your YAML pipeline. If you have large inline scripts, for example, can you factor them out and check them in?</value>
  </data>
  <data name="InvalidTemplateParameter" xml:space="preserve">
    <value>The '{0}' parameter is not a valid {1}.</value>
  </data>
  <data name="InvalidTaskReference" xml:space="preserve">
    <value>Task reference must be in the format &lt;NAME&gt;@&lt;MAJOR_VERSION&gt; or &lt;NAME&gt;@&lt;MAJOR_VERSION.MINOR_VERSION.PATCH_VERSION&gt;. For example MyTask@2 or MyTask@2.3.1. The following task reference format is invalid: '{0}'</value>
  </data>
  <data name="ExpectedStreamEnd" xml:space="preserve">
    <value>Expected stream end parse event</value>
  </data>
  <data name="CannotFindPackageResource" xml:space="preserve">
    <value>Cannot find package resource for {0}</value>
  </data>
  <data name="DirectiveNotAllowedInline" xml:space="preserve">
    <value>The directive '{0}' is not allowed in this context. Directives are not supported for expressions that are embedded within a string. Directives are only supported when the entire value is an expression.</value>
  </data>
  <data name="ExpectedJArrayOrJObectResult" xml:space="preserve">
    <value>Expected an array or object result. Actual type: '{0}'</value>
  </data>
  <data name="UnableToDetermineOneOf" xml:space="preserve">
    <value>Unable to determine type. Specify more properties to disambiguate types.</value>
  </data>
  <data name="FailedToAddParameterForWebhook" xml:space="preserve">
    <value>Failed to add a parameter named {0} for the declared webhook resource {1}</value>
  </data>
  <data name="ExpressionNotAllowed" xml:space="preserve">
    <value>A template expression is not allowed in this context</value>
  </data>
  <data name="UnableToConvertToTemplateToken" xml:space="preserve">
    <value>Unable to convert the object to a template token. Actual type '{0}'</value>
  </data>
  <data name="KeyNotFound" xml:space="preserve">
    <value>The given key '{0}' was not present in the dictionary</value>
  </data>
  <data name="ExpectedAtLeastOnePair" xml:space="preserve">
    <value>Expected at least one key-value pair in the mapping</value>
  </data>
  <data name="UnexpectedValue" xml:space="preserve">
    <value>Unexpected value '{0}'</value>
  </data>
  <data name="AnchorsNotSupported" xml:space="preserve">
    <value>Anchors are not currently supported. Remove the anchor '{0}'</value>
  </data>
  <data name="ExpectedScalar" xml:space="preserve">
    <value>Expected a scalar value</value>
  </data>
  <data name="ExpectedSequenceOrMappingActual" xml:space="preserve">
    <value>Expected a sequence or mapping. Actual value '{0}'</value>
  </data>
  <data name="ExpectedStreamStart" xml:space="preserve">
    <value>Expected stream start parse event</value>
  </data>
  <data name="ValueMutuallyExclusive" xml:space="preserve">
    <value>'{0}' is not allowed. '{1}' is already defined and is mutually exclusive.</value>
  </data>
  <data name="InvalidTemplateParameterType" xml:space="preserve">
    <value>The '{0}' parameter value '{1}' is not a valid {2}.</value>
  </data>
  <data name="InvalidTemplateParameterValue" xml:space="preserve">
    <value>The '{0}' parameter value '{1}' is not a valid value.</value>
  </data>
  <data name="EnvironmentNameKeyNotFound" xml:space="preserve">
    <value>Unable to find key '{0}' in environment schema.</value>
  </data>
  <data name="InvalidIdentifierReserved" xml:space="preserve">
    <value>The identifier '{0}' is a reserved name and may not be used</value>
  </data>
  <data name="MaxParseEventsExceeded" xml:space="preserve">
    <value>Maximum parsing events exceeded. This may indicate an internal error (infinite loop).</value>
  </data>
  <data name="MaxTemplateEventsExceeded" xml:space="preserve">
    <value>Maximum events exceeded while evaluating the template. This may indicate an infinite loop or too many nested loops.</value>
  </data>
  <data name="CompiledYamlDocument" xml:space="preserve">
    <value>Template and static variable resolution complete. Final runtime YAML document:</value>
  </data>
  <data name="YamlDocument" xml:space="preserve">
    <value>YAML document:</value>
  </data>
  <data name="ExpectedBoolean" xml:space="preserve">
    <value>Expected a Boolean value. Actual value: '{0}'</value>
  </data>
  <data name="TransformResultSequenceExpectedScalar" xml:space="preserve">
    <value>Transform resulted in a sequence. A scalar was expected.</value>
  </data>
  <data name="InvalidDownloadTaskAlias" xml:space="preserve">
    <value>Download task alias cannot be empty. It should be either current or none or one of the resource's alias.</value>
  </data>
  <data name="CannotFindTaskId" xml:space="preserve">
    <value>Cannot find the task ID {0} for the build resource {1}.</value>
  </data>
  <data name="InvalidNameAndVersion" xml:space="preserve">
    <value>The name '{0}' is malformed. Expected a string of the format &lt;name&gt;[@&lt;version&gt;]</value>
  </data>
  <data name="UnexpectedMappingStart" xml:space="preserve">
    <value>A mapping was not expected</value>
  </data>
  <data name="InvalidPipelineScheduleBranchFilters" xml:space="preserve">
    <value>Invalid Schedule schema, schedule does not have usable branch filters.</value>
  </data>
  <data name="DirectiveNotAllowed" xml:space="preserve">
    <value>The expression directive '{0}' is not supported in this context</value>
  </data>
  <data name="MaxObjectDepthExceeded" xml:space="preserve">
    <value>Maximum object depth exceeded</value>
  </data>
  <data name="IdentifierAlreadyDefined" xml:space="preserve">
    <value>The idenfifier '{0}' has already been defined within the current scope</value>
  </data>
  <data name="LoadingFile" xml:space="preserve">
    <value>Loading file: {0}</value>
  </data>
  <data name="UnexpectedTemplateParameter" xml:space="preserve">
    <value>Unexpected parameter '{0}'</value>
  </data>
  <data name="ExpectedDocumentStart" xml:space="preserve">
    <value>Expected document start parse event</value>
  </data>
  <data name="InvalidIdentifier" xml:space="preserve">
    <value>The value '{0}' is not a valid identifier. Identifiers must start with a-z, A-Z, or _ and may only be followed by a-z, A-Z, 0-9, or _.</value>
  </data>
  <data name="LineColumn" xml:space="preserve">
    <value>(Line: {0}, Col: {1})</value>
  </data>
  <data name="ExpectedParseEvent" xml:space="preserve">
    <value>Expected a parse event</value>
  </data>
  <data name="ExpectedNParametersFollowingDirective" xml:space="preserve">
    <value>Exactly {0} parameter(s) were expected following the directive '{1}'. Actual parameter count: {2}</value>
  </data>
  <data name="ExpectedScalarSequenceOrMapping" xml:space="preserve">
    <value>Expected a scalar value, a sequence, or a mapping</value>
  </data>
  <data name="UnexpectedValueWithoutContent" xml:space="preserve">
    <value>Unexpected value</value>
  </data>
  <data name="KeyAlreadyDefined" xml:space="preserve">
    <value>An item with the same key '{0}' has already been added</value>
  </data>
  <data name="MaxFileSizeExceeded" xml:space="preserve">
    <value>The maximum file size of {0} characters has been exceeded.</value>
  </data>
  <data name="ResourceTypeIsMandatoryWithTags" xml:space="preserve">
    <value>When tags are specified ResourceType is a mandatory input.</value>
  </data>
  <data name="CannotFindTaskIdForPackageResources" xml:space="preserve">
    <value>Cannot find the task ID {0} for the package resource {1}.</value>
  </data>
  <data name="CannotFindTaskIdFromPackageArtifactExtension" xml:space="preserve">
    <value>Cannot find the task ID for the package resource extension {0}</value>
  </data>
  <data name="MaxTemplateBuilderEventsExceeded" xml:space="preserve">
    <value>Maximum template builder events exceeded. This may indicate an internal error (infinite loop).</value>
  </data>
  <data name="ExpectedEndOfParseEvents" xml:space="preserve">
    <value>Expected end of parse events</value>
  </data>
  <data name="ValueAlreadyDefined" xml:space="preserve">
    <value>'{0}' is already defined</value>
  </data>
  <data name="MaxFilesExceeded" xml:space="preserve">
    <value>The maximum file count of {0} has been exceeded. Reduce the number of files included by your YAML pipeline.</value>
  </data>
  <data name="DuplicateTemplateParameter" xml:space="preserve">
    <value>The '{0}' parameter is declared more than once in the parameter list.</value>
  </data>
  <data name="UnexpectedParsingEventType" xml:space="preserve">
    <value>Unexpected parsing event type: {0}</value>
  </data>
  <data name="UnexpectedSequenceStart" xml:space="preserve">
    <value>A sequence was not expected</value>
  </data>
  <data name="ExpectedSequence" xml:space="preserve">
    <value>Expected a sequence</value>
  </data>
  <data name="ExpectedNonEmptyString" xml:space="preserve">
    <value>ExpectedNonEmptyString</value>
  </data>
  <data name="TransformResultMappingExpectedScalar" xml:space="preserve">
    <value>Transform resulted in a mapping. A scalar was expected.</value>
  </data>
  <data name="ExpectedExpression" xml:space="preserve">
    <value>An expression was expected</value>
  </data>
  <data name="ExpectedInteger" xml:space="preserve">
    <value>Expected an integer value. Actual value: '{0}'</value>
  </data>
  <data name="UnexpectedTemplateType" xml:space="preserve">
    <value>Unexpected template type '{0}'</value>
  </data>
  <data name="CannotFindBuildResource" xml:space="preserve">
    <value>Cannot find build resource for {0}</value>
  </data>
</root>