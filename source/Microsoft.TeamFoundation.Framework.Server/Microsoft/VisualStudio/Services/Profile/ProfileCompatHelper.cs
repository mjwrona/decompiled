// Decompiled with JetBrains decompiler
// Type: Microsoft.VisualStudio.Services.Profile.ProfileCompatHelper
// Assembly: Microsoft.TeamFoundation.Framework.Server, Version=19.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 07453D77-2935-488F-B470-3D01F1673D9B
// Assembly location: C:\Program Files\Azure DevOps Server 2022\Application Tier\Web Services\bin\Plugins\Microsoft.TeamFoundation.Framework.Server.dll

using Microsoft.TeamFoundation.Framework.Server;
using Microsoft.VisualStudio.Services.Common;
using Microsoft.VisualStudio.Services.Users;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;

namespace Microsoft.VisualStudio.Services.Profile
{
  public static class ProfileCompatHelper
  {
    private static readonly DateTimeOffset c_startTimeForAttributeMath = new DateTimeOffset(new DateTime(2010, 1, 1, 0, 0, 0, DateTimeKind.Utc));
    private static readonly HashSet<string> s_acceptedPostFixes = new HashSet<string>()
    {
      "12",
      "14_PreferredProfile",
      "14"
    };
    private static readonly Dictionary<Type, Type> s_profileToUserExceptionMapping = new Dictionary<Type, Type>()
    {
      {
        typeof (ProfileDoesNotExistException),
        typeof (UserDoesNotExistException)
      },
      {
        typeof (ProfileAlreadyExistsException),
        typeof (UserAlreadyExistsException)
      },
      {
        typeof (ProfileAttributeNotFoundException),
        typeof (UserAttributeDoesNotExistException)
      },
      {
        typeof (ProfileServiceUnavailableException),
        typeof (UserServiceUnavailableException)
      },
      {
        typeof (BadEmailAddressException),
        typeof (BadMailAddressException)
      },
      {
        typeof (BadCountryNameException),
        typeof (InvalidCountryException)
      }
    };
    private static readonly Dictionary<Type, ProfileCompatHelper.ProfileExceptionMapping> s_userToProfileExceptionMapping = new Dictionary<Type, ProfileCompatHelper.ProfileExceptionMapping>()
    {
      {
        typeof (UserDoesNotExistException),
        new ProfileCompatHelper.ProfileExceptionMapping(typeof (ProfileDoesNotExistException), "VSS011031: There is no profile for the authenticated user in the system.")
      },
      {
        typeof (UserAlreadyExistsException),
        new ProfileCompatHelper.ProfileExceptionMapping(typeof (ProfileAlreadyExistsException))
      },
      {
        typeof (UserAttributeDoesNotExistException),
        new ProfileCompatHelper.ProfileExceptionMapping(typeof (ProfileAttributeNotFoundException), "VSS011051: Profile attribute not found.")
      },
      {
        typeof (UserServiceUnavailableException),
        new ProfileCompatHelper.ProfileExceptionMapping(typeof (ProfileServiceUnavailableException))
      },
      {
        typeof (BadMailAddressException),
        new ProfileCompatHelper.ProfileExceptionMapping(typeof (BadEmailAddressException))
      },
      {
        typeof (InvalidCountryException),
        new ProfileCompatHelper.ProfileExceptionMapping(typeof (BadCountryNameException))
      },
      {
        typeof (InvalidUserCreateException),
        new ProfileCompatHelper.ProfileExceptionMapping(typeof (BadProfileRequestException))
      }
    };

    public static Avatar ConvertToProfileAvatar(Microsoft.VisualStudio.Services.Users.Avatar userAvatar)
    {
      if (userAvatar == null)
        return (Avatar) null;
      return new Avatar()
      {
        Value = userAvatar.Image,
        Size = (AvatarSize) userAvatar.Size,
        IsAutoGenerated = userAvatar.IsAutoGenerated,
        TimeStamp = userAvatar.LastModified
      };
    }

    public static Microsoft.VisualStudio.Services.Users.Avatar ConvertToUserAvatar(Avatar avatar)
    {
      if (avatar == null)
        return (Microsoft.VisualStudio.Services.Users.Avatar) null;
      return new Microsoft.VisualStudio.Services.Users.Avatar()
      {
        Image = avatar.Value,
        IsAutoGenerated = avatar.IsAutoGenerated,
        LastModified = avatar.TimeStamp,
        Size = (Microsoft.VisualStudio.Services.Users.AvatarSize) avatar.Size
      };
    }

    public static UserAttribute ConvertToUserAttribute(ProfileAttribute profileAttribute)
    {
      if (profileAttribute == null)
        return (UserAttribute) null;
      return new UserAttribute()
      {
        Name = ProfileCompatHelper.ConvertToUserAttributeName(profileAttribute.Descriptor),
        Value = profileAttribute.Value,
        LastModified = (DateTimeOffset) new DateTime(profileAttribute.TimeStamp.DateTime.Ticks, DateTimeKind.Utc),
        Revision = profileAttribute.Revision
      };
    }

    public static ProfileAttribute ConvertToProfileAttribute(UserAttribute userAttribute)
    {
      if (userAttribute == null)
        return (ProfileAttribute) null;
      ProfileAttribute profileAttribute = new ProfileAttribute();
      profileAttribute.Descriptor = ProfileCompatHelper.ConvertToProfileDescriptor(userAttribute.Name);
      profileAttribute.Value = userAttribute.Value;
      profileAttribute.TimeStamp = userAttribute.LastModified;
      profileAttribute.Revision = userAttribute.Revision > 0 ? userAttribute.Revision : ProfileCompatHelper.ConvertToRevision(userAttribute.LastModified);
      return profileAttribute;
    }

    public static Microsoft.VisualStudio.Services.Profile.Profile ConvertToProfile(
      Guid profileId,
      User user,
      DateTimeOffset avatarTimeStamp,
      bool? contactWithOffers = null,
      IList<UserAttribute> applicationAttributes = null)
    {
      Guid profileId1 = profileId;
      User user1 = user;
      Avatar avatar = new Avatar();
      avatar.TimeStamp = avatarTimeStamp;
      bool? contactWithOffers1 = contactWithOffers;
      IList<UserAttribute> applicationAttributes1 = applicationAttributes;
      return ProfileCompatHelper.ConvertToProfile(profileId1, user1, avatar, contactWithOffers1, applicationAttributes1);
    }

    public static Microsoft.VisualStudio.Services.Profile.Profile ConvertToProfile(
      Guid profileId,
      User user,
      Microsoft.VisualStudio.Services.Users.Avatar avatar = null,
      bool? contactWithOffers = null,
      IList<UserAttribute> applicationAttributes = null)
    {
      Guid profileId1 = profileId;
      User user1 = user;
      Avatar avatar1;
      if (avatar == null)
        avatar1 = new Avatar()
        {
          TimeStamp = user.LastModified
        };
      else
        avatar1 = ProfileCompatHelper.ConvertToProfileAvatar(avatar);
      bool? contactWithOffers1 = contactWithOffers;
      IList<UserAttribute> applicationAttributes1 = applicationAttributes;
      return ProfileCompatHelper.ConvertToProfile(profileId1, user1, avatar1, contactWithOffers1, applicationAttributes1);
    }

    private static Microsoft.VisualStudio.Services.Profile.Profile ConvertToProfile(
      Guid profileId,
      User user,
      Avatar avatar,
      bool? contactWithOffers = null,
      IList<UserAttribute> applicationAttributes = null)
    {
      ArgumentUtility.CheckForNull<Avatar>(avatar, nameof (avatar));
      int num = user.Revision > 0 ? user.Revision : ProfileCompatHelper.ConvertToRevision(user.LastModified);
      Microsoft.VisualStudio.Services.Profile.Profile profile = new Microsoft.VisualStudio.Services.Profile.Profile()
      {
        Id = profileId,
        DisplayName = user.DisplayName,
        PublicAlias = profileId.ToString("D").ToLower(),
        EmailAddress = user.Mail,
        UnconfirmedEmailAddress = user.UnconfirmedMail == null ? user.Mail : user.UnconfirmedMail,
        CountryName = user.Country,
        TermsOfServiceVersion = 1,
        TermsOfServiceAcceptDate = user.DateCreated,
        Revision = num,
        CoreRevision = num,
        TimeStamp = user.LastModified,
        Avatar = avatar
      };
      if (contactWithOffers.HasValue)
        profile.ContactWithOffers = new bool?(contactWithOffers.Value);
      profile.CreatedDateTime = user.DateCreated;
      foreach (CoreProfileAttribute profileAttribute in (IEnumerable<CoreProfileAttribute>) profile.CoreAttributes.Values)
      {
        profileAttribute.Revision = user.Revision;
        profileAttribute.TimeStamp = user.LastModified;
      }
      profile.Avatar.TimeStamp = avatar.TimeStamp;
      if (applicationAttributes != null)
      {
        foreach (UserAttribute applicationAttribute in (IEnumerable<UserAttribute>) applicationAttributes)
          ProfileCompatHelper.AddAttributeToProfile(profile, applicationAttribute);
      }
      return profile;
    }

    public static CreateProfileContext ConvertToProfileContext(CreateUserParameters userParameters)
    {
      Dictionary<string, object> data1 = userParameters.Data;
      object valueOrDefault = data1 != null ? data1.GetValueOrDefault<string, object>("CIData", (object) null) : (object) null;
      IDictionary<string, object> dictionary = valueOrDefault == null || !(valueOrDefault is JObject) ? (IDictionary<string, object>) valueOrDefault : ((JToken) valueOrDefault).ToObject<IDictionary<string, object>>();
      CreateProfileContext profileContext = new CreateProfileContext();
      profileContext.DisplayName = userParameters.DisplayName;
      profileContext.EmailAddress = userParameters.Mail;
      profileContext.CountryName = userParameters.Country;
      profileContext.CIData = dictionary;
      Dictionary<string, object> data2 = userParameters.Data;
      profileContext.HasAccount = (bool) ((data2 != null ? data2.GetValueOrDefault<string, object>("HasAccount", (object) false) : (object) null) ?? (object) false);
      Dictionary<string, object> data3 = userParameters.Data;
      profileContext.PhoneNumber = data3 != null ? (string) data3.GetValueOrDefault<string, object>("PhoneNumber", (object) null) : (string) (object) null;
      return profileContext;
    }

    public static CreateUserParameters ConvertToUserContext(CreateProfileContext context)
    {
      CreateUserParameters userContext = new CreateUserParameters()
      {
        DisplayName = context.DisplayName,
        Mail = context.EmailAddress,
        Country = context.CountryName,
        Data = new Dictionary<string, object>()
      };
      userContext.Data["CIData"] = (object) context.CIData;
      userContext.Data["HasAccount"] = (object) context.HasAccount;
      userContext.Data["PhoneNumber"] = (object) context.PhoneNumber;
      return userContext;
    }

    public static User ConvertToUser(SubjectDescriptor descriptor, Microsoft.VisualStudio.Services.Profile.Profile profile) => new User()
    {
      Descriptor = descriptor,
      Mail = profile.EmailAddress,
      UnconfirmedMail = profile.UnconfirmedEmailAddress,
      DisplayName = profile.DisplayName,
      Country = profile.CountryName,
      Revision = profile.CoreRevision,
      DateCreated = profile.CreatedDateTime,
      LastModified = profile.TimeStamp
    };

    public static AttributeDescriptor ConvertToProfileDescriptor(
      string groupAndAttributeCombinedName)
    {
      int length1 = groupAndAttributeCombinedName.IndexOf('.');
      int length2 = groupAndAttributeCombinedName.IndexOf('.', length1 + 1);
      if (length2 != -1)
      {
        string str = groupAndAttributeCombinedName.Substring(length1 + 1, length2 - length1 - 1);
        if (ProfileCompatHelper.s_acceptedPostFixes.Contains(str))
          return new AttributeDescriptor(groupAndAttributeCombinedName.Substring(0, length2), groupAndAttributeCombinedName.Substring(length2 + 1));
      }
      return new AttributeDescriptor(groupAndAttributeCombinedName.Substring(0, length1), groupAndAttributeCombinedName.Substring(length1 + 1));
    }

    public static string ConvertToUserAttributeName(AttributeDescriptor descriptor)
    {
      int num = descriptor.ContainerName.IndexOf('.');
      if (num != -1)
      {
        string str = descriptor.ContainerName.Substring(num + 1);
        if (!ProfileCompatHelper.s_acceptedPostFixes.Contains(str))
          throw new ProfileException(string.Format("Unexpected attribute group name: {0}", (object) descriptor.ContainerName));
      }
      return descriptor.ContainerName + "." + descriptor.AttributeName;
    }

    public static Exception LogAndConvertToProfileException(
      IVssRequestContext requestContext,
      UserException exception)
    {
      if (exception == null)
        return (Exception) null;
      requestContext.TraceException(109027570, "", "", (Exception) exception);
      ProfileCompatHelper.ProfileExceptionMapping exceptionMapping;
      if (!ProfileCompatHelper.s_userToProfileExceptionMapping.TryGetValue(exception.GetType(), out exceptionMapping))
        return (Exception) exception;
      string str = exceptionMapping.Message ?? exception.Message;
      return (Exception) Activator.CreateInstance(exceptionMapping.ProfileExceptionType, (object) str, (object) exception);
    }

    public static Exception LogAndConvertToUserException(
      IVssRequestContext requestContext,
      ProfileException exception)
    {
      if (exception == null)
        return (Exception) null;
      requestContext.TraceException(3081153, "", "", (Exception) exception);
      Type type;
      if (!ProfileCompatHelper.s_profileToUserExceptionMapping.TryGetValue(exception.GetType(), out type))
        return (Exception) exception;
      return (Exception) Activator.CreateInstance(type, (object) exception.Message, (object) exception);
    }

    public static UpdateUserParameters ConvertToUpdateUserParameters(
      SubjectDescriptor descriptor,
      Microsoft.VisualStudio.Services.Profile.Profile profile)
    {
      return ProfileCompatHelper.ConvertToUpdateUserParameters(descriptor, (IEnumerable<CoreProfileAttribute>) profile.CoreAttributes.Values);
    }

    public static UpdateUserParameters ConvertToUpdateUserParameters(
      SubjectDescriptor descriptor,
      IEnumerable<CoreProfileAttribute> attributes)
    {
      UpdateUserParameters updateUserParameters = new UpdateUserParameters();
      updateUserParameters.Descriptor = descriptor;
      foreach (CoreProfileAttribute attribute in attributes)
      {
        if (VssStringComparer.AttributesDescriptor.Equals(attribute.Descriptor.AttributeName, "DisplayName"))
          updateUserParameters.DisplayName = (string) attribute.Value;
        else if (VssStringComparer.AttributesDescriptor.Equals(attribute.Descriptor.AttributeName, "EmailAddress"))
          updateUserParameters.Mail = (string) attribute.Value;
        else if (VssStringComparer.AttributesDescriptor.Equals(attribute.Descriptor.AttributeName, "UnconfirmedEmailAddress"))
          updateUserParameters.UnconfirmedMail = (string) attribute.Value;
        else if (VssStringComparer.AttributesDescriptor.Equals(attribute.Descriptor.AttributeName, "CountryName"))
          updateUserParameters.Country = (string) attribute.Value;
      }
      return updateUserParameters;
    }

    public static Microsoft.VisualStudio.Services.Profile.Profile ConvertToProfileForUpdate(
      Guid profileId,
      UpdateUserParameters updateParameters)
    {
      Microsoft.VisualStudio.Services.Profile.Profile profileForUpdate = new Microsoft.VisualStudio.Services.Profile.Profile();
      profileForUpdate.Id = profileId;
      foreach (KeyValuePair<string, object> property in (IEnumerable<KeyValuePair<string, object>>) updateParameters.Properties)
      {
        if (property.Key == "DisplayName")
          profileForUpdate.DisplayName = (string) property.Value;
        else if (property.Key == "Mail")
          profileForUpdate.EmailAddress = (string) property.Value;
        else if (property.Key == "UnconfirmedMail")
          profileForUpdate.UnconfirmedEmailAddress = (string) property.Value;
        else if (property.Key == "Country")
          profileForUpdate.CountryName = (string) property.Value;
      }
      return profileForUpdate;
    }

    private static void AddAttributeToProfile(Microsoft.VisualStudio.Services.Profile.Profile profile, UserAttribute attribute)
    {
      ProfileAttribute profileAttribute = ProfileCompatHelper.ConvertToProfileAttribute(attribute);
      if (profile.ApplicationContainer == null)
        profile.ApplicationContainer = new AttributesContainer(profileAttribute.Descriptor.ContainerName);
      profile.ApplicationContainer.Attributes.TryAdd<string, ProfileAttribute>(profileAttribute.Descriptor.AttributeName, profileAttribute);
      if (profileAttribute.Revision <= profile.ApplicationContainer.Revision)
        return;
      profile.ApplicationContainer.Revision = profileAttribute.Revision;
    }

    internal static int ConvertToRevision(DateTimeOffset lastModified) => lastModified < ProfileCompatHelper.c_startTimeForAttributeMath ? 0 : (int) lastModified.Subtract(ProfileCompatHelper.c_startTimeForAttributeMath).TotalSeconds;

    private struct ProfileExceptionMapping
    {
      public ProfileExceptionMapping(Type profileExceptionType, string message = null)
      {
        this.ProfileExceptionType = profileExceptionType;
        this.Message = message;
      }

      public Type ProfileExceptionType { get; }

      public string Message { get; }
    }
  }
}
