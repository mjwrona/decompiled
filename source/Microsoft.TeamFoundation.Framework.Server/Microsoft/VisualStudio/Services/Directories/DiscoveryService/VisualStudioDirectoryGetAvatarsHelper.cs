// Decompiled with JetBrains decompiler
// Type: Microsoft.VisualStudio.Services.Directories.DiscoveryService.VisualStudioDirectoryGetAvatarsHelper
// Assembly: Microsoft.TeamFoundation.Framework.Server, Version=19.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 07453D77-2935-488F-B470-3D01F1673D9B
// Assembly location: C:\Program Files\Azure DevOps Server 2022\Application Tier\Web Services\bin\Plugins\Microsoft.TeamFoundation.Framework.Server.dll

using Microsoft.TeamFoundation.Framework.Server;
using Microsoft.VisualStudio.Services.Identity;
using Microsoft.VisualStudio.Services.Users;
using Microsoft.VisualStudio.Services.Users.Server;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace Microsoft.VisualStudio.Services.Directories.DiscoveryService
{
  internal static class VisualStudioDirectoryGetAvatarsHelper
  {
    private static readonly string[] ImageDataProperties = new string[2]
    {
      "Microsoft.TeamFoundation.Identity.Image.Id",
      "Microsoft.TeamFoundation.Identity.Image.Data"
    };

    internal static DirectoryInternalGetAvatarsResponse GetAvatars(
      IVssRequestContext context,
      DirectoryInternalGetAvatarsRequest request)
    {
      IDictionary<DirectoryEntityIdentifier, Guid> vsids = VisualStudioDirectoryVsidResolver.Instance.ResolveVsids(context, request.ObjectIds);
      return new DirectoryInternalGetAvatarsResponse()
      {
        Results = (IDictionary<DirectoryEntityIdentifier, DirectoryInternalGetAvatarResult>) request.ObjectIds.ToDictionary<DirectoryEntityIdentifier, DirectoryEntityIdentifier, DirectoryInternalGetAvatarResult>((Func<DirectoryEntityIdentifier, DirectoryEntityIdentifier>) (objectId => objectId), (Func<DirectoryEntityIdentifier, DirectoryInternalGetAvatarResult>) (objectId =>
        {
          if (objectId.Version != 1)
            return (DirectoryInternalGetAvatarResult) null;
          if (!(objectId is DirectoryEntityIdentifierV1 entityIdentifierV1_2))
            return (DirectoryInternalGetAvatarResult) null;
          Guid vsid = vsids[objectId];
          if (vsid == Guid.Empty)
            return (DirectoryInternalGetAvatarResult) null;
          return "group".Equals(entityIdentifierV1_2.Type) || context.ExecutionEnvironment.IsOnPremisesDeployment ? VisualStudioDirectoryGetAvatarsHelper.GetAvatarFromIdentityService(context, vsid) : VisualStudioDirectoryGetAvatarsHelper.GetAvatarForVsdUserFromUserService(context, vsid);
        }))
      };
    }

    private static DirectoryInternalGetAvatarResult GetAvatarForVsdUserFromUserService(
      IVssRequestContext context,
      Guid vsid)
    {
      IUserService service = context.GetService<IUserService>();
      try
      {
        Avatar avatar = service.GetAvatar(context, vsid, AvatarSize.Large);
        return new DirectoryInternalGetAvatarResult()
        {
          Image = avatar.Image
        };
      }
      catch (UserDoesNotExistException ex)
      {
        throw new DirectoryDiscoveryAvatarNotFoundException(string.Format("A user does not exist for vsid:{0}.", (object) vsid), (Exception) ex);
      }
    }

    private static DirectoryInternalGetAvatarResult GetAvatarFromIdentityService(
      IVssRequestContext context,
      Guid vsid)
    {
      DirectoryInternalGetAvatarResult fromIdentityService = new DirectoryInternalGetAvatarResult()
      {
        IsAutoGenerated = false,
        Image = (byte[]) null
      };
      IdentityService service = context.GetService<IdentityService>();
      string[] imageDataProperties = VisualStudioDirectoryGetAvatarsHelper.ImageDataProperties;
      IVssRequestContext requestContext = context;
      Guid[] identityIds = new Guid[1]{ vsid };
      string[] propertyNameFilters = imageDataProperties;
      IList<Microsoft.VisualStudio.Services.Identity.Identity> identityList = service.ReadIdentities(requestContext, (IList<Guid>) identityIds, QueryMembership.None, (IEnumerable<string>) propertyNameFilters);
      if (identityList == null || identityList.Count == 0 || identityList[0] == null)
        return fromIdentityService;
      Microsoft.VisualStudio.Services.Identity.Identity identity = identityList[0];
      bool flag = false;
      if (string.IsNullOrEmpty(identity.DisplayName))
        return fromIdentityService;
      object obj1;
      object obj2;
      byte[] numArray;
      if (!identity.TryGetProperty("Microsoft.TeamFoundation.Identity.Image.Id", out obj1) || obj1 == null || !identity.TryGetProperty("Microsoft.TeamFoundation.Identity.Image.Data", out obj2) || obj2 == null)
      {
        try
        {
          numArray = AvatarUtils.GenerateAvatar(identity.DisplayName, ImageSize.Large, AvatarImageFormat.Png, identity.IsContainer);
        }
        catch (Exception ex)
        {
          context.TraceException(15001010, TraceLevel.Warning, "VisualStudio.Services.DirectoryDiscovery", "Service", ex);
          return fromIdentityService;
        }
        flag = true;
      }
      else
        numArray = obj2 as byte[];
      return new DirectoryInternalGetAvatarResult()
      {
        IsAutoGenerated = flag,
        Image = numArray
      };
    }
  }
}
