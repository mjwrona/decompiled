// Decompiled with JetBrains decompiler
// Type: Microsoft.TeamFoundation.Framework.Server.FrameworkServerConstants
// Assembly: Microsoft.TeamFoundation.Framework.Server, Version=19.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 07453D77-2935-488F-B470-3D01F1673D9B
// Assembly location: C:\Program Files\Azure DevOps Server 2022\Application Tier\Web Services\bin\Plugins\Microsoft.TeamFoundation.Framework.Server.dll

using System;
using System.ComponentModel;

namespace Microsoft.TeamFoundation.Framework.Server
{
  [EditorBrowsable(EditorBrowsableState.Never)]
  public static class FrameworkServerConstants
  {
    internal static readonly string ApplicationRoot = "/Configuration/Application";
    internal static readonly string CollectionsRoot = "/Configuration/Collections";
    internal static readonly string RegistrationRoot = "/Service/Registration";
    internal static readonly string DatabaseLabel = "/Configuration/Settings/DatabaseLabel";
    internal static readonly string DatabasePrefix = "/Configuration/Settings/DatabasePrefix";
    internal static readonly string RetainIisLogsHours = "/Configuration/Settings/RetainIisLogsHours";
    internal static readonly string RetainHealthPerfCountersInHours = "/Configuration/Settings/HealthPerfCountersInHours";
    internal static readonly string AccountDatabaseLoginPrefix = "/Configuration/Settings/AccountDatabaseLoginPrefix";
    internal static readonly string IsSingletonService = "/Configuration/Settings/IsSingletonService";
    internal static readonly string DatabaseRoot = "/Configuration/Database";
    internal static readonly string DefaultApplicationTierPortPath = "/Configuration/ApplicationTier/DefaultPort";
    public static readonly string ApplicationTierSiteBindings = "/Configuration/ApplicationTier/SiteBindings";
    public static readonly string DefaultApplicationTierVDirPath = "/Configuration/ApplicationTier/DefaultVDir";
    public static readonly string SslOnly = "/Configuration/ApplicationTier/SslOnly";
    internal static readonly string AppConcurrentRequestLimit = "/Configuration/ApplicationTier/appConcurrentRequestLimit";
    internal static readonly string RequestQueueLength = "/Configuration/ApplicationTier/RequestQueueLength";
    internal static readonly string CloseHttpConnectionInterval = "/Configuration/ApplicationTier/CloseHttpConnectionInterval";
    internal static readonly string CloseHttpConnectionExpirationTime = "/Configuration/ApplicationTier/CloseHttpConnectionExpirationTime";
    internal static readonly string VipSwapTimeInSeconds = "/Configuration/ApplicationTier/VipSwapTimeInSeconds";
    internal static readonly string GoingOfflineTimeInSeconds = "/Configuration/ApplicationTier/GoingOfflineTimeInSeconds";
    internal static readonly int GoingOfflineTimeInSecondsDefaultValue = 0;
    internal static readonly string VipSwapTimeStamp = "/Configuration/ApplicationTier/VipSwapTimeStamp";
    internal static readonly string PerformingVipSwapBack = "/Configuration/ApplicationTier/PerformingVipSwapBack";
    internal static readonly int VipSwapTimeInSecondsDefaultValue = 60;
    internal static readonly string VipSwapExponentiationFactor = "/Configuration/ApplicationTier/VipSwapConnectionCloseExponentiationFactor";
    internal static readonly string PersistentCloseHttpConnectionInterval = "/Configuration/ApplicationTier/PersistentCloseHttpConnectionInterval";
    internal static readonly string MaxConnectionTimeInSeconds = "/Configuration/ApplicationTier/MaxConnectionTimeInSeconds";
    internal static readonly string ApplicationPool = "/Configuration/ApplicationTier/applicationPool/";
    internal static readonly string MaxConcurrentRequestsPerCPU = FrameworkServerConstants.ApplicationPool + "maxConcurrentRequestsPerCPU";
    internal static readonly string MaxConcurrentThreadsPerCPU = FrameworkServerConstants.ApplicationPool + "maxConcurrentThreadsPerCPU";
    internal static readonly string RequestQueueLimit = FrameworkServerConstants.ApplicationPool + "requestQueueLimit";
    internal static readonly string Log404NotFoundErrors = "/Configuration/ApplicationTier/Log404NotFoundErrors";
    internal static readonly string GroupMappingPath = "/Configuration/GroupMapping";
    internal static readonly string GroupConfigurationPath = "/Configuration/Group";
    internal static readonly string InstanceConfigurationPath = "/Configuration/Instance";
    internal static readonly string IsProductionEnvironment = "/Configuration/IsProductionEnvironment";
    internal static readonly string FileCacheRootSegment = "CacheRoot";
    internal static readonly string CollectionServers = "/Configuration/CollectionDatabaseServers";
    internal static readonly string UseStrictTransportSecurity = FrameworkServerConstants.ApplicationRoot + "/Framework/UseStrictTransportSecurity";
    internal static readonly string CircuitBreakerRegistryRootPath = "/Configuration/CircuitBreaker";
    internal static readonly string AllowPublicProjectsRegistryPath = "/Configuration/AllowPublicProjects";
    public static readonly string FileServiceRegistryRootPath = "/Service/FileService";
    public static readonly string FileServiceRemoteBlobProvider = FrameworkServerConstants.FileServiceRegistryRootPath + "/RemoteBlobProvider";
    internal static readonly string FileServiceMinRemoteBlobSize = FrameworkServerConstants.FileServiceRegistryRootPath + "/MinRemoteBlobSize";
    internal static readonly string FileServiceMaxRetryCount = FrameworkServerConstants.FileServiceRegistryRootPath + "/MaxRetryCount";
    internal static readonly string FileServiceMaxPatchableSize = FrameworkServerConstants.FileServiceRegistryRootPath + "/MaxPatchableSize";
    internal static readonly string FileServiceMaxPendingDeltas = FrameworkServerConstants.FileServiceRegistryRootPath + "/MaxPendingDeltas";
    internal static readonly string FileServiceTempFileSizeThreshold = FrameworkServerConstants.FileServiceRegistryRootPath + "/TempFileSizeThreshold";
    internal static readonly string FileServiceRemoteRetentionPeriod = FrameworkServerConstants.FileServiceRegistryRootPath + "/RemoteRetentionPeriod";
    internal static readonly string FileServiceSqlRetentionPeriod = FrameworkServerConstants.FileServiceRegistryRootPath + "/SqlRetentionPeriod";
    internal static readonly string FileServiceDeletionChunkSize = FrameworkServerConstants.FileServiceRegistryRootPath + "/DeletionChunkSize";
    public static readonly string FileServiceAccountName = FrameworkServerConstants.FileServiceRegistryRootPath + "/AccountName";
    public static readonly string FileServiceAccountKey = FrameworkServerConstants.FileServiceRegistryRootPath + "/AccountKey";
    internal static readonly string FileServiceAlwaysValidateUploads = FrameworkServerConstants.FileServiceRegistryRootPath + "/AlwaysValidateUploads";
    internal static readonly string FileServiceDisableCRCCheck = FrameworkServerConstants.FileServiceRegistryRootPath + "/DisableCRCCheck";
    internal static readonly string FileServiceHttpTimeout = FrameworkServerConstants.FileServiceRegistryRootPath + "/HttpTimeout";
    internal static readonly string FileServiceDelayFileIdRegistryUpdate = FrameworkServerConstants.FileServiceRegistryRootPath + "/DelayFileIdRegistryUpdate";
    public static readonly string FileServicePrimaryStorageAccountNames = FrameworkServerConstants.FileServiceRegistryRootPath + "/PrimaryStorageAccountNames";
    public static readonly string FileServiceSecondaryStorageAccountNames = FrameworkServerConstants.FileServiceRegistryRootPath + "/SecondaryStorageAccountNames";
    public static readonly string FileServiceOwnerIdsUsingSecondaryRange = FrameworkServerConstants.FileServiceRegistryRootPath + "/OwnerIdsUsingSecondaryRange";
    internal static readonly string InvalidPadding = "Padding is invalid and cannot be removed.";
    internal static readonly string UnexpectedEndOfFile = "Unexpected end of file.";
    internal static readonly string NotAValidBase64Sequence = "not a valid Base64 sequence.";
    internal static readonly string NotAValidBase64String = "not a valid Base-64 string";
    public static readonly string FileContainerServiceRegistryRootPath = "/Service/FileContainerService";
    public static readonly string FileContainerServiceSlowRequestThreshold = FrameworkServerConstants.FileContainerServiceRegistryRootPath + "/SlowRequestThreshold";
    public static readonly string FileContainerServiceBlobReferenceDeletionChunkSize = FrameworkServerConstants.FileContainerServiceRegistryRootPath + "/BlobReferenceDeletionChunkSize";
    public static readonly string FileContainerServiceBlobReferenceSqlRetentionPeriodInDays = FrameworkServerConstants.FileContainerServiceRegistryRootPath + "/BlobReferenceSqlRetentionPeriodInDays";
    public static readonly string FileContainerServiceBlobReferenceMaxBatchCount = FrameworkServerConstants.FileContainerServiceRegistryRootPath + "/BlobReferenceMaxBatchCount";
    public static readonly string FileContainerServiceBlobReferenceMaxParallelRootDeletions = FrameworkServerConstants.FileContainerServiceRegistryRootPath + "/BlobReferenceMaxParallelRootDeletions";
    public static readonly string FileContainerServiceBlobStitchingBoundedCapacity = FrameworkServerConstants.FileContainerServiceRegistryRootPath + "/BlobStitchingBoundedCapacity";
    public static readonly string FileContainerServiceBlobStitchingParallelism = FrameworkServerConstants.FileContainerServiceRegistryRootPath + "/BlobStitchingParallelism";
    internal static readonly string[] JobAgentProcessNames = new string[2]
    {
      "TfsJobAgent.exe",
      "WaWorkerHost.exe"
    };
    internal static readonly string JobServiceRegistryRootPath = "/Configuration/JobService";
    internal static readonly string MaxJobsPerProcessorPath = FrameworkServerConstants.JobServiceRegistryRootPath + "/MaxJobsPerProcessor";
    internal static readonly string MaxJobsTotalPath = FrameworkServerConstants.JobServiceRegistryRootPath + "/MaxJobsTotal";
    internal static readonly string JobStopTimeLimitPath = FrameworkServerConstants.JobServiceRegistryRootPath + "/StopTimeLimit";
    internal static readonly string MaxJobResultMessageLengthPath = FrameworkServerConstants.JobServiceRegistryRootPath + "/MaxResultMessageLength";
    internal static readonly string UnregisterLocalInactiveProcessesPath = FrameworkServerConstants.JobServiceRegistryRootPath + "/UnregisterLocalInactiveProcesses";
    internal static readonly string JobHistoryCleanupAge = FrameworkServerConstants.JobServiceRegistryRootPath + "/MaxAgeOfHistoryEntries";
    internal static readonly string MinimumJobInterval = FrameworkServerConstants.JobServiceRegistryRootPath + "/MinimumInterval";
    internal static readonly string DefaultDelayedJobDelay = FrameworkServerConstants.JobServiceRegistryRootPath + "/DefaultDelayedJobDelay";
    internal static readonly string JobAgentRetryOnExceptionDelaySeconds = FrameworkServerConstants.JobServiceRegistryRootPath + "/RetryOnExceptionDelaySeconds";
    internal static readonly string SlowQueueThresholdMilliseconds = FrameworkServerConstants.JobServiceRegistryRootPath + "/SlowQueueThresholdMilliseconds";
    internal static readonly string FailureIgnoreDormancySeconds = FrameworkServerConstants.JobServiceRegistryRootPath + "/FailureIgnoreDormancySeconds";
    internal static readonly string AllowIgnoreDormancy = FrameworkServerConstants.JobServiceRegistryRootPath + "/AllowIgnoreDormancy";
    internal static readonly string LogSuccessfulJobs = FrameworkServerConstants.JobServiceRegistryRootPath + "/LogSuccessfulJobs";
    internal static readonly string AlertsIgnoreJobExtension = FrameworkServerConstants.JobServiceRegistryRootPath + "/AlertsIgnoreJobExtension";
    internal static readonly string JobQueueMonitoringInterval = FrameworkServerConstants.JobServiceRegistryRootPath + "/JobQueueMonitoringInterval";
    internal static readonly string MaxJobScheduleOffsetDays = FrameworkServerConstants.JobServiceRegistryRootPath + "/MaxJobScheduleOffsetDays";
    internal static readonly string JobTemplateStaggeringTimeout = FrameworkServerConstants.JobServiceRegistryRootPath + "/JobTemplateStaggeringTimeout";
    internal static readonly string JobTemplateStaggeringBatchSize = FrameworkServerConstants.JobServiceRegistryRootPath + "/JobTemplateStaggeringBatchSize";
    internal static readonly string JobTemplateStaggeringMaxBatches = FrameworkServerConstants.JobServiceRegistryRootPath + "/JobTemplateStaggeringMaxBatches";
    internal static readonly string ScaleOutJobAgentMaxAgeInMinutes = FrameworkServerConstants.JobServiceRegistryRootPath + "/ScaleOutJobAgentMaxAgeInMinutes";
    internal const int ScaleOutJobAgentMaxAgeInMinutesDefault = 5;
    internal static readonly string ScaleOutJobAgentMaxJobsInQueue = FrameworkServerConstants.JobServiceRegistryRootPath + "/ScaleOutJobAgentMaxJobsInQueue";
    internal const int ScaleOutJobAgentMaxJobsInQueueDefault = 10000;
    internal static readonly string JobTemplateStaggeringRootPath = "/Plugins/JobTemplateStaggeringJob";
    internal static readonly string JobTemplateStaggeringSequenceId = FrameworkServerConstants.JobServiceRegistryRootPath + "/MaxSequenceId";
    internal static readonly string JobTemplateStaggeringWatermark = FrameworkServerConstants.JobServiceRegistryRootPath + "/HostIdWatermark";
    internal static readonly string JobReportingRegistryRoot = "/Configuration/JobServiceReporting";
    internal static readonly string JobReportingBackInTimeHoursRegistryPath = FrameworkServerConstants.JobReportingRegistryRoot + "/ReportingWindowHours";
    internal static readonly string JobReportingImageScaleSizeRegPath = FrameworkServerConstants.JobReportingRegistryRoot + "/ImageScaleSize";
    internal static readonly string JobReportingNumberOfJobsToShowInChartRegistryPath = FrameworkServerConstants.JobReportingRegistryRoot + "/NumberOfJobsToShowInChart";
    internal static readonly string JobReportingMaxNumberOfHistoryResultsRegistryPath = FrameworkServerConstants.JobReportingRegistryRoot + "/MaxNumberOfHistoryResults";
    internal static readonly string JobReportingEnable3dChartsRegistryPath = FrameworkServerConstants.JobReportingRegistryRoot + "/Enable3dCharts";
    internal static readonly string MailServiceRegistryRootPath = "/Service/MailService";
    internal static readonly string SendMailJobDeplay = FrameworkServerConstants.MailServiceRegistryRootPath + "/JobDelay";
    internal static readonly string SendMailLogLevel = FrameworkServerConstants.MailServiceRegistryRootPath + "/LogLevel";
    internal static readonly string SendMailLogAllExceptions = FrameworkServerConstants.MailServiceRegistryRootPath + "/LogAllExceptions";
    internal static readonly string SendMailMaxRetryAttempts = FrameworkServerConstants.MailServiceRegistryRootPath + "/MaxRetryAttempts";
    internal static readonly string SendMailRetryInterval = FrameworkServerConstants.MailServiceRegistryRootPath + "/RetryInterval";
    internal static readonly string SendMailLastRetry = FrameworkServerConstants.MailServiceRegistryRootPath + "/LastRetry";
    internal static readonly string SendMailMaxEmailBodySizeInBytes = FrameworkServerConstants.MailServiceRegistryRootPath + "/MaxEmailBodySizeInBytes";
    internal static readonly string SendMailMaxExecutionTime = FrameworkServerConstants.MailServiceRegistryRootPath + "/SendMailMaxExecutionTime";
    internal static readonly string SendMailTimeoutMultiple = FrameworkServerConstants.MailServiceRegistryRootPath + "/SendMailTimeoutMultiple";
    public static readonly string BasicAuthServiceRegistryPathRoot = "/Service/BasicAuthService";
    public static readonly string BasicAuthMaxFailedLogonAttempt = FrameworkServerConstants.BasicAuthServiceRegistryPathRoot + "/MaxFailedLogonAttempt";
    public static readonly string BasicAuthFailedLogonTimeout = FrameworkServerConstants.BasicAuthServiceRegistryPathRoot + "/FailedLogonTimeout";
    public static readonly string BasicAuthPasswordChangesLimit = FrameworkServerConstants.BasicAuthServiceRegistryPathRoot + "/PasswordChangesLimit";
    public static readonly string BasicAuthPasswordChangesInterval = FrameworkServerConstants.BasicAuthServiceRegistryPathRoot + "/PasswordChangesInterval";
    public static readonly string BasicAuthEnabledByServiceHost = FrameworkServerConstants.BasicAuthServiceRegistryPathRoot + "/Enabled";
    internal static readonly string LocationServiceRegistryPathRoot = "/Service/Location";
    internal static readonly string LocationClientCacheTimeToLive = FrameworkServerConstants.LocationServiceRegistryPathRoot + "/ClientCacheTimeToLive";
    internal static readonly RegistryQuery LocationServiceLoadSemaphore = (RegistryQuery) (FrameworkServerConstants.LocationServiceRegistryPathRoot + "/LoadSemaphore");
    internal static readonly string ClientProviderPathRoot = "/Service/ClientProvider";
    internal static readonly string ClientProviderHttpClientTimeToLive = FrameworkServerConstants.ClientProviderPathRoot + "/ClientTimeToLive";
    internal static readonly string DataDirectoryRegistryPath = "/Configuration/Application/DataDirectory";
    internal static readonly string SqlNotificationPollingTimeoutRegistryPath = "/Service/SqlNotification/Settings/PollingTimeout";
    internal static readonly string SqlNotificationPublishAlertHeartRegistryPath = "/Service/SqlNotification/Settings/PublishAlertHeartbeat";
    public static readonly string SqlNotificationAggressivelyLogHungNotifications = "/Service/SqlNotification/Settings/AggressivelyLogHungNotifications";
    internal static readonly string DefaultSqlConnectionStringPath = "/Service/Framework/Settings/DefaultSqlConnectionString";
    public static readonly string AccountPrecreationRootPath = "/Configuration/Account/AccountPrecreationJob";
    public static readonly string AccountPrecreationPriorityClass = FrameworkServerConstants.AccountPrecreationRootPath + "/PriorityClass";
    public static readonly string AccountPrecreationPriorityLevel = FrameworkServerConstants.AccountPrecreationRootPath + "/PriorityLevel";
    public static readonly string AccountPrecreationJobMinPoolSizePath = FrameworkServerConstants.AccountPrecreationRootPath + "/MinPoolSize";
    public static readonly string AccountPrecreationJobMaxPoolSizePath = FrameworkServerConstants.AccountPrecreationRootPath + "/MaxPoolSize";
    public static readonly string AccountPrecreationJobMinPoolSizePathLcid = FrameworkServerConstants.AccountPrecreationRootPath + "/MinPoolSize/{0}";
    public static readonly string AccountPrecreationJobMaxPoolSizePathLcid = FrameworkServerConstants.AccountPrecreationRootPath + "/MaxPoolSize/{0}";
    public static readonly string MaxCreationJobsAtOnce = "/MaxCreationJobsAtOnce";
    internal static readonly string HostingAccountCreateAssignJobPriorityClass = "/Configuration/Hosting/AccountOnDemandCreateAssignJob/PriorityClass";
    internal static readonly string HostingAccountCreateAssignJobPriorityLevel = "/Configuration/Hosting/AccountOnDemandCreateAssignJob/PriorityLevel";
    internal static readonly string BlobSegmentedMaxSizeOverride = "/Configuration/Hosting/Blob/SegmentedMaxSizeOverride";
    internal static readonly string BlobCopyPendingTimeoutOverride = "/Configuration/Hosting/Blob/BlobCopyPendingTimeoutOverride";
    public static readonly string NotificationRootPath = "/Service/Integration/Settings";
    public static readonly string IgnoreSubscriptionsRootPath = FrameworkServerConstants.NotificationRootPath + "/IgnoreSubscriptions";
    public static readonly string NotificationJobDelay = FrameworkServerConstants.NotificationRootPath + "/NotificationJobDelay";
    public static readonly string NotificationMaxEventLength = FrameworkServerConstants.NotificationRootPath + "/NotificationMaxEventLength";
    public static readonly string MaxServiceHooksNotificationsPerPublish = FrameworkServerConstants.NotificationRootPath + "/MaxServiceHooksNotificationsPerPublish";
    internal static readonly string SmtpPasswordLookupKey = "SmtpPassword";
    public static readonly string EmailTemplates = FrameworkServerConstants.NotificationRootPath + "/EmailTemplates";
    public static readonly string AuditExpirationTimeForDeliveredEvents = FrameworkServerConstants.NotificationRootPath + "/ExpirationTimeForDeliveredEvents";
    public static readonly string AuditNoOptedOutDeliveriesFeatureFlag = "Microsoft.VisualStudio.Services.Audit.NoOptedOutDeliveries";
    public static readonly string AuditOptInCacheTTL = FrameworkServerConstants.NotificationRootPath + "/AuditOptInCacheTTL";
    internal static readonly string ServicingCleanupRoot = "/Configuration/Hosting/ServicingCleanupJob";
    internal static readonly string ServicingCleanupRetainSuccessfulJobLogsHours = FrameworkServerConstants.ServicingCleanupRoot + "/RetainSuccessfulJobLogsHours";
    internal static readonly string ServicingCleanupRetainFailedJobLogsHours = FrameworkServerConstants.ServicingCleanupRoot + "/RetainFailedJobLogsHours";
    public static readonly string ServicingCleanupRetainDeletedPartitionHours = FrameworkServerConstants.ServicingCleanupRoot + "/RetainDeletedPartitionHours";
    internal static readonly string PreServiceBinariesOperationsPrefix = "pre";
    internal static readonly string PostPartitionDbsOperationsPrefix = "post";
    internal static readonly string FailedDatabaseCleanupRoot = "/Configuration/Database/CleanupFailedDatabaseJob";
    internal static readonly string FailedDatabaseRetainHours = FrameworkServerConstants.FailedDatabaseCleanupRoot + "/FailedDatabaseRetainHours";
    internal static readonly string HostMoveRoot = "/Configuration/Hosting/HostMove";
    internal static readonly string HostMoveMinDormancyInMinutes = FrameworkServerConstants.HostMoveRoot + "/MinDormancyInMinutes";
    internal static readonly string HostMoveMaxParallelism = FrameworkServerConstants.HostMoveRoot + "/MaxParallelism";
    public static readonly string HostMoveNumberOfRetries = FrameworkServerConstants.HostMoveRoot + "/NumberOfRetries";
    public static readonly string HostMoveBatchSize = FrameworkServerConstants.HostMoveRoot + "/BatchSize";
    public static readonly string HostMoveCCIBatchSize = FrameworkServerConstants.HostMoveRoot + "/CCIBatchSize";
    public static readonly string HostMoveFilteredCopyRoot = FrameworkServerConstants.HostMoveRoot + "/FilteredCopy";
    public static readonly string HostMoveMaxTableCopyParallelism = FrameworkServerConstants.HostMoveRoot + "/HostMoveMaxTableCopyParallelism";
    public static readonly string HostMoveFlushNotificationQueueTimeout = FrameworkServerConstants.HostMoveRoot + "/HostMoveFlushNotificationQueueTimeout";
    internal static readonly string HostMigrateRoot = "/Configuration/Hosting/HostMigrate";
    public static readonly string HostMigrateRequestQueueEnabled = FrameworkServerConstants.HostMigrateRoot + "/Queue/Enabled";
    internal static readonly string HostMigrateMinDormancyInMinutes = FrameworkServerConstants.HostMigrateRoot + "/MinDormancyInMinutes";
    internal static readonly string HostMigrateBlockNewMigrationRequests = FrameworkServerConstants.HostMigrateRoot + "/BlockNewMigrationRequests";
    internal static readonly string HostMigrateStrongboxSuppressPedanticVerification = FrameworkServerConstants.HostMigrateRoot + "/Strongbox/SuppressPedanticVerification";
    internal static readonly string HostMigrateJobRetryFailureTimeInterval = FrameworkServerConstants.HostMigrateRoot + "/JobRetryFailureTimeInterval";
    internal static readonly string HostMigrateJobRetryFailureAttempts = FrameworkServerConstants.HostMigrateRoot + "/JobMaxRetryFailureAttempts";
    internal static readonly string HostMigrationMaxConcurrentMigrations = FrameworkServerConstants.HostMigrateRoot + "/MaxConcurrentMigrations";
    internal static readonly string HostMigrationUsePerTargetConcurrencyLimits = FrameworkServerConstants.HostMigrateRoot + "/UsePerTargetConcurrencyLimits";
    internal static readonly string HostMigrationSegmentSize = FrameworkServerConstants.HostMigrateRoot + "/SegmentSize";
    internal static readonly string HostMigrationMaxSegmentsPerIteration = FrameworkServerConstants.HostMigrateRoot + "/MaxSegmentsPerIteration";
    internal static readonly string HostMigrationMaxConcurrentMigrationsPerTarget = FrameworkServerConstants.HostMigrateRoot + "/MaxConcurrentMigrationsPerTarget";
    internal static readonly string HostMigrationMaxConcurrentMigrationsPerTargetOverride = FrameworkServerConstants.HostMigrateRoot + "/MaxConcurrentMigrationsPerTargetOverride";
    internal static readonly string HostMigrationStorageStrongBoxDrawer = "HostMigrationStorage";
    internal static readonly string HostMigrationStorageMigrationStrongBoxItem = "SM-{0}";
    internal static readonly string HostMigrationShardingInfoStrongBoxItem = "SI-{0}";
    internal static readonly string HostMigrationStorageMigrationEntryCountStrongBoxItem = "SM-Count-{0}";
    internal static readonly string HostMigrationShardingInfoEntryCountStrongBoxItem = "SI-Count-{0}";
    internal static readonly string HostMigrationJobQueueStrongBoxDrawer = "HostMigrationJobQueue";
    internal static readonly string HostMigrationJobQueueStrongBoxItem = "JQ-{0}";
    internal static readonly string HostMigrationJobQueueEntryCountStrongBoxItem = "JQ-Count-{0}";
    internal static readonly string GeoreplicationMigrationStatusReason = "Geo-replication for migration";
    internal static readonly string ConsiderMigratingDatabasesOnline = FrameworkServerConstants.HostMigrateRoot + "/ConsiderMigratingDatabasesOnline";
    internal static readonly string ScaleUnitSplitRoot = "/Configuration/Hosting/ScaleUnitSplit";
    internal static readonly string ScaleUnitSplitSourceDatabaseId = FrameworkServerConstants.ScaleUnitSplitRoot + "/SourceDatabaseId";
    internal static readonly string ScaleUnitSplitTargetDatabaseId = FrameworkServerConstants.ScaleUnitSplitRoot + "/TargetDatabaseId";
    internal static readonly string ScaleUnitSplitTargetInstanceName = FrameworkServerConstants.ScaleUnitSplitRoot + "/TargetInstanceName";
    internal static readonly string ScaleUnitSplitMaxHostsPerIteration = FrameworkServerConstants.ScaleUnitSplitRoot + "/MaxHostsPerIteration";
    internal static readonly string ScaleUnitSplitStorageOnly = FrameworkServerConstants.ScaleUnitSplitRoot + "/StorageOnly";
    internal static readonly string ScaleUnitSplitHostsToSkip = FrameworkServerConstants.ScaleUnitSplitRoot + "/HostsToSkip";
    internal static readonly string ScaleUnitSplitHostsToTarget = FrameworkServerConstants.ScaleUnitSplitRoot + "/HostsToTarget";
    internal static readonly string ScaleUnitSplitMostRecentOrchestrationBatchJobQueuedHostCount = FrameworkServerConstants.ScaleUnitSplitRoot + "/MostRecentOrchestrationBatchJobQueuedHostCount";
    internal static readonly string ScaleUnitSplitMostRecentOrchestrationBatchJobExecutionDate = FrameworkServerConstants.ScaleUnitSplitRoot + "/MostRecentOrchestrationBatchJobExecutionDate";
    internal static readonly string ScaleUnitSplitMostRecentOrchestrationBatchJobException = FrameworkServerConstants.ScaleUnitSplitRoot + "/MostRecentOrchestrationBatchJobException";
    internal static readonly string HostMoveMaxDatabaseSpaceUtilization = FrameworkServerConstants.HostMoveRoot + "/MaxDatabaseSpaceUtilization";
    internal const string MessageBusRegistryRootPath = "/Service/MessageBus";
    internal const string MessageBusRegistrySubscriberJobs = "/Service/MessageBus/SubscriberJobs";
    internal static readonly string ServicingRoot = "/Configuration/Servicing";
    public static readonly string ServicingSetupTestPartition = FrameworkServerConstants.ServicingRoot + "/SetupTestPartition";
    internal static readonly string ServicingResourceCookie = "/Configuration/Servicing/ResourceCookie";
    internal static readonly string ServicingMaxUpgradeJobs = FrameworkServerConstants.ServicingRoot + "/MaxUpgradeJobs";
    internal static readonly string ServicingMaxUpgradeJobsDuringPeakHours = FrameworkServerConstants.ServicingRoot + "/MaxUpgradeJobsDuringPeakHours";
    internal static readonly string ServicingPeakHours = FrameworkServerConstants.ServicingRoot + "/PeakHours";
    internal static readonly string ServicingThrottleHostUpgrades = FrameworkServerConstants.ServicingRoot + "/ThrottleHostUpgrades";
    internal static readonly string ServicingUpgradeStartDate = FrameworkServerConstants.ServicingRoot + "/UpgradeStartDate";
    internal static readonly string ServicingGenerateLogs = FrameworkServerConstants.ServicingRoot + "/GenerateLogs";
    internal static readonly string DatabaseUpgradeRoot = "/DatabaseUpgrade";
    internal static readonly Guid DatabaseUpgradeManagementJobId = new Guid("656655C2-EC33-4A1C-AB8C-8579BE28B400");
    internal static readonly Guid HostUpgradeManagementJobId = new Guid("DD5BB02F-B64C-407C-B2A8-4F2023C71314");
    internal static readonly string ServicingAreas = FrameworkServerConstants.ServicingRoot + "/ServicingAreas";
    internal static readonly string ServicingMode = FrameworkServerConstants.ServicingRoot + "/ServicingMode";
    internal static readonly string ServicingDisableUpgradeJobs = FrameworkServerConstants.ServicingRoot + "/DisableUpgradeJobs";
    internal static readonly string ServicingMaxLockTimeInSeconds = FrameworkServerConstants.ServicingRoot + "/MaxServicingLockTimeInSeconds";
    internal static readonly string ServicingMaxBlockingSessionTimeInSeconds = FrameworkServerConstants.ServicingRoot + "/MaxBlockingSessionTimeInSeconds";
    internal static readonly string AccountMigrateEnabled = FrameworkServerConstants.ServicingRoot + "/AccountMigrateEnabled";
    internal static readonly string OnlineBlobCopyEnabled = FrameworkServerConstants.ServicingRoot + "/OnlineBlobCopyEnabled";
    internal static readonly string QueueContainersOnBlobJobMonitorCopyEnabled = FrameworkServerConstants.ServicingRoot + "/QueueContainersOnBlobJobMonitorCopy";
    internal static readonly string AccountMigrateWaitForStop = FrameworkServerConstants.ServicingRoot + "/AccountMigrateWaitForStop";
    internal static readonly string AccountMigrationCheckKey = "/AccountMigration/{0}";
    internal static readonly string MigrationNoPartitionCopy = FrameworkServerConstants.ServicingRoot + "/Migration/NoPartitionCopy/{0}";
    public static readonly string MigrationMaxContainerParallelism = FrameworkServerConstants.ServicingRoot + "/MigrationMaxContainerParallelism";
    internal static readonly string MigrationMaxBlobParallelism = FrameworkServerConstants.ServicingRoot + "/MigrationMaxBlobParallelism";
    public static readonly string PreMigrationStopOnPendingCopy = FrameworkServerConstants.ServicingRoot + "/PreMigrationStopOnPendingCopy";
    internal static readonly string MigrationCleanupAgeInDays = FrameworkServerConstants.ServicingRoot + "/MigrationCleanupAgeInDays";
    internal static readonly string MigrationUseReadOnlyMode = FrameworkServerConstants.ServicingRoot + "/MigrationUseReadOnlyMode";
    internal static readonly string BlobCopyRetryAttempts = FrameworkServerConstants.ServicingRoot + "/BlobCopyUtil/RetryAttempts";
    internal static readonly string BlobCopyRetryMaxDelayInSeconds = FrameworkServerConstants.ServicingRoot + "/BlobCopyUtil/RetryMaxDelayInSeconds";
    internal static readonly string BlobCopyContinuationTokenRoot = FrameworkServerConstants.ServicingRoot + "/BlobCopyUtil/ContinuationTokens";
    internal static readonly string BlobCopyContinuationTokenStorageEnabled = FrameworkServerConstants.ServicingRoot + "/BlobCopyUtil/ContinuationTokenStorageEnabled";
    internal static readonly string BlobCopyContinuationTokenStorageFrequency = FrameworkServerConstants.ServicingRoot + "/BlobCopyUtil/ContinuationTokenStorageFrequency";
    internal static readonly string BlobCopyLogNumPendingBlobCopiesMaxThreshold = FrameworkServerConstants.ServicingRoot + "/BlobCopyUtil/LogNumPendingBlobCopiesMaxThreshold";
    internal static readonly string BlobCopyRequeueNumPendingBlobCopiesMax = FrameworkServerConstants.ServicingRoot + "/BlobCopyUtil/RequeueNumPendingBlobCopiesMax";
    internal static readonly string RequeueNoBlobCompletionAfterMaxHoursThreshold = FrameworkServerConstants.ServicingRoot + "/BlobCopyUtil/RequeueNoBlobCompletionAfterMaxHoursThreshold";
    internal static readonly string BlobCopyCredentialUpdateIntervalInSeconds = FrameworkServerConstants.ServicingRoot + "/BlobCopyCredentialUpdateIntervalInSeconds";
    internal static readonly string BlobCopyFailIfUnexpectedBlobsOnTargetPerAreaFormatString = FrameworkServerConstants.ServicingRoot + "/BlobCopyUtil/FailIfUnexpectedBlobsOnTarget/VsoArea/{0}";
    internal static readonly string BlobCopyEnableNoCopyStateLogging = FrameworkServerConstants.ServicingRoot + "/BlobCopyEnableNoCopyStateLogging";
    internal static readonly string DisableDatabaseDownsizeDuringMigrationsUntil = FrameworkServerConstants.ServicingRoot + "/DisableDatabaseDownsizeDuringMigrationsUntil/{0}";
    internal static readonly string UseDedicatedBlobJobForStorageMove = FrameworkServerConstants.ServicingRoot + "/UseDedicatedBlobForStorageMove";
    internal static readonly string FailBlobCopyForOneMigration = FrameworkServerConstants.ServicingRoot + "/FailBlobCopyForOneMigration";
    internal static readonly string TfsBlobMigrationJobCount = FrameworkServerConstants.ServicingRoot + "/TfsBlobMigrationJobCount";
    internal static readonly string TfsBlobMigrationSaveCheckpointIntervalSeconds = FrameworkServerConstants.ServicingRoot + "/TfsBlobMigrationSaveCheckpointIntervalSeconds";
    internal static readonly string ForceTfsBlobMigrationJobCheckpointSaveLoad = FrameworkServerConstants.ServicingRoot + "/ForceTfsBlobMigrationJobCheckpointSaveLoad";
    internal static readonly string TfsBlobMigrationJobUseFullAlphabet = FrameworkServerConstants.ServicingRoot + "/TfsBlobMigrationJobUseFullAlphabet";
    internal static readonly string UseTfsBlobMigration = FrameworkServerConstants.ServicingRoot + "/UseTfsBlobMigration";
    internal static readonly string UseTfsBlobMigrationStorageOnly = FrameworkServerConstants.ServicingRoot + "/UseTfsBlobMigrationStorageOnly";
    internal static readonly string EnableCompositeBlobProviderRenameOnSecondaryFF = "Microsoft.AzureDevOps.EnableCompositeBlobProviderRenameOnSecondary";
    internal static readonly string EnableCompositeBlobProviderRenameGenerateSasTokenFF = "Microsoft.AzureDevOps.EnableCompositeBlobProviderRenameGenerateSasToken";
    public static readonly string HostMigrationTestInjectionRoot = "/HostMigrationTestInjection";
    internal static readonly string HostMigrationTestInjectionValidationRoot = FrameworkServerConstants.HostMigrationTestInjectionRoot + "/Triggered";
    internal static readonly string DisableBlobCopyDuringMigrations = FrameworkServerConstants.HostMigrationTestInjectionRoot + "/DisableBlobCopyDuringMigrations";
    internal static readonly string LongRunningStrongboxConversion = FrameworkServerConstants.HostMigrationTestInjectionRoot + "/LongRunningStrongboxConversion";
    internal static readonly string MigrationFaultInjectionAction = FrameworkServerConstants.HostMigrationTestInjectionRoot + "/MigrationFaultInjectionAction";
    internal static readonly string HostMigrateJobRetryFailureTimeIntervalInjection = FrameworkServerConstants.HostMigrationTestInjectionRoot + "/HostMigrateJobRetryFailureTimeIntervalInjection";
    internal static readonly string HostMigrateJobRetryFailureAttemptsInjection = FrameworkServerConstants.HostMigrationTestInjectionRoot + "/HostMigrateJobRetryFailureAttemptsInjection";
    internal static readonly string HostMoveDisableEmptyTableCheck = FrameworkServerConstants.HostMigrationTestInjectionRoot + "/DisableEmptyTableCheck";
    internal static readonly string PendingBlobCopyIndefinitelyInjection = FrameworkServerConstants.HostMigrationTestInjectionRoot + "/PendingBlobCopyIndefinitely";
    internal static readonly string CannotVerifyCopySourceInjection = FrameworkServerConstants.HostMigrationTestInjectionRoot + "/CannotVerifyCopySource";
    internal static readonly string SqlMaxConnectionsInjection = FrameworkServerConstants.HostMigrationTestInjectionRoot + "/SqlMaxConnections";
    internal static readonly string FailSqlFirewallRuleInjection = FrameworkServerConstants.HostMigrationTestInjectionRoot + "/FailSqlFirewallRule";
    internal static readonly string PopulateBlobContainerLargeStrongBoxInjection = FrameworkServerConstants.HostMigrationTestInjectionRoot + "/PopulateBlobContainerLargeStrongBox";
    internal static readonly string SourceServiceLevelHigherThanTargetInjection = FrameworkServerConstants.HostMigrationTestInjectionRoot + "/SourceServiceLevelHigherThanTarget";
    public static readonly string ParallelMigrationRoot = FrameworkServerConstants.ServicingRoot + "/ParallelMigration/";
    public static readonly string ParallelMigration_TotalStorageAccountGroups = "/TotalStorageAccountGroups";
    public static readonly string ParallelMigration_DelayInMillisecBetweenJobs = "/DelayInMillisecBetweenJobs";
    public static readonly string ParallelMigration_MaxConcurrentJobsPerJobAgent = "/MaxConcurrentJobsPerJobAgent";
    public static readonly string ParallelMigration_BlobCopyTracing = "/BlobCopyTracing";
    public static readonly string ParallelMigration_BlobCopyTracingPerMinute = "/BlobCopyTracingPerMinute";
    public static readonly string ParallelMigration_BlobCopyTracingTracepoints = "/BlobCopyTracingTracepoints";
    public static readonly string ParallelMigration_BlobCopyTracingLevel = "/BlobCopyTracingLevel";
    public static readonly string ParallelMigration_BlobCopyInContainerParallelism = "/BlobCopyInContainerParallelism";
    public static readonly string ParallelMigration_BlobMetadataTablePrefixParallelism = "/BlobMetadataTablePrefixParallelism";
    public static readonly string ParallelMigration_EnableBlobTablePrefixParallelism = "/EnableBlobTablePrefixParallelism";
    public static readonly string ParallelMigration_EnableBlobTableMigrationCheckpoints = "/EnableBlobTableMigrationCheckpoints";
    public static readonly string ParallelMigration_EnableBlobMigrationParallelism = "/EnableBlobMigrationParallelism";
    internal static readonly string ConnectionStringFormatString = "/Configuration/Database/{0}/ConnectionString";
    internal static readonly string FrameworkDatabaseFormatString = "/Configuration/Collections/{0}/FrameworkConnectionString";
    internal static readonly string MaxTaskRunners = "/Service/Tasks/MaxTaskRunners";
    internal static readonly string MaxHighPriorityTaskRunners = "/Service/Tasks/MaxHighPriorityTaskRunners";
    internal static readonly string ScaleUnitMoveRoot = "/Configuration/ScaleUnitMove/Tables/";
    internal static readonly string ScaleUnitMoveTableStorageEnabledFeatureName = "Microsoft.AzureDevOps.Framework.ScaleUnitMoveTableStorageEnabled";
    internal static readonly string FailoverStatus = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (FailoverStatus);
    internal static readonly string MaxNumOfQueues = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (MaxNumOfQueues);
    internal static readonly string MaxConcurrentTransferProcessingThreadCount = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (MaxConcurrentTransferProcessingThreadCount);
    internal static readonly string MaxTransferRetries = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (MaxTransferRetries);
    internal static readonly string MaxQueueRetries = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (MaxQueueRetries);
    internal static readonly string RetrieveBatchSize = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (RetrieveBatchSize);
    internal static readonly string SendBatchSize = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (SendBatchSize);
    internal static readonly string HeartbeatTimeout = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (HeartbeatTimeout);
    internal static readonly string QueryTimeoutInSeconds = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (QueryTimeoutInSeconds);
    internal static readonly string ParallelJASeedingJobs = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (ParallelJASeedingJobs);
    internal static readonly string ParallelJACatchupJobs = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (ParallelJACatchupJobs);
    internal static readonly string SeedingJobStatus = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (SeedingJobStatus);
    internal static readonly string SeedingJobStarted = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (SeedingJobStarted);
    internal static readonly string SeedingJobFinished = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (SeedingJobFinished);
    internal static readonly string CatchupJobStarted = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (CatchupJobStarted);
    internal static readonly string CatchupJobFinished = FrameworkServerConstants.ScaleUnitMoveRoot + nameof (CatchupJobFinished);
    public const string ScaleUnitMoveQueueStorageConnectionString = "QueueStorageConnectionString";
    public const string ScaleUnitMoveTableStrongBoxDrawerName = "ScaleUnitMoveTableTokens";
    public const string ScaleUnitMoveQueuePrefix = "sumovequeue";
    public const string ScaleUnitMoveOriginTablePrefix = "OriginTable";
    public const string ScaleUnitMoveTargetTablePrefix = "TargetTable";
    internal static readonly string RequestThrottlingRoot = "/Configuration/RequestThrottling";
    internal static readonly string RequestThrottlingRestEnabled = FrameworkServerConstants.RequestThrottlingRoot + "/RestEnabled";
    internal static readonly string RequestThrottlingDbComponentEnabled = FrameworkServerConstants.RequestThrottlingRoot + "/DbComponentEnabled";
    internal static readonly string RequestThrottlingHostUpgradeEnabled = FrameworkServerConstants.RequestThrottlingRoot + "/ThrottleHostUpgrades";
    internal static readonly string RequestThrottlingATCpuThreshold = FrameworkServerConstants.RequestThrottlingRoot + "/ATCpuThreshold";
    internal static readonly string RequestThrottlingAspQueueThreshold = FrameworkServerConstants.RequestThrottlingRoot + "/AspQueueThreshold";
    internal static readonly string RequestThrottlingDTAvgCpuPercent = FrameworkServerConstants.RequestThrottlingRoot + "/DTAvgCpuPercentThreshold";
    internal static readonly string RequestThrottlingDTAvgDataIOPercent = FrameworkServerConstants.RequestThrottlingRoot + "/DTAvgDataIOPercentThreshold";
    internal static readonly string RequestThrottlingDTAvgLogWritePercent = FrameworkServerConstants.RequestThrottlingRoot + "/DTAvgLogWritePercentThreshold";
    internal static readonly string RequestThrottlingDTAvgMemoryUsagePercent = FrameworkServerConstants.RequestThrottlingRoot + "/DTAvgMemoryUsagePercentThreshold";
    internal static readonly string RequestThrottlingDTMaxWorkerPercent = FrameworkServerConstants.RequestThrottlingRoot + "/DTMaxWorkerPercentThreshold";
    internal static readonly string RequestThrottlingPageLatchAverageWaitTimeMSThreshold = FrameworkServerConstants.RequestThrottlingRoot + "/PageLatchAverageWaitTimeMSThreshold";
    internal static readonly string RequestThrottlingDTDataStaleSeconds = FrameworkServerConstants.RequestThrottlingRoot + "/DTDataStaleSeconds";
    internal static readonly string RequestThrottlingJACpuThreshold = FrameworkServerConstants.RequestThrottlingRoot + "/JACpuThreshold";
    internal static readonly string RequestThrottlingJACpuOffset = FrameworkServerConstants.RequestThrottlingRoot + "/JACpuOffset";
    internal static readonly string JACpuThrottlingEnabledFeatureFlag = "VisualStudio.Services.Framework.JACpuThrottlingEnabled";
    internal static readonly string HostManagementRoot = "/Configuration/HostManagement";
    internal static readonly string HostManagementLeaseDuration = FrameworkServerConstants.HostManagementRoot + "/LeaseDurationInMinutes";
    internal static readonly string AllowDormantHosts = FrameworkServerConstants.HostManagementRoot + "/AllowDormantHosts";
    internal static readonly string HostDormancyInterval = FrameworkServerConstants.HostManagementRoot + "/HostDormancyInterval";
    internal static readonly string HostDormancyThreads = FrameworkServerConstants.HostManagementRoot + "/HostDormancyThreads";
    internal static readonly string HostTimeToSleep = FrameworkServerConstants.HostManagementRoot + "/HostTimeToSleep";
    internal static readonly string HostDormancyCheckInterval = FrameworkServerConstants.HostManagementRoot + "/HostDormancyCheckInterval";
    internal static readonly string MaxTotalHosts = FrameworkServerConstants.HostManagementRoot + "/MaxTotalHosts";
    internal static readonly string ForceUpdateLastUserAccess = FrameworkServerConstants.HostManagementRoot + "/ForceUpdateLastUserAccess";
    internal static readonly string SyncExistingHostsOnly = FrameworkServerConstants.HostManagementRoot + "/SyncExistingHostsOnly";
    internal static readonly string SkipHostSyncMessageFormat = FrameworkServerConstants.HostManagementRoot + "/SkipHostSyncMessage/{0}";
    internal static readonly string ServiceHostHistoryWatermark = FrameworkServerConstants.HostManagementRoot + "/ServiceHostHistoryWatermark";
    internal static readonly string DeletedServiceHostStorageAccount = FrameworkServerConstants.HostManagementRoot + "/DeletedServiceHostStorageAccount";
    public static readonly string HostManagementToken = "HostManagement";
    public static readonly string RegionsToken = "Regions";
    internal static readonly string SnapshotRoot = "/Snapshot";
    internal static readonly string SnapshotCollectionProperties = FrameworkServerConstants.SnapshotRoot + "/CollectionProperties";
    internal static readonly string SnapshotAddedServiceDefinitions = FrameworkServerConstants.SnapshotRoot + "/AddedServiceDefinitions";
    internal static readonly string SnapshotCollectionDomainSid = FrameworkServerConstants.SnapshotRoot + "/CollectionDomainSid";
    internal static readonly string SnapshotInstanceDomainSid = FrameworkServerConstants.SnapshotRoot + "/InstanceDomainSid";
    internal static readonly string SnapshotIdentitySequenceId = FrameworkServerConstants.SnapshotRoot + "/IdentitySequenceId";
    public static readonly string SnapshotOriginalApplicationInstanceId = FrameworkServerConstants.SnapshotRoot + "/OriginalApplicationInstanceId";
    public static readonly string UsePartitioningCache = "$UsePartitioningCache";
    internal static readonly string LockManagerRoot = "/Configuration/LockManager";
    internal static readonly string CheckForLockViolations = FrameworkServerConstants.LockManagerRoot + "/CheckForLockViolations";
    internal static readonly string TcpProtocolPrefix = "tcp:";
    internal static readonly string NamedPipesProtocolPrefix = "np:";
    internal static readonly string VerifyVersionLock = "TfsDb";
    public static readonly string ServicingCollectionFaultInjection = "/Testing/Servicing/FaultInjectionStep";
    internal static readonly string ServicingCollectionDelay = "/Testing/Servicing/{0}/DelayInSeconds";
    internal static readonly string SslOnlyAppSettingsKey = "sslOnly";
    internal static readonly string ApplicationDatabaseAppSettingsKey = "applicationDatabase";
    internal static readonly string ApplicationIdAppSettingsKey = "applicationId";
    internal static readonly string ApplicationDatabaseSqlUserKey = "applicationDatabaseUser";
    internal static readonly string ApplicationDatabaseSqlPasswordKey = "applicationDatabasePassword";
    internal static readonly string ConfigDbConnectionStringKey = "ConfigDbConnectionString";
    internal static readonly string InstanceIdKey = "InstanceId";
    internal static readonly string ConfigDbUserIdKey = "ConfigDbUserId";
    internal static readonly string ConfigDbPasswordKey = "ConfigDbPassword";
    internal static readonly string ApplicationSettingsReader = "applicationSettingsReader";
    internal static readonly string ApplicationPluginDirectory = "pluginDirectory";
    public const string WebServiceComponentName = "Framework";
    internal static readonly string SecurityServiceGroupName = "Security Service Group";
    internal static readonly string SecurityServiceGroupDescription = "Identities which are granted explicit permission to a resource will be automatically added to this group if they were not previously a member of any other group.";
    internal static readonly string ServiceHostResourcesDirectory = "~/_tfs_resources/";
    public static readonly string CloneTargetInstanceIdStamp = "TFS_CLONE_CONFIGURATION_TARGET_INSTANCE_ID";
    public static readonly string CollectionInitializingExtendedProperty = "TFS_COLLECTION_INITIALIZING";
    internal static readonly string ClientDisconnectMonitorInterval = "/Configuration/Application/ClientDisconnectMonitorInterval";
    public const string JobTimeoutMonitorInterval = "/Configuration/Application/JobTimeoutMonitorInterval";
    internal static readonly string UserRequestTimeoutInterval = "/Configuration/Application/UserRequestTimeoutInterval";
    internal static readonly string MaxSqlComponents = "/Configuration/Application/MaxSqlComponents";
    internal static readonly string MinWorkerThreadsPerCpu = "/Configuration/Application/MinWorkerThreadsPerCpu";
    internal static readonly string MinCompletionPortThreadsPerCpu = "/Configuration/Application/MinCompletionPortThreadsPerCpu";
    internal static readonly string OiHeartbeatIntervalSeconds = "/Configuration/Application/OiHeartbeatIntervalSeconds";
    public static readonly string CollectTeamFoundationServerSqmData = "/Configuration/Application/CollectTeamFoundationServerSqmData";
    internal static readonly string AdminConsoleLaunchCount = "/Configuration/Application/AdminConsoleLaunchCount";
    internal static readonly string ServiceHostMonitorRoot = "/Configuration/ServiceHostMonitor";
    internal static readonly string RequestMonitorInterval = FrameworkServerConstants.ServiceHostMonitorRoot + "/RequestMonitorInterval";
    internal static readonly string QueuedRequestThreshold = FrameworkServerConstants.ServiceHostMonitorRoot + "/QueuedRequestThreshold";
    internal static readonly string QueuedRequestElapsedThreshold = FrameworkServerConstants.ServiceHostMonitorRoot + "/QueuedRequestElapsedThreshold";
    internal static readonly string TotalExecutionElapsedThreshold = FrameworkServerConstants.ServiceHostMonitorRoot + "/TotalExecutionElapsedThreshold";
    internal static readonly string ServiceHostMonitorEnabled = "/Configuration/ServiceHostMonitor/Enabled";
    internal static readonly string FileRepositoryServiceRoot = "/Service/FileRepository/Settings";
    internal static readonly string FilesPerTicket = FrameworkServerConstants.FileRepositoryServiceRoot + "/FilesPerTicket";
    public static readonly string LicensingRootPath = "/Service/Licensing";
    internal static readonly string LicensingPackageXmlPath = FrameworkServerConstants.LicensingRootPath + "/Package";
    public static readonly string LicensingGroupPath = FrameworkServerConstants.LicensingRootPath + "/{0}/Group";
    public static readonly string InstalledUICulture = "/Service/Integration/Settings/InstalledUICulture";
    public static readonly string UserInstalledUICulture = "/Service/Integration/Settings/UserInstalledUICulture";
    public static readonly string InstalledUICultureSeparator = ";";
    internal static readonly string DefaultCollationRoot = "/Configuration/DefaultCollation";
    internal static readonly string DefaultCollationLcid = FrameworkServerConstants.DefaultCollationRoot + "/{0}";
    internal static readonly string ResourceManagementTargetServiceLevelSetting = "TargetServiceLevel";
    internal static readonly int VersionControlDestroyedContentFileId = 1023;
    internal static readonly string TracingServiceRegistryRootPath = "/Service/TracingService";
    internal static readonly string TracingServiceTraceDataProvider = FrameworkServerConstants.TracingServiceRegistryRootPath + "/TraceDataProvider";
    internal static readonly string TracingServiceJobAndActivityLogTracingEnabled = FrameworkServerConstants.TracingServiceRegistryRootPath + "/JobAndActivityLogTracingEnabled";
    internal static readonly string TracingServiceSurveyEventsTracingEnabled = FrameworkServerConstants.TracingServiceRegistryRootPath + "/SurveyEventsTracingEnabled";
    internal static readonly string TracingServiceMaxTracesPerTraceFilter = FrameworkServerConstants.TracingServiceRegistryRootPath + "/MaxTracesPerTraceFilter";
    internal static readonly string TracingServiceTraceFilterExpirationMinutes = FrameworkServerConstants.TracingServiceRegistryRootPath + "/TraceFilterExpirationMinutes";
    internal static readonly string TracingServiceServicingStepDetailEnabled = FrameworkServerConstants.TracingServiceRegistryRootPath + "/MdmServicingStepDetailEnabled";
    internal static readonly string TracingServiceEuiiGatesEnabled = FrameworkServerConstants.TracingServiceRegistryRootPath + "/EuiiGatesEnabled";
    internal static readonly string TracingServiceEuiiGatesFeatureFlagEnabled = "VisualStudio.FrameworkService.EuiiGates.TestOnly";
    internal static readonly string TracingServiceEuiiAssertOnDetection = FrameworkServerConstants.TracingServiceRegistryRootPath + "/EuiiAssertOnDetection";
    internal static readonly string TracingServiceEnableActivityLogMapping = FrameworkServerConstants.TracingServiceRegistryRootPath + "/EnableActivityLogMapping";
    internal static readonly string TracingServiceEnableImpactedUsersMetric = FrameworkServerConstants.TracingServiceRegistryRootPath + "/EnableImpactedUsersMetric";
    internal static readonly string TracingServiceEnableImpactedUsersThreshold = FrameworkServerConstants.TracingServiceRegistryRootPath + "/ImpactedUsersMetricThreshold";
    internal static readonly string TracingServiceEnableCollectTracePublishedVsSkippedMetric = FrameworkServerConstants.TracingServiceRegistryRootPath + "/CollectTracePublishedVsSkippedMetric";
    internal static readonly string TracingServiceEnableLowPriorityProductTrace = FrameworkServerConstants.TracingServiceRegistryRootPath + "/EnableLowPriorityProductTrace";
    internal static readonly string TracingServiceLowPriorityProductTracePercentage = FrameworkServerConstants.TracingServiceRegistryRootPath + "/LowPriorityProductTracePercentage";
    internal static readonly string TracingServiceLowPriorityProductTraceMaxLevel = FrameworkServerConstants.TracingServiceRegistryRootPath + "/LowPriorityProductTraceMaxLevel";
    internal static readonly string EuiiDetectionServiceFeatureFlag = "VisualStudio.FrameworkService.EuiiDetectionService";
    internal static readonly string EuiiDetectionServiceRegistryRootPath = "/Service/EuiiDetectionService";
    internal static readonly string EuiiDetectionServiceEnabledTracepoints = FrameworkServerConstants.EuiiDetectionServiceRegistryRootPath + "/EnabledTracepoints";
    internal static readonly string EuiiDetectionServiceTraceIntervalMs = FrameworkServerConstants.EuiiDetectionServiceRegistryRootPath + "/TraceIntervalMs";
    internal static readonly string EuiiDetectionServiceCPUCounterEnabled = FrameworkServerConstants.EuiiDetectionServiceRegistryRootPath + "/CPUCounterEnabled";
    internal static readonly string EuiiDetectionServiceRedactionEnabled = FrameworkServerConstants.EuiiDetectionServiceRegistryRootPath + "/RedactionEnabled";
    public static readonly string ProjectCreationLockdownPath = FrameworkServerConstants.ServicingRoot + "/ProjectCreationLockdown";
    internal static readonly string MinReplacedTimeForDisableLogin = "/Configuration/DatabaseManagement/MinReplacedTimeForDisableLogin";
    internal static readonly string MinDisabledTimeForDropLogin = "/Configuration/DatabaseManagement/MinDisabledTimeForDropLogin";
    internal static readonly string SizeAlertsEnabled = "/Configuration/DatabaseManagement/SizeAlertsEnabled";
    internal static readonly string DatabaseGrowthThreshold = "/Configuration/DatabaseManagement/GrowthThreshold";
    internal static readonly string DatabaseSizeThresholdIntervals = "/Configuration/DatabaseManagement/SizeThresholdIntervals";
    internal static readonly string PartitionDatabaseFillRateAlertEnabled = "/Configuration/DatabaseManagement/PartitionDatabaseFillRateAlertEnabled";
    internal static readonly string PartitionDatabaseFillRateThresholdIntervals = "/Configuration/DatabaseManagement/PartitionDatabaseFillRateThresholdIntervals";
    internal static readonly string AccountDatabasePool = "/Configuration/Settings/AccountDatabasePool";
    internal static readonly string OptInPrivilegedSqlLogin = "/Configuration/DatabaseManagement/OptInPrivilegedSqlLogin";
    internal static readonly string TransactionErrorThresholdinSeconds = "/Configuration/DatabaseManagement/TransactionErrorThresholdinSeconds";
    internal static readonly string TransactionErrorThresholdinBytes = "/Configuration/DatabaseManagement/TransactionErrorThresholdinBytes";
    internal static readonly string MaxDop = "/Configuration/DatabaseManagement/MaxDop";
    internal static readonly string SizePercentageToSealDatabase = "/Configuration/DatabaseManagement/SizePercentageToSealDatabase";
    internal static readonly string SizePercentageToGrowDatabase = "/Configuration/DatabaseManagement/SizePercentageToGrowDatabase";
    internal static readonly string SizePercentageToDownsizeVcoreDatabase = "/Configuration/DatabaseManagement/SizePercentageToDownsizeVcoreDatabase";
    internal static readonly string OverheadSizeInGBVcoreDatabase = "/Configuration/DatabaseManagement/OverheadSizeInGBVcoreDatabase";
    internal static readonly string DatabaseGhostRecordsCleanup = "/Configuration/DatabaseManagement/DatabaseGhostRecordsCleanup";
    internal static readonly string MaxDatabaseGhostRecordsCleanupInParallel = "/Configuration/DatabaseManagement/DatabaseGhostRecordsCleanup/MaxCleanupInParallel";
    internal static readonly string DisableDatabasePrecreation = "/Configuration/DatabaseManagement/DisableDatabasePrecreation";
    internal static readonly string DaysToPITRCleanup = "/Configuration/DatabaseManagement/DaysToPITRCleanup";
    internal static readonly string SqlDevOpsSecurityGroups = "/Configuration/DatabaseManagement/SqlDevOpsSecurityGroups";
    internal static readonly string SqlRightSizingQueryDateFrom = "/Configuration/DatabaseManagement/SqlRightSizing/DateFrom";
    internal static readonly string DefaultPartitionDbMinStandardServiceObjective = "/Configuration/DatabaseManagement/SqlRightSizing/DefaultPartitionDbMinStandardServiceObjective";
    internal static readonly string DefaultPartitionDbMaxStandardServiceObjective = "/Configuration/DatabaseManagement/SqlRightSizing/DefaultPartitionDbMaxStandardServiceObjective";
    internal static readonly string DefaultPartitionDbMinPremiumServiceObjective = "/Configuration/DatabaseManagement/SqlRightSizing/DefaultPartitionDbMinPremiumServiceObjective";
    internal static readonly string DefaultPartitionDbMaxPremiumServiceObjective = "/Configuration/DatabaseManagement/SqlRightSizing/DefaultPartitionDbMaxPremiumServiceObjective";
    internal static readonly string DefaultPartitionDbStopUpgradeAtCpuPercentage = "/Configuration/DatabaseManagement/SqlRightSizing/DefaultPartitionDbStopUpgradeAtCpuPercentage";
    internal static readonly string DefaultConfigDbMinStandardServiceObjective = "/Configuration/DatabaseManagement/SqlRightSizing/DefaultConfigDbMinStandardServiceObjective";
    internal static readonly string DefaultConfigDbMaxStandardServiceObjective = "/Configuration/DatabaseManagement/SqlRightSizing/DefaultConfigDbMaxStandardServiceObjective";
    internal static readonly string DefaultConfigDbMinPremiumServiceObjective = "/Configuration/DatabaseManagement/SqlRightSizing/DefaultConfigDbMinPremiumServiceObjective";
    internal static readonly string DefaultConfigDbMaxPremiumServiceObjective = "/Configuration/DatabaseManagement/SqlRightSizing/DefaultConfigDbMaxPremiumServiceObjective";
    internal static readonly string ConfigDbStopUpgradeAtCpuPercentage = "/Configuration/DatabaseManagement/SqlRightSizing/DefaultConfigDbStopUpgradeAtCpuPercentage";
    internal static readonly string SqlRightSizingLookbackInMinutes = "/Configuration/DatabaseManagement/SqlRightSizing/LookbackInMinutes";
    internal static readonly string SqlRightSizingLookbackMaxRecords = "/Configuration/DatabaseManagement/SqlRightSizing/LookbackMaxRecords";
    internal static readonly string DefaultSealDatabaseAtCoreCount = "/Configuration/DatabaseManagement/SqlRightSizing/SealAtCoreCount";
    internal static readonly string DefaultUnsealDatabaseAtCoreCount = "/Configuration/DatabaseManagement/SqlRightSizing/UnsealAtCoreCount";
    internal static readonly string HolidaySeason = "/Configuration/DatabaseManagement/SqlRightSizing/HolidaySeason";
    internal static readonly string RoutingServiceRoot = "/Service/Routing";
    internal static readonly string RoutingServiceEnabled = "/Service/Routing/Enabled";
    internal static readonly string RoutingServiceCacheEntryTimeout = "/Service/Routing/CacheEntryTimeout";
    [Obsolete("Insecure.  Only use for upgrading pre-M63 hosted databases.")]
    internal static readonly Guid FrameworkSigningKey = new Guid("C19B8B5A-02F5-4D1C-8514-731473B301F5");
    internal static readonly string DefaultSigningKeyPath = "/Configuration/Signing/DefaultSigningKey";
    internal static readonly string DefaultSigningKeyLengthPath = "/Configuration/Signing/DefaultKeyLength";
    internal static readonly string DefaultMasterWrappingKeyPath = "/Configuration/Signing/DefaultEncryptionKey";
    internal static readonly string SigningServiceStrongBoxDrawerName = "32BDA3F3-84B6-4055-913E-9F5EE8A7B1FF";
    internal static readonly string KeyEncryptionKeyStrongBoxDrawerName = "3BDACBC8-777A-42D1-A5A3-82E782ED3AD2";
    internal static readonly string RSASecureStrongBoxDrawerName = "72048C14-A9A1-4899-933C-4D7C58CB7494";
    internal static readonly string TicketGenerationSigningKeyMigrationEnlightenmentsFeatureName = "Microsoft.AzureDevOps.FileService.TicketGeneration.SigningKeyMigrationEnlightenments";
    internal static readonly string UseBatchedSigningKeyRetrievalForGetThumbprintsInUse = "Microsoft.AzureDevOps.UseBatchedSigningKeyRetrievalForGetThumbprintsInUse";
    internal static readonly string Migration_RollbackCopyTaggedTargetBlobsToSourceFeatureName = "Microsoft.AzureDevOps.Migration.RollbackCopyTaggedTargetBlobsToSource";
    internal static readonly string Migration_TagNewAzureBlobProviderBaseBlobsPath = "/Configuration/Migration/TagNewAzureBlobProviderBaseBlobs";
    internal static readonly string Migration_RemoveRegisteredDBOnRollback = "Microsoft.AzureDevOps.Migration.RemoveRegisteredDBOnRollback";
    internal static readonly string MigrationDefaultSigningKeyPath = "/Configuration/Signing/MigrationDefaultSigningKey";
    internal static readonly string MaxSigningKeysToRemovePath = "/Configuration/Signing/MaxKeysToRemove";
    internal const string Preparing = "Preparing";
    internal const string Migrating = "Migrating";
    internal const string CleaningUp = "CleaningUp";
    internal static readonly string HostMigrationCertificateRotationManagementJobDisabledPath = "/Configuration/Migration/HostMigrationCertificateRotationManagementJobDisabled";
    internal const string HostMigrationCertSignedSecretsFeatureName = "Microsoft.VisualStudio.Services.Cloud.HostMigration.MigrationCertSignedSecrets";
    internal const string HostMigrationDisableMigrationCertExpiryCheckFeatureName = "Microsoft.AzureDevOps.HostMigration.DisableMigrationCertExpiryCheck";
    public static readonly string StorageConnectionsDrawerName = "StorageConnections";
    public static readonly string ConfigurationSecretsDrawerName = "ConfigurationSecrets";
    public static readonly string HostMigrationSecretsDrawerName = "HostMigrationCredentials";
    internal static readonly string StrongBoxRegistryRootPath = "/Service/StrongBox";
    internal static readonly string StrongBoxSecretMappingRegistryRootPath = FrameworkServerConstants.StrongBoxRegistryRootPath + "/KeyVaultSecretMapping";
    internal static readonly string StrongBoxCacheItemCount = FrameworkServerConstants.StrongBoxRegistryRootPath + "/Cache/MaxItemCount";
    internal static readonly string StrongBoxCacheDrawerCount = FrameworkServerConstants.StrongBoxRegistryRootPath + "/Cache/MaxDrawerCount";
    internal static readonly string StrongBoxCacheByteCount = FrameworkServerConstants.StrongBoxRegistryRootPath + "/Cache/MaxByteCount";
    internal static readonly string StrongBoxMaxContentLength = FrameworkServerConstants.StrongBoxRegistryRootPath + "/MaxContentLength";
    internal static readonly string StrongBoxMaxFileContentLength = FrameworkServerConstants.StrongBoxRegistryRootPath + "/MaxFileContentLength";
    internal static readonly string StrongBoxDeleteOrphansBatchSize = FrameworkServerConstants.StrongBoxRegistryRootPath + "/DeleteOrphansbatchSize";
    internal static readonly string StrongBoxMaxKeyAge = FrameworkServerConstants.StrongBoxRegistryRootPath + "/MaxKeyAge";
    internal static readonly string StrongBoxPartialDrawerLookupFeatureFlag = "Microsoft.AzureDevOps.StrongBox.StrongBoxPartialDrawerLookup";
    internal static readonly string MigrationCertificateStaging = "MigrationCertificate";
    internal static readonly string StrongBoxReentrantItemRotationFeatureName = "Microsoft.AzureDevOps.StrongBox.ReentrantItemRotation";
    public static readonly string CacheRuntimeKeyVaults = "VisualStudio.Services.SecretRotation.CacheRuntimeKeyVaults";
    public static readonly string KeyVaultBootstrapSettingsJob = "VisualStudio.Services.SecretRotation.KeyVaultBootstrapSettingsJob";
    public static readonly string ReadInstrumentationKeyFromKeyVault = "Microsoft.AzureDevOps.ResourceManagement.ReadInstrumentationKeyFromKeyVault";
    [EditorBrowsable(EditorBrowsableState.Never)]
    public static readonly string DevStorageConnectionString = "UseDevelopmentStorage=true";
    internal static readonly string S2SAuthSecretsDrawer = "S2SAuthSecrets";
    public static readonly string DevFabricLegacyDefaultDomain = "vsts.me";
    public static readonly string DevFabricNewDefaultDomain = "codedev.ms";
    public static readonly string DeleteEmptyAccountsJobRoot = FrameworkServerConstants.ServicingRoot + "/DeleteEmptyAccountsJob";
    public static readonly string DeleteEmptyAccountsLastUserAccessInDays = FrameworkServerConstants.DeleteEmptyAccountsJobRoot + "/LastAccesedInDays";
    public static readonly string DeleteEmptyAccountsWatermark = FrameworkServerConstants.DeleteEmptyAccountsJobRoot + "/Watermark";
    public static readonly string DeleteEmptyAccountsMaxNumberOfJobs = FrameworkServerConstants.DeleteEmptyAccountsJobRoot + "/MaxNumberOfJobs";
    public static readonly string DeleteEmptyAccountsEnabled = FrameworkServerConstants.DeleteEmptyAccountsJobRoot + "/Enabled";
    public const long DefaultExecutionTimeThreshold = 10000000;
    public const long InfiniteExecutionTimeThreshold = 1000000000000000000;
    public static readonly int DefaultNotificationAndEmailJobMaxExecutionTimeMsec = 300000;
    public static readonly int DefaultNotificationAndEmailJobTimeoutMultiple = 12;
    public static readonly long MaxBrowsingContentSize = 4194304;
    internal const string MdmServiceRegistryRootPath = "/Service/MdmService";
    internal const string MdmServiceMdmKpiPublishEnabled = "/Service/MdmService/MdmKpiMetricPublishEnabled";
    internal const string MdmServiceMdmEventPublishEnabled = "/Service/MdmService/MdmEventMetricPublishEnabled";
    internal const string MdmServiceMdmDatabaseMetricPublishEnabled = "/Service/MdmService/MdmDatabaseMetricPublishEnabled";
    internal const string MdmServiceMetricsPublishViaIfxEnabled = "/Service/MdmService/MdmMetricsPublishViaIfxEnabled";
    internal const string MdmServiceMetricScalingFactor = "/Service/MdmService/MetricScalingFactor";
    internal const string MdmDefaultSliEnabled = "VisualStudio.Diagnostics.MdmDefaultSliMetric";
    internal const string MdmCustomSliEnabled = "VisualStudio.Diagnostics.MdmCustomSliMetric";
    internal const string MdmSliHostTypeFilterDisabled = "VisualStudio.Diagnostics.MdmSliHostTypeFilterDisabled";
    internal const string MdmUseNewCustomerResourceIdFormat = "VisualStudio.Diagnostics.UseNewCustomerResourceIdFormat";
    public const string MdmUseNewLocationIdFormat = "VisualStudio.Diagnostics.UseNewLocationIdFormat";
    public const string MdmUseRegionOnlyLocationIdFormat = "VisualStudio.Diagnostics.UseRegionOnlyLocationIdFormat";
    internal const string DiagnosticsRootPath = "/Diagnostics/Hosting";
    internal const string MdmDeploymentStatusPath = "/Diagnostics/Hosting/MdmDeploymentStatus";
    internal const string MdmRegistryRootPath = "/Diagnostics/Hosting/MdmDiagnostics";
    internal const string MdmEnabledRegistryPath = "/Diagnostics/Hosting/MdmDiagnostics/MdmEnabled";
    internal const string MdmAccountNameRegistryPath = "/Diagnostics/Hosting/MdmDiagnostics/MdmAccountName";
    internal const string MdmNamespaceRegistryPath = "/Diagnostics/Hosting/MdmDiagnostics/MdmNamespace";
    internal const string MdmRegionRegistryPath = "/Diagnostics/Hosting/MdmDiagnostics/MdmRegion";
    internal const string MdmScaleUnitRegistryPath = "/Diagnostics/Hosting/MdmDiagnostics/MdmScaleUnit";
    internal const string MdmServiceRegistryPath = "/Diagnostics/Hosting/MdmDiagnostics/MdmService";
    internal const string IsPrimaryGeoReplicationInstance = "/Configuration/GeoReplication/IsPrimary";
    internal const string PrimaryGeoReplicationInstance = "/Configuration/GeoReplication/PrimaryInstance";
    public const string DiagnosticsHostingRegistryPath = "/Diagnostics/Hosting";
    public static readonly string IisConfiguratorMutexName = "TfsIisConfiguratorMutex";
    public static readonly string OutboundVipsRegistryPath = "/Configuration/Hosting/OutboundVips";
    public const char IPAddressDelimitor = ',';
    internal static readonly string ReadOnlySqlComponent = "VisualStudio.Services.ResourceManagement.ReadOnlySqlComponent";
    internal static readonly string ReadReplicaOptInElevatedFeatureFlag = "VisualStudio.Services.ResourceManagement.EnableReadReplicaOptInElevated";
    internal static readonly string EnableHttpClientEventualReadConsistencyForwarding = "VisualStudio.Services.EnableHttpClientEventualReadConsistencyForwarding";
    internal const string AuthRedirectMethodName = "RedirectingToAuthProvider";
    internal const string EnableRlsFeatureFlag = "VisualStudio.Services.Framework.EnableRls";
    internal const string EnableDataspaceRlsFeatureFlag = "VisualStudio.Services.Framework.EnableDataspaceRls";
    public static readonly string DatabaseReplication = "VisualStudio.Services.Framework.DatabaseReplication";
    public static readonly string ConfigDbReplicationEnabled = "VisualStudio.Services.Framework.ConfigDbReplicationEnabled";
    public static readonly string SqlFailoverGroupEnabled = "VisualStudio.Services.Framework.SqlFailoverGroupEnabled";
    public static readonly string DatabaseDownSizeEnabled = "VisualStudio.Services.Framework.DatabaseDownSizeEnabled";
    public static readonly string UpgradeToHyperscaleOnCreation = "VisualStudio.Services.Framework.UpgradeToHyperscaleOnCreation";
    public static readonly string DisableLogSizeCheckForHsDbOptimization = "VisualStudio.Services.JobExtension.DisableLogSizeCheckForHsDbOptimization";
    public static readonly string DisableWebRequestAggregation = "VisualStudio.Services.WebRequestLogger.DisableRequestAggregation";
    public static readonly string OnlyCountInteractiveUserAgentsAsSlow = "VisualStudio.Services.WhitelistingService.OnlyCountInteractiveUserAgentsAsSlow";
    internal static readonly string AfdHealthCheckQuality = "/Configuration/AzureFrontDoor/HealthCheckQuality";
    internal const string EnableSqlRightSizingDowngradeDatabase = "VisualStudio.Services.Framework.EnableSqlRightSizingDowngradeDatabase";
    internal const string DisableSqlRightSizingDowngradeDatabase = "VisualStudio.Services.Framework.DisableSqlRightSizingDowngradeDatabase";
    internal const string EnableSqlRightSizingCpuChecks = "VisualStudio.Services.Framework.EnableSqlRightSizingCpuChecks";
    internal const string AllowSealOnUpgradeDatabase = "VisualStudio.Service.Framework.AllowSealOnUpgradeDatabase";
    internal const string AllowUnsealOnDowngradeDatabase = "VisualStudio.Service.Framework.AllowUnsealOnDowngradeDatabase";
    internal const string EnableExtendedLookbackRightSizing = "VisualStudio.Service.Framework.EnableExtendedLookbackRightSizing";
    public const string EnableDeploymentLevelRegistrationEntries = "VisualStudio.Services.Framework.EnableDeploymentRegistrationEntries";
    internal const string EnableVirtualizationRegistrationEntries = "VisualStudio.Services.Framework.EnableRegistrationEntriesVirtualization";
    public const string TeamPlatformServiceRequestContextTelemetry = "TeamFoundationTeamService.RequestContextTelemetry";
    public const string TenantIdFromSubscriptionFeatureFlag = "Microsoft.AzureDevOps.ResourceManagement.TenantIdFromSubscription";
    public static readonly string UseDelegatedS2STokens = "VisualStudio.Services.Authentication.UseDelegatedS2STokens";
    public static readonly string DisableDelegatedS2STokens = "VisualStudio.Services.Authentication.DisableDelegatedS2STokens";
    public static readonly string DisableSwitchToSecondaryCertificate = "VisualStudio.Services.Authentication.DisableSwitchToSecondaryCertificate";
    public static readonly Guid UserExtensionPrincipal = new Guid("00000058-0000-8888-8000-000000000000");
    internal const string IsAsyncNotification = "IsAsyncNotification";
    internal const string KeepTaskStartTimeOnRequeueFeatureFlag = "VisualStudio.Services.Framework.KeepTaskStartTimeOnRequeue";
    public static readonly string HandlerConfigureAwaitFeatureFlag = "VisualStudio.FrameworkService.Handler.ConfigureAwait.Enable";
    public static readonly string HandlerHttpClientRateLimiterFeatureFlag = "VisualStudio.FrameworkService.Handler.ClientRateLimiterHandlerEnabled";
    internal const string DisableYieldOnExceptionFeatureFlag = "VisualStudio.Services.Framework.DisableYieldOnException";
    public const string WebRequestContext = "webRequestContext";
    public const string MachineIdEnvironmentVariable = "AzureDevOpsMachineId";
    public const string RoleInstanceOutOfRotationEnvVariable = "VSSHEALTHAGENT_TAKE_VM_OUT_OF_ROTATION";
    public const string RoleInstanceOutOfRotationEnvVariableHighCpu = "VSSHEALTHAGENT_TAKE_VM_OUT_OF_ROTATION_HIGH_CPU";
    public const string VssDisableHealthEndpoint = "VssDisableHealthEndpoint";
    public const string DateTimeFormat = "yyyy-MM-ddTHH:mm:ss";
    public static readonly string EnableNewRetryLogicFor429InAADUtil = "VisualStudio.FrameworkService.EnableNewRetryLogicFor429InAADUtil";
    public static readonly string RestoreBlobsConcurrentTasks = "/Configuration/BlobRestorationService/RestoreBlobsConcurrentTasks";
    public const string PositiveIntegerThreshold = "/Configuration/Threshold/PositiveIntegerThreshold";
    public const string NegativeIntegerThreshold = "/Configuration/Threshold/NegativeIntegerThreshold";
    public const string PositiveTinyIntThreshold = "/Configuration/Threshold/PositiveTinyIntThreshold";
    public const string PositiveSmallIntThreshold = "/Configuration/Threshold/PositiveSmallIntThreshold";
    public const string PositiveBigIntThreshold = "/Configuration/Threshold/PositiveBigIntThreshold";

    internal static string MigrationCertificateItemName(string thumbprint) => "MigrationCert-" + thumbprint;

    internal static string MakeMigrationSigningDatabasePath<T>(T suffix) => string.Format("/Configuration/Migration/MigratingDatabaseIds/{0}", (object) suffix);

    internal static string MakeMigrationSigningHostPath<T>(T suffix) => string.Format("/Configuration/Migration/MigratingHostIds/{0}", (object) suffix);

    public static string TenantAwareRootRegistryPath(string tenant) => "/Diagnostics/Hosting/" + tenant;

    public static string TenantAwareDeploymentIdRegistryPath(string tenant) => "/Diagnostics/Hosting/" + tenant + "/ProductionDeploymentId";

    public static string RetireProductionSlot(string tenant) => "/Diagnostics/Hosting/" + tenant + "/RetireProductionSlot";
  }
}
