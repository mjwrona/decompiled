// Decompiled with JetBrains decompiler
// Type: Microsoft.TeamFoundation.Framework.Server.TeamFoundationEventId
// Assembly: Microsoft.TeamFoundation.Framework.Server, Version=19.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 07453D77-2935-488F-B470-3D01F1673D9B
// Assembly location: C:\Program Files\Azure DevOps Server 2022\Application Tier\Web Services\bin\Plugins\Microsoft.TeamFoundation.Framework.Server.dll

namespace Microsoft.TeamFoundation.Framework.Server
{
  public static class TeamFoundationEventId
  {
    public static readonly int DefaultEventId = 0;
    public static readonly int ExceptionBaseEventId = 3000;
    public static readonly int DefaultExceptionEventId = TeamFoundationEventId.ExceptionBaseEventId;
    public static readonly int AuthenticationException = TeamFoundationEventId.ExceptionBaseEventId + 1;
    public static readonly int AuthorizationException = TeamFoundationEventId.ExceptionBaseEventId + 2;
    public static readonly int InvalidIdentityException = TeamFoundationEventId.ExceptionBaseEventId + 4;
    public static readonly int IdentityNotFoundException = TeamFoundationEventId.ExceptionBaseEventId + 5;
    public static readonly int DatabaseFullException = TeamFoundationEventId.ExceptionBaseEventId + 6;
    public static readonly int DatabaseConfigurationException = TeamFoundationEventId.ExceptionBaseEventId + 7;
    public static readonly int DatabaseConnectionException = TeamFoundationEventId.ExceptionBaseEventId + 8;
    public static readonly int UnexpectedDatabaseResultException = TeamFoundationEventId.ExceptionBaseEventId + 9;
    public static readonly int UnknownPermissionException = TeamFoundationEventId.ExceptionBaseEventId + 10;
    public static readonly int SubscriberNotImplemented = TeamFoundationEventId.ExceptionBaseEventId + 11;
    public static readonly int PlugInLoadException = TeamFoundationEventId.ExceptionBaseEventId + 12;
    public static readonly int UnableToContactService = TeamFoundationEventId.ExceptionBaseEventId + 13;
    public static readonly int ServerFatalInitError = TeamFoundationEventId.ExceptionBaseEventId + 14;
    public static readonly int UnhandledException = TeamFoundationEventId.ExceptionBaseEventId + 15;
    public static readonly int WatsonReportException = TeamFoundationEventId.ExceptionBaseEventId + 16;
    public static readonly int WatsonReportFiled = TeamFoundationEventId.ExceptionBaseEventId + 17;
    public static readonly int ThreadAbortException = TeamFoundationEventId.ExceptionBaseEventId + 18;
    public static readonly int InstanceMismatchError = TeamFoundationEventId.ExceptionBaseEventId + 19;
    public static readonly int SchemaVersionMismatchError = TeamFoundationEventId.ExceptionBaseEventId + 20;
    public static readonly int ATStampMismatchError = TeamFoundationEventId.ExceptionBaseEventId + 21;
    public static readonly int MalformedRegistrationData = TeamFoundationEventId.ExceptionBaseEventId + 22;
    public static readonly int InvalidDownloadKey = TeamFoundationEventId.ExceptionBaseEventId + 23;
    public static readonly int FileTransferException = TeamFoundationEventId.ExceptionBaseEventId + 24;
    public static readonly int DeltaComputationException = TeamFoundationEventId.ExceptionBaseEventId + 25;
    public static readonly int EventNotificationException = TeamFoundationEventId.ExceptionBaseEventId + 26;
    public static readonly int UnableToReportException = TeamFoundationEventId.ExceptionBaseEventId + 27;
    public static readonly int RegistrationDataNotAvailable = TeamFoundationEventId.ExceptionBaseEventId + 28;
    public static readonly int AuthenticationTypeNotSupported = TeamFoundationEventId.ExceptionBaseEventId + 29;
    public static readonly int AclChangedEventException = TeamFoundationEventId.ExceptionBaseEventId + 30;
    public static readonly int ConfigurationError = TeamFoundationEventId.ExceptionBaseEventId + 31;
    public static readonly int ConfigurationException = TeamFoundationEventId.ExceptionBaseEventId + 32;
    public static readonly int DataChangedEventException = TeamFoundationEventId.ExceptionBaseEventId + 33;
    public static readonly int DeleteTemplateException = TeamFoundationEventId.ExceptionBaseEventId + 34;
    public static readonly int EventNotFoundError = TeamFoundationEventId.ExceptionBaseEventId + 35;
    public static readonly int TeamBuildVersionControlException = TeamFoundationEventId.ExceptionBaseEventId + 36;
    public static readonly int InvalidEventStatusException = TeamFoundationEventId.ExceptionBaseEventId + 38;
    public static readonly int MultipleRegisteredForToolAndService = TeamFoundationEventId.ExceptionBaseEventId + 40;
    public static readonly int NoEventSchemasRegisteredError = TeamFoundationEventId.ExceptionBaseEventId + 41;
    public static readonly int RetryFailedNotificationsException = TeamFoundationEventId.ExceptionBaseEventId + 42;
    public static readonly int SubscriptionEvaluationException = TeamFoundationEventId.ExceptionBaseEventId + 43;
    public static readonly int SubscriptionFormatException = TeamFoundationEventId.ExceptionBaseEventId + 44;
    public static readonly int TemplateDownloadException = TeamFoundationEventId.ExceptionBaseEventId + 45;
    public static readonly int TemplateUploadException = TeamFoundationEventId.ExceptionBaseEventId + 46;
    public static readonly int TimeoutCreatingNotifications = TeamFoundationEventId.ExceptionBaseEventId + 47;
    public static readonly int TimeoutException = TeamFoundationEventId.ExceptionBaseEventId + 48;
    public static readonly int UnexpectedDatabaseResultError = TeamFoundationEventId.ExceptionBaseEventId + 49;
    public static readonly int WebMethodNotificationSoapException = TeamFoundationEventId.ExceptionBaseEventId + 50;
    public static readonly int WebMethodNotificationWebException = TeamFoundationEventId.ExceptionBaseEventId + 51;
    public static readonly int SendNotificationException = TeamFoundationEventId.ExceptionBaseEventId + 52;
    public static readonly int IdentityDeletedEventException = TeamFoundationEventId.ExceptionBaseEventId + 53;
    public static readonly int InitializationError = TeamFoundationEventId.ExceptionBaseEventId + 54;
    public static readonly int DatabaseFileGrowthException = TeamFoundationEventId.ExceptionBaseEventId + 55;
    public static readonly int ValidationException = TeamFoundationEventId.ExceptionBaseEventId + 56;
    public static readonly int SecurityException = TeamFoundationEventId.ExceptionBaseEventId + 57;
    public static readonly int TeamFoundationSchedulerInitError = TeamFoundationEventId.ExceptionBaseEventId + 59;
    public static readonly int TeamFoundationSchedulerTaskError = TeamFoundationEventId.ExceptionBaseEventId + 62;
    public static readonly int DatabaseRuntimeException = TeamFoundationEventId.ExceptionBaseEventId + 63;
    public static readonly int DateTimeShiftDetected = TeamFoundationEventId.ExceptionBaseEventId + 64;
    public static readonly int AnalysisServiceConnectionException = TeamFoundationEventId.ExceptionBaseEventId + 65;
    public static readonly int ServiceException = TeamFoundationEventId.ExceptionBaseEventId + 66;
    public static readonly int BuildStartFailure = TeamFoundationEventId.ExceptionBaseEventId + 67;
    public static readonly int MicrosoftBuildError = TeamFoundationEventId.ExceptionBaseEventId + 68;
    public static readonly int BackgroundIdentitySyncException = TeamFoundationEventId.ExceptionBaseEventId + 69;
    public static readonly int ClientCertificateException = TeamFoundationEventId.ExceptionBaseEventId + 70;
    public static readonly int ActiveDirectorySyncErrors = TeamFoundationEventId.ExceptionBaseEventId + 71;
    public static readonly int LicenseExpiredError = TeamFoundationEventId.ExceptionBaseEventId + 72;
    public static readonly int ServicingError = TeamFoundationEventId.ExceptionBaseEventId + 73;
    public static readonly int VirtualPathsConflictError = TeamFoundationEventId.ExceptionBaseEventId + 74;
    public static readonly int HostStatusChangeError = TeamFoundationEventId.ExceptionBaseEventId + 75;
    public static readonly int MissingCatalogNodeParent = TeamFoundationEventId.ExceptionBaseEventId + 76;
    public static readonly int InvalidApplicationConfiguration = TeamFoundationEventId.ExceptionBaseEventId + 77;
    public static readonly int ApplicationConfigurationFixed = TeamFoundationEventId.ExceptionBaseEventId + 78;
    public static readonly int InvalidLicenseError = TeamFoundationEventId.ExceptionBaseEventId + 79;
    public static readonly int MessageQueueError = TeamFoundationEventId.ExceptionBaseEventId + 80;
    public static readonly int FailedToDisposeContext = TeamFoundationEventId.ExceptionBaseEventId + 81;
    public static readonly int DatabaseBackupsError = TeamFoundationEventId.ExceptionBaseEventId + 82;
    public static readonly int CircuitBreakerSemaphoreRejectionCount = TeamFoundationEventId.ExceptionBaseEventId + 84;
    public static readonly int CircuitBreakerShortCircuited = TeamFoundationEventId.ExceptionBaseEventId + 85;
    public static readonly int ExceptionMaxEventId = TeamFoundationEventId.ExceptionBaseEventId + 85;
    public static readonly int ISleepIfBusyInTransaction = TeamFoundationEventId.ExceptionBaseEventId + 86;
    public static readonly int SqlFaultInjection = TeamFoundationEventId.ExceptionBaseEventId + 87;
    public static readonly int ProcessJobQueueError = TeamFoundationEventId.ExceptionBaseEventId + 88;
    public static readonly int JobCancellationTimeout = TeamFoundationEventId.ExceptionBaseEventId + 89;
    public static readonly int AzureBillingVerificationInvalidEvents = TeamFoundationEventId.ExceptionBaseEventId + 90;
    public static readonly int StrongBoxFailedEvent = TeamFoundationEventId.ExceptionBaseEventId + 91;
    public static readonly int AzureBillingFailedEvent = TeamFoundationEventId.ExceptionBaseEventId + 92;
    public static readonly int ProxyDuplicatedServerUri = TeamFoundationEventId.ExceptionBaseEventId + 93;
    public static readonly int WitBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 200;
    public static readonly int WorkItemDatabaseLocException = TeamFoundationEventId.WitBaseEventId + 1;
    public static readonly int WorkItemDatabaseLinkTypeFieldInstallException = TeamFoundationEventId.WitBaseEventId + 2;
    public static readonly int WorkItemOnlineLongSchemaMigrationFailed = TeamFoundationEventId.WitBaseEventId + 99;
    public static readonly int WarehouseErrorsBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 300;
    public static readonly int OrganizationRequestContextMissing = TeamFoundationEventId.WarehouseErrorsBaseEventId + 1;
    public static readonly int CollectionRequestContextMissing = TeamFoundationEventId.WarehouseErrorsBaseEventId + 2;
    public static readonly int AnalysisServicesValidationError = TeamFoundationEventId.WarehouseErrorsBaseEventId + 3;
    public static readonly int DatabaseNotFoundException = TeamFoundationEventId.WarehouseErrorsBaseEventId + 4;
    public static readonly int WarehouseAdapterErrors = TeamFoundationEventId.WarehouseErrorsBaseEventId + 5;
    public static readonly int EdtErrorsBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 500;
    public static readonly int EdtRunUnrecoverableGeneric = TeamFoundationEventId.EdtErrorsBaseEventId + 1;
    public static readonly int EdtRunUnrecoverable = TeamFoundationEventId.EdtErrorsBaseEventId + 2;
    public static readonly int EdtBuildCoverageUnrecoverableGeneric = TeamFoundationEventId.EdtErrorsBaseEventId + 3;
    public static readonly int EdtBuildCoverageUnrecoverable = TeamFoundationEventId.EdtErrorsBaseEventId + 4;
    public static readonly int EdtAdapterRunUnrecoverableGeneric = TeamFoundationEventId.EdtErrorsBaseEventId + 5;
    public static readonly int EdtAdapterRunUnrecoverable = TeamFoundationEventId.EdtErrorsBaseEventId + 6;
    public static readonly int EdtErrorsMaxEventId = TeamFoundationEventId.EdtAdapterRunUnrecoverable;
    public static readonly int BuildServerErrorBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 600;
    public static readonly int BuildServerException = TeamFoundationEventId.BuildServerErrorBaseEventId;
    public static readonly int BuildIsCurrentlyQueuedTooLong = TeamFoundationEventId.BuildServerErrorBaseEventId + 1;
    public static readonly int BuildWasQueuedTooLong = TeamFoundationEventId.BuildServerErrorBaseEventId + 2;
    public static readonly int BuildAlertJobFailed = TeamFoundationEventId.BuildServerErrorBaseEventId + 4;
    public static readonly int BuildAvailability = TeamFoundationEventId.BuildServerErrorBaseEventId + 5;
    public static readonly int BuildAvailability1H = TeamFoundationEventId.BuildServerErrorBaseEventId + 6;
    public static readonly int CheckedTooLongAgo = TeamFoundationEventId.BuildServerErrorBaseEventId + 7;
    public static readonly int BuildDetailCleanupJobFailure = TeamFoundationEventId.BuildServerErrorBaseEventId + 8;
    public static readonly int FatalErrorDeployingBuildTemplate = TeamFoundationEventId.BuildServerErrorBaseEventId + 9;
    public static readonly int BuildMachineCount = TeamFoundationEventId.BuildServerErrorBaseEventId + 10;
    public static readonly int MachinePoolNotReady = TeamFoundationEventId.BuildServerErrorBaseEventId + 11;
    public static readonly int BuildCount1h = TeamFoundationEventId.BuildServerErrorBaseEventId + 12;
    public static readonly int BuildSuccessPercentage1h = TeamFoundationEventId.BuildServerErrorBaseEventId + 13;
    public static readonly int BuildAverageDuration1h = TeamFoundationEventId.BuildServerErrorBaseEventId + 14;
    public static readonly int BuildSuccessPercentage24h = TeamFoundationEventId.BuildServerErrorBaseEventId + 15;
    public static readonly int QueryHealthJobFailed = TeamFoundationEventId.BuildServerErrorBaseEventId + 16;
    public static readonly int OrchestrationDispatcherJobFailed = TeamFoundationEventId.BuildServerErrorBaseEventId + 17;
    public static readonly int BuildMachineErrorsBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 750;
    public static readonly int DefaultBuildMachineErrorEventId = TeamFoundationEventId.BuildMachineErrorsBaseEventId;
    public static readonly int BuildMachineInvalidBuildRequest = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 1;
    public static readonly int BuildMachineInvalidBuildDirectory = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 3;
    public static readonly int BuildMachineInvalidFileSystem = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 4;
    public static readonly int BuildMachineInvalidBuildTypeFile = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 5;
    public static readonly int BuildMachineIOError = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 6;
    public static readonly int BuildMachineUnableToAbort = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 7;
    public static readonly int BuildMachineInvalidDropLocation = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 8;
    public static readonly int BuildMachineUnableToLocateVCBuild = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 9;
    public static readonly int BuildMachineInvalidBuildTypeNoDownload = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 10;
    public static readonly int BuildMachineInvalidBuildType = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 11;
    public static readonly int BuildMachineCannotFindFile = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 12;
    public static readonly int BuildFailure = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 13;
    public static readonly int BuildSlowReimageTime = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 14;
    public static readonly int BuildReimageFailed = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 15;
    public static readonly int BuildReimageUnexpectedFailure = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 16;
    public static readonly int BuildTimeout = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 17;
    public static readonly int BuildMachineErrorsMaxEventId = TeamFoundationEventId.BuildMachineErrorsBaseEventId + 17;
    public static readonly int DiscussionErrorBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 800;
    public static readonly int DiscussionServiceException = TeamFoundationEventId.DiscussionErrorBaseEventId;
    public static readonly int VersionControlErrorBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 1000;
    public static readonly int ServerException = TeamFoundationEventId.VersionControlErrorBaseEventId;
    public static readonly int ServerItemException = TeamFoundationEventId.VersionControlErrorBaseEventId + 1;
    public static readonly int IncompleteUploadException = TeamFoundationEventId.VersionControlErrorBaseEventId + 2;
    public static readonly int IncompatibleCompressionFormatException = TeamFoundationEventId.VersionControlErrorBaseEventId + 3;
    public static readonly int IncorrectSizeException = TeamFoundationEventId.VersionControlErrorBaseEventId + 4;
    public static readonly int FileIdNotFoundException = TeamFoundationEventId.VersionControlErrorBaseEventId + 5;
    public static readonly int ResourceStreamNotFoundException = TeamFoundationEventId.VersionControlErrorBaseEventId + 6;
    public static readonly int ProxyException = TeamFoundationEventId.VersionControlErrorBaseEventId + 7;
    public static readonly int DownloadTicketValidationException = TeamFoundationEventId.VersionControlErrorBaseEventId + 8;
    public static readonly int BadChecksumException = TeamFoundationEventId.VersionControlErrorBaseEventId + 9;
    public static readonly int ResourceIdAlreadyExists = TeamFoundationEventId.VersionControlErrorBaseEventId + 10;
    public static readonly int LabManagementBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 1100;
    public static readonly int LabServiceException = TeamFoundationEventId.LabManagementBaseEventId + 1;
    public static readonly int DeploymentRigServiceException = TeamFoundationEventId.LabManagementBaseEventId + 2;
    public static readonly int TestRigServiceException = TeamFoundationEventId.LabManagementBaseEventId + 3;
    public static readonly int TestManagementServiceException = TeamFoundationEventId.LabManagementBaseEventId + 4;
    public static readonly int TestManagementNotificationFailure = TeamFoundationEventId.LabManagementBaseEventId + 5;
    private static readonly int EtmBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 1200;
    public static readonly int TeamFoundationCatalogServiceException = TeamFoundationEventId.EtmBaseEventId + 1;
    public static readonly int CollectionDoesNotExistException = TeamFoundationEventId.EtmBaseEventId + 2;
    public static readonly int CollectionMisconfiguredException = TeamFoundationEventId.EtmBaseEventId + 3;
    public static readonly int CollectionPropertyException = TeamFoundationEventId.EtmBaseEventId + 4;
    public static readonly int VirtualPathMappingException = TeamFoundationEventId.EtmBaseEventId + 5;
    public static readonly int CannotUpdateDefaultCollectionException = TeamFoundationEventId.EtmBaseEventId + 6;
    public static readonly int TeamFoundationIdentityServiceException = TeamFoundationEventId.EtmBaseEventId + 7;
    public static readonly int VirtualPathsConflictException = TeamFoundationEventId.EtmBaseEventId + 8;
    public static readonly int TooManyItemsException = TeamFoundationEventId.EtmBaseEventId + 9;
    public static readonly int HostManagementException = TeamFoundationEventId.EtmBaseEventId + 13;
    public static readonly int TeamFoundationJobServiceException = TeamFoundationEventId.EtmBaseEventId + 14;
    public static readonly int TeamFoundationLocationServiceException = TeamFoundationEventId.EtmBaseEventId + 15;
    public static readonly int EventTypeDoesNotExistException = TeamFoundationEventId.EtmBaseEventId + 16;
    public static readonly int SubscriptionNotFoundException = TeamFoundationEventId.EtmBaseEventId + 17;
    public static readonly int PropertyServiceException = TeamFoundationEventId.EtmBaseEventId + 18;
    public static readonly int TeamFoundationSecurityServiceException = TeamFoundationEventId.EtmBaseEventId + 19;
    public static readonly int ParseErrorException = TeamFoundationEventId.EtmBaseEventId + 20;
    public static readonly int InvalidConfigurationException = TeamFoundationEventId.EtmBaseEventId + 22;
    public static readonly int EventErrorException = TeamFoundationEventId.EtmBaseEventId + 23;
    public static readonly int ActionDeniedBySubscriberException = TeamFoundationEventId.EtmBaseEventId + 24;
    public static readonly int GroupSecuritySubsystemServiceException = TeamFoundationEventId.EtmBaseEventId + 25;
    public static readonly int AuthorizationSubsystemServiceException = TeamFoundationEventId.EtmBaseEventId + 26;
    public static readonly int CommonStructureSubsystemServiceException = TeamFoundationEventId.EtmBaseEventId + 27;
    public static readonly int DBResultDeadlockException = TeamFoundationEventId.EtmBaseEventId + 29;
    public static readonly int DatabaseInstanceException = TeamFoundationEventId.EtmBaseEventId + 30;
    public static readonly int DatabaseSchemaException = TeamFoundationEventId.EtmBaseEventId + 31;
    public static readonly int JobAgentExecutingUnassignedJob = TeamFoundationEventId.EtmBaseEventId + 32;
    public static readonly int JobRunnerThreadHasNotTerminated = TeamFoundationEventId.EtmBaseEventId + 34;
    public static readonly int TeamFoundationValidationException = TeamFoundationEventId.EtmBaseEventId + 35;
    public static readonly int AccountException = TeamFoundationEventId.EtmBaseEventId + 36;
    public static readonly int DuplicateFileNameException = TeamFoundationEventId.EtmBaseEventId + 37;
    public static readonly int FileAlreadyUploadedException = TeamFoundationEventId.EtmBaseEventId + 38;
    public static readonly int AccessControlException = TeamFoundationEventId.EtmBaseEventId + 39;
    public static readonly int SqlAzureDbException = TeamFoundationEventId.EtmBaseEventId + 40;
    public static readonly int ApplicationLeaseExpired = TeamFoundationEventId.EtmBaseEventId + 41;
    public static readonly int UnknownMigrationOwnerException = TeamFoundationEventId.EtmBaseEventId + 42;
    public static readonly int DBExecutingDeadlockException = TeamFoundationEventId.EtmBaseEventId + 43;
    public static readonly int SqlAzureTooBusy = TeamFoundationEventId.EtmBaseEventId + 44;
    public static readonly int TeamFoundationResourceManagementServiceException = TeamFoundationEventId.EtmBaseEventId + 45;
    public static readonly int TeamFoundationOAuthServiceException = TeamFoundationEventId.EtmBaseEventId + 46;
    public static readonly int JobsStillRunningError = TeamFoundationEventId.EtmBaseEventId + 47;
    public static readonly int ProcessStillRunningError = TeamFoundationEventId.EtmBaseEventId + 48;
    public static readonly int JobAgentTeardownTimedOutError = TeamFoundationEventId.EtmBaseEventId + 49;
    public static readonly int CleanupJobInProgressException = TeamFoundationEventId.EtmBaseEventId + 50;
    public static readonly int ThrottleOneAlertTypeError = TeamFoundationEventId.EtmBaseEventId + 51;
    public static readonly int ThrottleAllAlertsError = TeamFoundationEventId.EtmBaseEventId + 52;
    public static readonly int AcsConnectionError = TeamFoundationEventId.EtmBaseEventId + 54;
    public static readonly int RegisterWebApplicationError = TeamFoundationEventId.EtmBaseEventId + 55;
    public static readonly int SqlAzureExhaustedRetriesAlert = TeamFoundationEventId.EtmBaseEventId + 56;
    public static readonly int SqlAzureExceptionsAlert = TeamFoundationEventId.EtmBaseEventId + 59;
    public static readonly int SqlAzureSlowQueriesAlert = TeamFoundationEventId.EtmBaseEventId + 60;
    public static readonly int DuplicateFileIdDataspaceException = TeamFoundationEventId.EtmBaseEventId + 62;
    public static readonly int SqlAzureSessionTerminated = TeamFoundationEventId.EtmBaseEventId + 63;
    public static readonly int UnableToCreateNewPartitionDb = TeamFoundationEventId.EtmBaseEventId + 64;
    public static readonly int SyncBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 1300;
    public static readonly int SyncException = TeamFoundationEventId.SyncBaseEventId + 1;
    public static readonly int ServiceLocatorException = TeamFoundationEventId.SyncBaseEventId + 2;
    public static readonly int InvalidFieldMappingException = TeamFoundationEventId.SyncBaseEventId + 3;
    public static readonly int SyncServicesException = TeamFoundationEventId.SyncBaseEventId + 4;
    public static readonly int SyncFrameworkException = TeamFoundationEventId.SyncBaseEventId + 5;
    public static readonly int SyncProviderException = TeamFoundationEventId.SyncBaseEventId + 6;
    public static readonly int DalFailureException = TeamFoundationEventId.SyncBaseEventId + 7;
    public static readonly int AbortSyncException = TeamFoundationEventId.SyncBaseEventId + 8;
    public static readonly int ItemDoesNotExistOrAccessDenied = TeamFoundationEventId.SyncBaseEventId + 9;
    public static readonly int InvalidSyncItemException = TeamFoundationEventId.SyncBaseEventId + 10;
    public static readonly int InvalidSyncDataTypeException = TeamFoundationEventId.SyncBaseEventId + 11;
    public static readonly int UnsupportScopeFilterException = TeamFoundationEventId.SyncBaseEventId + 12;
    public static readonly int SyncCoreFieldNotFoundException = TeamFoundationEventId.SyncBaseEventId + 13;
    public static readonly int SyncFieldNotFoundException = TeamFoundationEventId.SyncBaseEventId + 14;
    public static readonly int SyncProjectNotFoundException = TeamFoundationEventId.SyncBaseEventId + 15;
    public static readonly int JobResultEventId = TeamFoundationEventId.ExceptionBaseEventId + 1400;
    public static readonly int JobPartialSuccessStateEnter = TeamFoundationEventId.JobResultEventId + 1;
    public static readonly int JobPartialSuccessStateLeave = TeamFoundationEventId.JobResultEventId + 2;
    public static readonly int JobFailedStateEnter = TeamFoundationEventId.JobResultEventId + 3;
    public static readonly int JobFailedStateLeave = TeamFoundationEventId.JobResultEventId + 4;
    public static readonly int JobDisabledStateEnter = TeamFoundationEventId.JobResultEventId + 5;
    public static readonly int JobDisabledStateLeave = TeamFoundationEventId.JobResultEventId + 6;
    public static readonly int JobFailedError = TeamFoundationEventId.JobResultEventId + 7;
    public static readonly int AnalyticsTFSJobBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 1450;
    public static readonly int AnalyticsTFSJobFailed = TeamFoundationEventId.AnalyticsTFSJobBaseEventId + 1;
    public static readonly int AnalyticsTFSJobPartialSucces = TeamFoundationEventId.AnalyticsTFSJobBaseEventId + 2;
    public static readonly int StrongBoxException = TeamFoundationEventId.ExceptionBaseEventId + 1500;
    public static readonly int StrongBoxDrawerExistsException = TeamFoundationEventId.StrongBoxException + 1;
    public static readonly int StrongBoxStaleConfigurationSecretAlert = TeamFoundationEventId.StrongBoxException + 2;
    public static readonly int WelcomePortalExceptionBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 1600;
    public static readonly int WpErrorBlobContainerIsEmpty = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 1;
    public static readonly int WpErrorSiteStorageResourceNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 2;
    public static readonly int WpErrorMarkerBlobNotAccessible = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 3;
    public static readonly int WpErrorBlobDirectoryNotFoundInMarkerBlob = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 4;
    public static readonly int WpErrorInvalidBlobFileSize = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 5;
    public static readonly int WpErrorSyncFailed = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 6;
    public static readonly int WpErrorMonitoringFailed = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 7;
    public static readonly int WpErrorUpdateFailed = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 8;
    public static readonly int WpErrorMdfFileNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 25;
    public static readonly int WpErrorDataSourceOrMdfNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 26;
    public static readonly int WpErrorConnectionStringNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 27;
    public static readonly int WpErrorWebConfigOrAppDataNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 28;
    public static readonly int WpErrorCouldNotDeleteURI = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 29;
    public static readonly int WpErrorFoundDuplicateFolder = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 30;
    public static readonly int WpErrorCouldNotSyncBlob = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 31;
    public static readonly int WpErrorCouldNotCreateDirectory = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 32;
    public static readonly int WpFailToGetTFSServiceStatus = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 33;
    public static readonly int WpUnknownStatusValueRetrieved = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 34;
    public static readonly int WpErrorSourceStorageAccountNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 50;
    public static readonly int WpErrorSourceSiteNameSettingNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 51;
    public static readonly int WpErrorDestinationSettingNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 52;
    public static readonly int WpErrorDestinationSiteNameSettingNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 53;
    public static readonly int WpErrorDestinationStorageAccountNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 54;
    public static readonly int WpErrorSendMailFailed = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 55;
    public static readonly int WpErrorSettingsFileNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 56;
    public static readonly int WpErrorLocalSiteToUseNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 57;
    public static readonly int WpErrorLocalSiteToUsePreviousNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 58;
    public static readonly int WpErrorBlobPrevSiteToUseFileNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 59;
    public static readonly int WpErrorBlobSiteToUseFileNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 60;
    public static readonly int WpErrorBlobSemaphoreFileNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 61;
    public static readonly int WpErrorWebConfigFileNotFound = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 62;
    public static readonly int WpErrorWebConfigCannotReadWebConfigContents = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 63;
    public static readonly int WpErrorWebConfigMissingIPSecurity = TeamFoundationEventId.WelcomePortalExceptionBaseEventId + 64;
    public static readonly int FileContainerBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 1700;
    public static readonly int ProfileException = TeamFoundationEventId.ExceptionBaseEventId + 1800;
    public static readonly int ClientNotificationException = TeamFoundationEventId.ExceptionBaseEventId + 1900;
    public static readonly int MachineManagementBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 2000;
    public static readonly int MachineManagementWorkflowFailed = TeamFoundationEventId.MachineManagementBaseEventId + 1;
    public static readonly int MachineManagementMachineInstancesUnresponsive = TeamFoundationEventId.MachineManagementBaseEventId + 2;
    public static readonly int MachineManagementInfrastructureCount = TeamFoundationEventId.MachineManagementBaseEventId + 3;
    public static readonly int MachineManagementAverageCpu = TeamFoundationEventId.MachineManagementBaseEventId + 4;
    public static readonly int MachineManagementAverageMemory = TeamFoundationEventId.MachineManagementBaseEventId + 6;
    public static readonly int MachineManagementMaximumMemory = TeamFoundationEventId.MachineManagementBaseEventId + 7;
    public static readonly int MachineManagementMinimumDiskSpace = TeamFoundationEventId.MachineManagementBaseEventId + 8;
    public static readonly int MachineManagementStorageQuotaExceeded = TeamFoundationEventId.MachineManagementBaseEventId + 9;
    public static readonly int MachineManagementMachineInstancesNotStartedRequest = TeamFoundationEventId.MachineManagementBaseEventId + 10;
    public static readonly int AdminBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 2100;
    public static readonly int AdminCollectionServicingMonitoringFailed = TeamFoundationEventId.AdminBaseEventId + 1;
    public static readonly int UpgradeJobFailedLockWasHeldForTooLong = TeamFoundationEventId.AdminBaseEventId + 2;
    public static readonly int UpgradeJobsFailedEventId = TeamFoundationEventId.AdminBaseEventId + 4;
    public static readonly int LicensingeBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 2200;
    public static readonly int LicensingGetMsdnEntitlementsFailed = TeamFoundationEventId.LicensingeBaseEventId + 1;
    public static readonly int EmailNotificationBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 2300;
    public static readonly int EmailNotificationSendEmail = TeamFoundationEventId.EmailNotificationBaseEventId + 1;
    public static readonly int RoutingServiceBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 2400;
    public static readonly int ClientNotificationBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 2500;
    public static readonly int ClientNotificationGetSubscriptionException = TeamFoundationEventId.ClientNotificationBaseEventId + 1;
    public static readonly int ClientNotificationCreateSubscriberThrottle = TeamFoundationEventId.ClientNotificationBaseEventId + 2;
    public static readonly int ClientNotificationCreateSubscriberWarningThrottle = TeamFoundationEventId.ClientNotificationBaseEventId + 3;
    public static readonly int ServiceMonitorBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 2600;
    public static readonly int OiChannelHealthAlert = TeamFoundationEventId.ServiceMonitorBaseEventId + 1;
    public static readonly int OiKpiFreshnessAlert = TeamFoundationEventId.ServiceMonitorBaseEventId + 2;
    public static readonly int OiKpiValueAlert = TeamFoundationEventId.ServiceMonitorBaseEventId + 3;
    public static readonly int OiJobFailureStatefulAlert = TeamFoundationEventId.ServiceMonitorBaseEventId + 4;
    public static readonly int OiJobFailureSimpleAlert = TeamFoundationEventId.ServiceMonitorBaseEventId + 5;
    public static readonly int MdmDeploymentStatus = TeamFoundationEventId.ServiceMonitorBaseEventId + 6;
    public static readonly int TestExecutionBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 2700;
    public static readonly int TestExecutionObjectNotFoundException = TeamFoundationEventId.TestExecutionBaseEventId + 1;
    public static readonly int TestExecutionServiceInvalidOperationException = TeamFoundationEventId.TestExecutionBaseEventId + 2;
    public static readonly int TestExecutionServiceAvailability1hrEventId = TeamFoundationEventId.TestExecutionBaseEventId + 3;
    public static readonly int TestExecutionServiceAvailability24hrEventId = TeamFoundationEventId.TestExecutionBaseEventId + 4;
    public static readonly int TestExecutionAgentRegistrationFailureCount1hrEventId = TeamFoundationEventId.TestExecutionBaseEventId + 5;
    public static readonly int TestExecutionAgentRegistrationFailureCount24hrEventId = TeamFoundationEventId.TestExecutionBaseEventId + 6;
    public static readonly int TestRunAbortCount1hrEventId = TeamFoundationEventId.TestExecutionBaseEventId + 7;
    public static readonly int TestRunAbortCount24hrEventId = TeamFoundationEventId.TestExecutionBaseEventId + 8;
    public static readonly int TestEnvironmentAlreadyExistsException = TeamFoundationEventId.TestExecutionBaseEventId + 50;
    public static readonly int TestManagementBaseEventId = TeamFoundationEventId.ExceptionBaseEventId + 2800;
    public static readonly int TestManagementServiceAvailability1hEventId = TeamFoundationEventId.TestManagementBaseEventId + 1;
    public static readonly int TestManagementServiceAvailability24hEventId = TeamFoundationEventId.TestManagementBaseEventId + 2;
    public static readonly int TCMServiceAvailability1hEventId = TeamFoundationEventId.TestManagementBaseEventId + 3;
    public static readonly int TCMServiceAvailability24hEventId = TeamFoundationEventId.TestManagementBaseEventId + 4;
    public static readonly int TestResultsReportsOperationFailedId = TeamFoundationEventId.TestManagementBaseEventId + 5;
    public static readonly int TestManagementServiceWITOperationFailedEventId = TeamFoundationEventId.TestManagementBaseEventId + 98;
    public static readonly int TestManagementServicePlanRestoreFailedEventId = TeamFoundationEventId.TestManagementBaseEventId + 99;
    public static readonly int SigningKeyLifecycleException = TeamFoundationEventId.ExceptionBaseEventId + 2950;
    public static readonly int AadMemberStatusException = TeamFoundationEventId.ExceptionBaseEventId + 2951;
    public static readonly int WarningBaseEventId = 6000;
    public static readonly int DefaultWarningEventId = TeamFoundationEventId.WarningBaseEventId;
    public static readonly int InvalidDownloadKeyLength = TeamFoundationEventId.WarningBaseEventId + 1;
    public static readonly int FileCacheRootNotConfigured = TeamFoundationEventId.WarningBaseEventId + 2;
    public static readonly int UnhandledExceptionOccurred = TeamFoundationEventId.WarningBaseEventId + 3;
    public static readonly int WatsonReportSuppressed = TeamFoundationEventId.WarningBaseEventId + 4;
    public static readonly int InstalledUICultureNotFound = TeamFoundationEventId.WarningBaseEventId + 5;
    public static readonly int PerformanceCounterInitialization = TeamFoundationEventId.WarningBaseEventId + 6;
    public static readonly int InvalidUri = TeamFoundationEventId.WarningBaseEventId + 7;
    public static readonly int InvalidIdentity = TeamFoundationEventId.WarningBaseEventId + 8;
    public static readonly int ConfigurationWarning = TeamFoundationEventId.WarningBaseEventId + 9;
    public static readonly int ResourceAccessException = TeamFoundationEventId.WarningBaseEventId + 10;
    public static readonly int SmtpConnectionException = TeamFoundationEventId.WarningBaseEventId + 11;
    public static readonly int AlertNotProcessed = TeamFoundationEventId.WarningBaseEventId + 12;
    public static readonly int ActiveDirectorySyncAborted = TeamFoundationEventId.WarningBaseEventId + 13;
    public static readonly int DestroyItemEventId = TeamFoundationEventId.WarningBaseEventId + 14;
    public static readonly int LicenseExpiringWarning = TeamFoundationEventId.WarningBaseEventId + 16;
    public static readonly int ForcefullyShuttingDown = TeamFoundationEventId.WarningBaseEventId + 17;
    public static readonly int ConnectionStringUpdated = TeamFoundationEventId.WarningBaseEventId + 18;
    public static readonly int RequestCanceled = TeamFoundationEventId.WarningBaseEventId + 19;
    public static readonly int CatalogDataEntryFailed = TeamFoundationEventId.WarningBaseEventId + 20;
    public static readonly int InvalidTracingConfiguration = TeamFoundationEventId.WarningBaseEventId + 21;
    public static readonly int InvalidCatalogNodeDependencyLoaded = TeamFoundationEventId.WarningBaseEventId + 22;
    public static readonly int PropagateServiceDefinitionFailed = TeamFoundationEventId.WarningBaseEventId + 23;
    public static readonly int JobQueueEntryWithoutDefinition = TeamFoundationEventId.WarningBaseEventId + 24;
    public static readonly int UnableToRecordJobResult = TeamFoundationEventId.WarningBaseEventId + 25;
    public static readonly int WarningMaxEventId = TeamFoundationEventId.WarningBaseEventId + 25;
    public static readonly int EdtWarningBaseEventId = TeamFoundationEventId.WarningBaseEventId + 500;
    public static readonly int EdtRunRecoverable = TeamFoundationEventId.EdtWarningBaseEventId + 1;
    public static readonly int EdtBuildCoverageRecoverable = TeamFoundationEventId.EdtWarningBaseEventId + 2;
    public static readonly int EdtRunCoverageRecoverable = TeamFoundationEventId.EdtWarningBaseEventId + 3;
    public static readonly int EdtTestTypeError = TeamFoundationEventId.EdtWarningBaseEventId + 4;
    public static readonly int EdtWarningMaxEventId = TeamFoundationEventId.EdtTestTypeError;
    public static readonly int BuildMachineWarningBaseEventId = TeamFoundationEventId.WarningBaseEventId + 750;
    public static readonly int BuildMachineIOWarning = TeamFoundationEventId.BuildMachineWarningBaseEventId + 1;
    public static readonly int BuildMachineWarningMaxEventId = TeamFoundationEventId.BuildMachineWarningBaseEventId + 1;
    public static readonly int BuildServerWarningBaseEventId = TeamFoundationEventId.WarningBaseEventId + 800;
    public static readonly int BuildServerRetentionPolicyWarning = TeamFoundationEventId.BuildServerWarningBaseEventId + 1;
    public static readonly int BuildServerWarningMaxEventId = TeamFoundationEventId.BuildServerWarningBaseEventId + 1;
    public static readonly int ServiceHostMonitorWarningBaseEventId = TeamFoundationEventId.WarningBaseEventId + 1000;
    public static readonly int QueuedRequestThresholdExceeded = TeamFoundationEventId.ServiceHostMonitorWarningBaseEventId + 1;
    public static readonly int QueuedRequestThresholdCleared = TeamFoundationEventId.ServiceHostMonitorWarningBaseEventId + 2;
    public static readonly int QueuedRequestElapsedThresholdExceeded = TeamFoundationEventId.ServiceHostMonitorWarningBaseEventId + 3;
    public static readonly int QueuedRequestElapsedThresholdCleared = TeamFoundationEventId.ServiceHostMonitorWarningBaseEventId + 4;
    public static readonly int TotalExecutionElapsedThresholdExceeded = TeamFoundationEventId.ServiceHostMonitorWarningBaseEventId + 5;
    public static readonly int TotalExecutionElapsedThresholdCleared = TeamFoundationEventId.ServiceHostMonitorWarningBaseEventId + 6;
    public static readonly int DefenderSignatureOutdated = TeamFoundationEventId.ServiceHostMonitorWarningBaseEventId + 7;
    public static readonly int ServiceHostMonitorWarningMaxEventId = TeamFoundationEventId.DefenderSignatureOutdated;
    public static readonly int WelcomePortalWarningsBaseEventId = TeamFoundationEventId.WarningBaseEventId + 1100;
    public static readonly int WpWarningCouldNotDeleteOldFolder = TeamFoundationEventId.WelcomePortalWarningsBaseEventId + 1;
    public static readonly int WpWarningCouldNotDeletelocalUri = TeamFoundationEventId.WelcomePortalWarningsBaseEventId + 2;
    public static readonly int WpWarningOldSiteRootFound = TeamFoundationEventId.WelcomePortalWarningsBaseEventId + 3;
    public static readonly int WpWarningServiceStatusDescriptionTooLong = TeamFoundationEventId.WelcomePortalWarningsBaseEventId + 4;
    public static readonly int WelcomePortalWarningsMaxEventId = TeamFoundationEventId.WelcomePortalWarningsBaseEventId + 99;
    public static readonly int AccountBaseEventId = 8000;
    public static readonly int AccountPrecreationPool = TeamFoundationEventId.AccountBaseEventId + 1;
    public static readonly int AccountUnitializedRatio = TeamFoundationEventId.AccountBaseEventId + 2;
    public static readonly int AadBaseEventId = 8100;
    public static readonly int AadJsonMetadata = TeamFoundationEventId.AadBaseEventId + 1;
    public static readonly int AadFederationMetadata = TeamFoundationEventId.AadBaseEventId + 2;
    public static readonly int IdentityBaseEventId = 8200;
    public static readonly int GroupMembershipSecurityPolicyEventObserved = TeamFoundationEventId.IdentityBaseEventId + 1;
    public static readonly int InformationalBaseEventId = 9000;
    public static readonly int DefaultInformationalEventId = TeamFoundationEventId.InformationalBaseEventId;
    public static readonly int ApplicationStarted = TeamFoundationEventId.InformationalBaseEventId + 1;
    public static readonly int ApplicationStopped = TeamFoundationEventId.InformationalBaseEventId + 2;
    public static readonly int ApplicationInitialization = TeamFoundationEventId.InformationalBaseEventId + 3;
    public static readonly int SystemStateChanged = TeamFoundationEventId.InformationalBaseEventId + 4;
    public static readonly int ProcessTerminatedByUserAction = TeamFoundationEventId.InformationalBaseEventId + 5;
    public static readonly int SmtpSuccessfulConnection = TeamFoundationEventId.InformationalBaseEventId + 6;
    public static readonly int TeamFoundationSchedulerInitSuccessful = TeamFoundationEventId.InformationalBaseEventId + 7;
    public static readonly int TeamFoundationSchedulerTaskSuccessful = TeamFoundationEventId.InformationalBaseEventId + 8;
    public static readonly int BuildAborted = TeamFoundationEventId.InformationalBaseEventId + 9;
    public static readonly int BackgroundIdentitySync = TeamFoundationEventId.InformationalBaseEventId + 10;
    public static readonly int StopNonImmediateReceived = TeamFoundationEventId.InformationalBaseEventId + 11;
    public static readonly int StopImmediateReceived = TeamFoundationEventId.InformationalBaseEventId + 12;
    public static readonly int SecurityIdentityCleanupCompleted = TeamFoundationEventId.InformationalBaseEventId + 13;
    public static readonly int JobAgentLifecycleChange = TeamFoundationEventId.InformationalBaseEventId + 14;
    public static readonly int WelcomePortalSyncComplete = TeamFoundationEventId.InformationalBaseEventId + 15;
    public static readonly int WelcomePortalSemaphoreFileNotFound = TeamFoundationEventId.InformationalBaseEventId + 16;
    public static readonly int WelcomePortalUpdateComplete = TeamFoundationEventId.InformationalBaseEventId + 17;
    public static readonly int WelcomePortalGenericInformation = TeamFoundationEventId.InformationalBaseEventId + 18;
    public static readonly int NotificationHeartbeatInformation = TeamFoundationEventId.InformationalBaseEventId + 19;
    public static readonly int DatabaseBackupsInformation = TeamFoundationEventId.InformationalBaseEventId + 20;
    public static readonly int FeatureFlagStateChangeInformation = TeamFoundationEventId.InformationalBaseEventId + 21;
    public static readonly int DatabaseRlsTraceFlagDisabled = TeamFoundationEventId.InformationalBaseEventId + 22;
    public static readonly int DefenderSignature = TeamFoundationEventId.InformationalBaseEventId + 23;
    public static readonly int DatabaseTraceFlagInformation = TeamFoundationEventId.InformationalBaseEventId + 24;
    public static readonly int CacheCleanupComplete = TeamFoundationEventId.InformationalBaseEventId + 25;
    public static readonly int InformationalMaxEventId = TeamFoundationEventId.CacheCleanupComplete;
    public static readonly int ServiceHostBaseEventId = 10000;
    public static readonly int ServiceHostSyncJobFailure = TeamFoundationEventId.ServiceHostBaseEventId;
    public static readonly int NotificationJobBaseEventId = 11000;
    public static readonly int EventProcessingDelayInMs = TeamFoundationEventId.NotificationJobBaseEventId;
    public static readonly int NotificationDeliveryDelayInMs = TeamFoundationEventId.NotificationJobBaseEventId + 1;
    public static readonly int EventProcessingTimeInMs = TeamFoundationEventId.NotificationJobBaseEventId + 2;
    public static readonly int SubscriptionsBaseEventId = 12000;
    public static readonly int SubscriptionAlreadyExists = TeamFoundationEventId.SubscriptionsBaseEventId;
    public static readonly int MatcherNotSupported = TeamFoundationEventId.SubscriptionsBaseEventId + 1;
    public static readonly int LegacyEventNameNotSupported = TeamFoundationEventId.SubscriptionsBaseEventId + 2;
    public static readonly int ContributedEventNameNotSupported = TeamFoundationEventId.SubscriptionsBaseEventId + 3;
    public static readonly int MatcherEventTypeCombinationNotSupported = TeamFoundationEventId.SubscriptionsBaseEventId + 4;
    public static readonly int AnalyticsBaseEventId = 13000;
    public static readonly int AnalyticsTransformFailed = TeamFoundationEventId.AnalyticsBaseEventId;
    public static readonly int DataImportBaseEventId = 14000;
    public static readonly int DataImportCollectionImportBaseEventId = TeamFoundationEventId.DataImportBaseEventId;
    public static readonly int DataImportTooManyConcurrentDacpacDeploys = TeamFoundationEventId.DataImportCollectionImportBaseEventId;
    public static readonly int DataImportReparentCollectionBaseEventId = TeamFoundationEventId.DataImportBaseEventId + 100;
    public static readonly int ReparentCollectionOrchestrationJobFailed = TeamFoundationEventId.DataImportReparentCollectionBaseEventId;
    public static readonly int ReparentCollectionOrchestrationJobTimedOut = TeamFoundationEventId.DataImportReparentCollectionBaseEventId + 1;
  }
}
