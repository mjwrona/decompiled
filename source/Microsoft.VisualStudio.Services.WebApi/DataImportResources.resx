<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TfsMigratorVersionIsNotSupportedForImport" xml:space="preserve">
    <value>VS403394: The version of the data migration tool you are using is no longer supported to queue an import. Please download the latest version from https://aka.ms/DownloadAzureDevOpsMigrator and try to queue your import again. There is no need to regenerate the import specification file.</value>
  </data>
  <data name="MissingSourceExtendedProperty" xml:space="preserve">
    <value>The dacpac or database does not contain the following extended properties:{0}.</value>
  </data>
  <data name="TfsMigratorVersionIsNotSupported" xml:space="preserve">
    <value>VS403375: The version of the data migration tool you are using is no longer supported. Please download the latest version from https://aka.ms/DownloadAzureDevOpsMigrator</value>
  </data>
  <data name="SourceIsNotDetachedDatabase" xml:space="preserve">
    <value>VS403250: The dacpac or source database is not a detached Azure DevOps Server Collection database. Please refer to the troubleshooting documentation for more details; https://aka.ms/AzureDevOpsImportTroubleshooting</value>
  </data>
  <data name="UnableToExtractDacpacInformation" xml:space="preserve">
    <value>VS403301: An unexpected error was encountered while attempting to read the dacpac. Please check the logs for more information and refer to https://aka.ms/AzureDevOpsImportTroubleshooting</value>
  </data>
  <data name="SourceDatabaseIsMissingSnapshotTable" xml:space="preserve">
    <value>VS403351: The dacpac or source database is missing an expected table. It's possible that the database was not correctly detached from Azure DevOps Server. See our troubleshooting documentation for more details https://aka.ms/AzureDevOpsImportTroubleshooting</value>
  </data>
  <data name="SourceDatabaseContainsExtractedData" xml:space="preserve">
    <value>VS403386: The specified dacpac file is actually a BACPAC file. BACPACs are not supported for importing a collection into Azure DevOps. See our documentation for generating a dacpac for more details https://aka.ms/CreateAzureDevOpsDACPAC</value>
  </data>
  <data name="MaxDacpacSizeExceededException" xml:space="preserve">
    <value>VS403402: The size of the provided dacpac is {0} GB, exceeding the maximum allowable size of {1} GB. Your collection will need to be imported using the large collection import method - https://aka.ms/AzureDevOpsImportLargeCollection</value>
  </data>
  <data name="UnsupportedCollectionMilestoneForService" xml:space="preserve">
    <value>VS403267: The collection's Azure DevOps Server milestone is not supported by an Azure DevOps Service ({0}): {1} (Restricted: {2}). Please upgrade your Azure DevOps Server to one of the supported versions. The data migration guide has the latest supported versions: https://aka.ms/AzureDevOpsImport</value>
  </data>
  <data name="SourceIsTFSConfigurationDatabase" xml:space="preserve">
    <value>VS403286: The dacpac or source database is from an Azure DevOps Server Configuration database. You must use a detached Azure DevOps Server collection database. Please refer to the troubleshooting documentation for more details; https://aka.ms/AzureDevOpsImportTroubleshooting</value>
  </data>
  <data name="SqlPackageVersionNotSupportedException" xml:space="preserve">
    <value>VS403401: The version of SqlPackage.exe used to create your dacpac is not supported. Please download the latest version from https://aka.ms/ImportSQLPackage and recreate the dacpac.</value>
  </data>
  <data name="ImportInvalidSourceExtendedPropertyValue" xml:space="preserve">
    <value>The dacpac or source database contains an extended property with an invalid value: Name:'{0}', Expected Value:{1}, Actual Value:{2}.</value>
  </data>
  <data name="TfsMigratorVersionIsNotSupportedForPepare" xml:space="preserve">
    <value>VS403393: The version of the data migration tool you are using is no longer supported. Please download the latest version from https://aka.ms/DownloadAzureDevOpsMigrator and regenerate the import specification file.</value>
  </data>
  <data name="UnsupportedCollectionMilestone" xml:space="preserve">
    <value>VS403265: The collection's Azure DevOps Server milestone is not supported by the data migration tool: {0}. Please upgrade your Azure DevOps Server to one of the supported versions. The data migration guide has the latest supported versions: https://aka.ms/AzureDevOpsImport</value>
  </data>
</root>