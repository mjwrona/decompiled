<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DatabaseNameMarkdown" xml:space="preserve">
    <value>Provide the name of the SQL Server database.</value>
  </data>
  <data name="ConnectionStringLabel" xml:space="preserve">
    <value>Connection string</value>
  </data>
  <data name="InlineSqlLabel" xml:space="preserve">
    <value>Inline SQL</value>
  </data>
  <data name="TargetMethodMarkdown" xml:space="preserve">
    <value>Specify the option to connect to the target SQL Server Database. The options are either to provide the SQL Server Database details, or the SQL Server connection string, or the Publish profile XML file.</value>
  </data>
  <data name="CreateOrUpdateAppPoolForWebsiteLabel" xml:space="preserve">
    <value>Create or update app pool</value>
  </data>
  <data name="InlineSqlMarkdown" xml:space="preserve">
    <value>SQL queries inline</value>
  </data>
  <data name="AppPoolNameMarkdown" xml:space="preserve">
    <value>Provide the name of the IIS application pool to create or update.</value>
  </data>
  <data name="SqlFileLabel" xml:space="preserve">
    <value>SQL file</value>
  </data>
  <data name="BindingsLabel" xml:space="preserve">
    <value>Add bindings</value>
  </data>
  <data name="CreateOrUpdateAppPoolForWebsiteMarkdown" xml:space="preserve">
    <value>Select the option to create or update an application pool. If checked, the website will be created in the specified app pool.</value>
  </data>
  <data name="DatabaseNameLabel" xml:space="preserve">
    <value>Database name</value>
  </data>
  <data name="ActionIISWebsiteMarkdown" xml:space="preserve">
    <value>Select the appropriate action that you want to perform on an IIS website.&lt;br /&gt;&lt;br /&gt;\"Create Or Update\" will create a website or update an existing website.&lt;br /&gt;&lt;br /&gt; Start, Stop will start or stop the website respectively.</value>
  </data>
  <data name="IISDeploymentTypeMarkdown" xml:space="preserve">
    <value>You can create or update sites, applications, virtual directories, and application pools.</value>
  </data>
  <data name="VirtualPathForApplicationLabel" xml:space="preserve">
    <value>Virtual path</value>
  </data>
  <data name="WebsiteNameMarkdown" xml:space="preserve">
    <value>Provide the name of the IIS website to create or update.</value>
  </data>
  <data name="VirtualPathForApplicationMarkdown" xml:space="preserve">
    <value>Provide the virtual path of the application. &lt;br /&gt;&lt;br /&gt;Example: To create an application Site/Application enter /Application. The parent website should be already existing.</value>
  </data>
  <data name="AddBindingLabel" xml:space="preserve">
    <value>Add binding</value>
  </data>
  <data name="ActionIISWebsiteLabel" xml:space="preserve">
    <value>Action</value>
  </data>
  <data name="TargetMethodLabel" xml:space="preserve">
    <value>Specify SQL using</value>
  </data>
  <data name="WebsiteNameLabel" xml:space="preserve">
    <value>Website name</value>
  </data>
  <data name="TaskTypeLabel" xml:space="preserve">
    <value>Deploy SQL using</value>
  </data>
  <data name="AddBindingMarkdown" xml:space="preserve">
    <value>Select the option to add port binding for the website.</value>
  </data>
  <data name="AppPoolNameForWebsiteLabel" xml:space="preserve">
    <value>Application pool name</value>
  </data>
  <data name="ConnectionStringMarkdown" xml:space="preserve">
    <value>Specify the SQL Server connection string like \"Server=localhost;Database=Fabrikam;User ID=sqluser;Password=password;\".</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Deployment Group: Deploy ASP.NET or ASP.NET Core web applications to an IIS Website and SQL database on physical or virtual machines (VM).</value>
  </data>
  <data name="AppPoolNameForWebsiteMarkdown" xml:space="preserve">
    <value>Provide the name of the IIS application pool to create or update.</value>
  </data>
  <data name="SqlFileMarkdown" xml:space="preserve">
    <value>Location of the SQL file on the target machines or on a UNC path like, \\\\\\\\BudgetIT\\Web\\Deploy\\FabrikamDB.sql. The UNC path should be accessible to the machine's administrator account. Environment variables are also supported, like $env:windir, $env:systemroot, $env:windir\\FabrikamFibre\\DB. Wildcards can be used. For example, `**/*.sql` for sql file present in all sub folders.</value>
  </data>
  <data name="TaskTypeMarkdown" xml:space="preserve">
    <value>Specify the way in which you want to deploy DB, either by using Dacpac or by using Sql Script.</value>
  </data>
  <data name="BindingsMarkdown" xml:space="preserve">
    <value>Click on the extension [...] button to add bindings for the website.</value>
  </data>
  <data name="IISDeploymentTypeLabel" xml:space="preserve">
    <value>Configuration type</value>
  </data>
  <data name="AppPoolNameLabel" xml:space="preserve">
    <value>Application pool name</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>IIS website and SQL database deployment</value>
  </data>
</root>