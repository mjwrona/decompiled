// Decompiled with JetBrains decompiler
// Type: sqlParser
// Assembly: Microsoft.Azure.Cosmos.Client, Version=3.31.2.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 16FBD598-821A-4D2D-8F97-7046A72AA497
// Assembly location: C:\Program Files\Azure DevOps Server 2022\Application Tier\Web Services\bin\Microsoft.Azure.Cosmos.Client.dll

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Dfa;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System;
using System.CodeDom.Compiler;
using System.IO;

[GeneratedCode("ANTLR", "4.7.2")]
internal class sqlParser : Parser
{
  protected static DFA[] decisionToDFA;
  protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
  public const int T__0 = 1;
  public const int T__1 = 2;
  public const int T__2 = 3;
  public const int T__3 = 4;
  public const int T__4 = 5;
  public const int T__5 = 6;
  public const int T__6 = 7;
  public const int T__7 = 8;
  public const int T__8 = 9;
  public const int T__9 = 10;
  public const int T__10 = 11;
  public const int T__11 = 12;
  public const int T__12 = 13;
  public const int T__13 = 14;
  public const int T__14 = 15;
  public const int T__15 = 16;
  public const int T__16 = 17;
  public const int T__17 = 18;
  public const int T__18 = 19;
  public const int T__19 = 20;
  public const int T__20 = 21;
  public const int T__21 = 22;
  public const int T__22 = 23;
  public const int T__23 = 24;
  public const int T__24 = 25;
  public const int T__25 = 26;
  public const int T__26 = 27;
  public const int K_AND = 28;
  public const int K_ARRAY = 29;
  public const int K_AS = 30;
  public const int K_ASC = 31;
  public const int K_BETWEEN = 32;
  public const int K_BY = 33;
  public const int K_DESC = 34;
  public const int K_DISTINCT = 35;
  public const int K_ESCAPE = 36;
  public const int K_EXISTS = 37;
  public const int K_FALSE = 38;
  public const int K_FROM = 39;
  public const int K_GROUP = 40;
  public const int K_IN = 41;
  public const int K_JOIN = 42;
  public const int K_LIKE = 43;
  public const int K_LIMIT = 44;
  public const int K_NOT = 45;
  public const int K_NULL = 46;
  public const int K_OFFSET = 47;
  public const int K_OR = 48;
  public const int K_ORDER = 49;
  public const int K_SELECT = 50;
  public const int K_TOP = 51;
  public const int K_TRUE = 52;
  public const int K_UDF = 53;
  public const int K_UNDEFINED = 54;
  public const int K_VALUE = 55;
  public const int K_WHERE = 56;
  public const int WS = 57;
  public const int NUMERIC_LITERAL = 58;
  public const int STRING_LITERAL = 59;
  public const int IDENTIFIER = 60;
  public const int PARAMETER = 61;
  public const int RULE_program = 0;
  public const int RULE_sql_query = 1;
  public const int RULE_select_clause = 2;
  public const int RULE_top_spec = 3;
  public const int RULE_selection = 4;
  public const int RULE_select_star_spec = 5;
  public const int RULE_select_value_spec = 6;
  public const int RULE_select_list_spec = 7;
  public const int RULE_select_item = 8;
  public const int RULE_from_clause = 9;
  public const int RULE_collection_expression = 10;
  public const int RULE_collection = 11;
  public const int RULE_path_expression = 12;
  public const int RULE_where_clause = 13;
  public const int RULE_group_by_clause = 14;
  public const int RULE_order_by_clause = 15;
  public const int RULE_order_by_items = 16;
  public const int RULE_order_by_item = 17;
  public const int RULE_sort_order = 18;
  public const int RULE_offset_limit_clause = 19;
  public const int RULE_offset_count = 20;
  public const int RULE_limit_count = 21;
  public const int RULE_scalar_expression = 22;
  public const int RULE_logical_scalar_expression = 23;
  public const int RULE_in_scalar_expression = 24;
  public const int RULE_like_scalar_expression = 25;
  public const int RULE_escape_expression = 26;
  public const int RULE_binary_scalar_expression = 27;
  public const int RULE_multiplicative_operator = 28;
  public const int RULE_additive_operator = 29;
  public const int RULE_relational_operator = 30;
  public const int RULE_equality_operator = 31;
  public const int RULE_bitwise_and_operator = 32;
  public const int RULE_bitwise_exclusive_or_operator = 33;
  public const int RULE_bitwise_inclusive_or_operator = 34;
  public const int RULE_string_concat_operator = 35;
  public const int RULE_unary_scalar_expression = 36;
  public const int RULE_unary_operator = 37;
  public const int RULE_primary_expression = 38;
  public const int RULE_scalar_expression_list = 39;
  public const int RULE_object_property_list = 40;
  public const int RULE_object_property = 41;
  public const int RULE_literal = 42;
  public static readonly string[] ruleNames = new string[43]
  {
    "program",
    "sql_query",
    "select_clause",
    "top_spec",
    "selection",
    "select_star_spec",
    "select_value_spec",
    "select_list_spec",
    "select_item",
    "from_clause",
    "collection_expression",
    "collection",
    "path_expression",
    "where_clause",
    "group_by_clause",
    "order_by_clause",
    "order_by_items",
    "order_by_item",
    "sort_order",
    "offset_limit_clause",
    "offset_count",
    "limit_count",
    "scalar_expression",
    "logical_scalar_expression",
    "in_scalar_expression",
    "like_scalar_expression",
    "escape_expression",
    "binary_scalar_expression",
    "multiplicative_operator",
    "additive_operator",
    "relational_operator",
    "equality_operator",
    "bitwise_and_operator",
    "bitwise_exclusive_or_operator",
    "bitwise_inclusive_or_operator",
    "string_concat_operator",
    "unary_scalar_expression",
    "unary_operator",
    "primary_expression",
    "scalar_expression_list",
    "object_property_list",
    "object_property",
    "literal"
  };
  private static readonly string[] _LiteralNames = new string[55]
  {
    null,
    "'*'",
    "','",
    "'('",
    "')'",
    "'.'",
    "'['",
    "']'",
    "'?'",
    "':'",
    "'??'",
    "'/'",
    "'%'",
    "'+'",
    "'-'",
    "'<'",
    "'>'",
    "'>='",
    "'<='",
    "'='",
    "'!='",
    "'&'",
    "'^'",
    "'|'",
    "'||'",
    "'~'",
    "'{'",
    "'}'",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    "'false'",
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    "'null'",
    null,
    null,
    null,
    null,
    null,
    "'true'",
    "'udf'",
    "'undefined'"
  };
  private static readonly string[] _SymbolicNames = new string[62]
  {
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    nameof (K_AND),
    nameof (K_ARRAY),
    nameof (K_AS),
    nameof (K_ASC),
    nameof (K_BETWEEN),
    nameof (K_BY),
    nameof (K_DESC),
    nameof (K_DISTINCT),
    nameof (K_ESCAPE),
    nameof (K_EXISTS),
    nameof (K_FALSE),
    nameof (K_FROM),
    nameof (K_GROUP),
    nameof (K_IN),
    nameof (K_JOIN),
    nameof (K_LIKE),
    nameof (K_LIMIT),
    nameof (K_NOT),
    nameof (K_NULL),
    nameof (K_OFFSET),
    nameof (K_OR),
    nameof (K_ORDER),
    nameof (K_SELECT),
    nameof (K_TOP),
    nameof (K_TRUE),
    nameof (K_UDF),
    nameof (K_UNDEFINED),
    nameof (K_VALUE),
    nameof (K_WHERE),
    nameof (WS),
    nameof (NUMERIC_LITERAL),
    nameof (STRING_LITERAL),
    nameof (IDENTIFIER),
    nameof (PARAMETER)
  };
  public static readonly IVocabulary DefaultVocabulary = (IVocabulary) new Antlr4.Runtime.Vocabulary(sqlParser._LiteralNames, sqlParser._SymbolicNames);
  private static char[] _serializedATN = new char[3770]
  {
    '\u0003',
    '悋',
    'Ꜫ',
    '脳',
    '맭',
    '䅼',
    '㯧',
    '瞆',
    '奤',
    '\u0003',
    '?',
    'ƴ',
    '\u0004',
    '\u0002',
    '\t',
    '\u0002',
    '\u0004',
    '\u0003',
    '\t',
    '\u0003',
    '\u0004',
    '\u0004',
    '\t',
    '\u0004',
    '\u0004',
    '\u0005',
    '\t',
    '\u0005',
    '\u0004',
    '\u0006',
    '\t',
    '\u0006',
    '\u0004',
    '\a',
    '\t',
    '\a',
    '\u0004',
    '\b',
    '\t',
    '\b',
    '\u0004',
    '\t',
    '\t',
    '\t',
    '\u0004',
    '\n',
    '\t',
    '\n',
    '\u0004',
    '\v',
    '\t',
    '\v',
    '\u0004',
    '\f',
    '\t',
    '\f',
    '\u0004',
    '\r',
    '\t',
    '\r',
    '\u0004',
    '\u000E',
    '\t',
    '\u000E',
    '\u0004',
    '\u000F',
    '\t',
    '\u000F',
    '\u0004',
    '\u0010',
    '\t',
    '\u0010',
    '\u0004',
    '\u0011',
    '\t',
    '\u0011',
    '\u0004',
    '\u0012',
    '\t',
    '\u0012',
    '\u0004',
    '\u0013',
    '\t',
    '\u0013',
    '\u0004',
    '\u0014',
    '\t',
    '\u0014',
    '\u0004',
    '\u0015',
    '\t',
    '\u0015',
    '\u0004',
    '\u0016',
    '\t',
    '\u0016',
    '\u0004',
    '\u0017',
    '\t',
    '\u0017',
    '\u0004',
    '\u0018',
    '\t',
    '\u0018',
    '\u0004',
    '\u0019',
    '\t',
    '\u0019',
    '\u0004',
    '\u001A',
    '\t',
    '\u001A',
    '\u0004',
    '\u001B',
    '\t',
    '\u001B',
    '\u0004',
    '\u001C',
    '\t',
    '\u001C',
    '\u0004',
    '\u001D',
    '\t',
    '\u001D',
    '\u0004',
    '\u001E',
    '\t',
    '\u001E',
    '\u0004',
    '\u001F',
    '\t',
    '\u001F',
    '\u0004',
    ' ',
    '\t',
    ' ',
    '\u0004',
    '!',
    '\t',
    '!',
    '\u0004',
    '"',
    '\t',
    '"',
    '\u0004',
    '#',
    '\t',
    '#',
    '\u0004',
    '$',
    '\t',
    '$',
    '\u0004',
    '%',
    '\t',
    '%',
    '\u0004',
    '&',
    '\t',
    '&',
    '\u0004',
    '\'',
    '\t',
    '\'',
    '\u0004',
    '(',
    '\t',
    '(',
    '\u0004',
    ')',
    '\t',
    ')',
    '\u0004',
    '*',
    '\t',
    '*',
    '\u0004',
    '+',
    '\t',
    '+',
    '\u0004',
    ',',
    '\t',
    ',',
    '\u0003',
    '\u0002',
    '\u0003',
    '\u0002',
    '\u0003',
    '\u0002',
    '\u0003',
    '\u0003',
    '\u0003',
    '\u0003',
    '\u0005',
    '\u0003',
    '^',
    '\n',
    '\u0003',
    '\u0003',
    '\u0003',
    '\u0005',
    '\u0003',
    'a',
    '\n',
    '\u0003',
    '\u0003',
    '\u0003',
    '\u0005',
    '\u0003',
    'd',
    '\n',
    '\u0003',
    '\u0003',
    '\u0003',
    '\u0005',
    '\u0003',
    'g',
    '\n',
    '\u0003',
    '\u0003',
    '\u0003',
    '\u0005',
    '\u0003',
    'j',
    '\n',
    '\u0003',
    '\u0003',
    '\u0004',
    '\u0003',
    '\u0004',
    '\u0005',
    '\u0004',
    'n',
    '\n',
    '\u0004',
    '\u0003',
    '\u0004',
    '\u0005',
    '\u0004',
    'q',
    '\n',
    '\u0004',
    '\u0003',
    '\u0004',
    '\u0003',
    '\u0004',
    '\u0003',
    '\u0005',
    '\u0003',
    '\u0005',
    '\u0003',
    '\u0005',
    '\u0003',
    '\u0006',
    '\u0003',
    '\u0006',
    '\u0003',
    '\u0006',
    '\u0005',
    '\u0006',
    '{',
    '\n',
    '\u0006',
    '\u0003',
    '\a',
    '\u0003',
    '\a',
    '\u0003',
    '\b',
    '\u0003',
    '\b',
    '\u0003',
    '\b',
    '\u0003',
    '\t',
    '\u0003',
    '\t',
    '\u0003',
    '\t',
    '\a',
    '\t',
    '\u0085',
    '\n',
    '\t',
    '\f',
    '\t',
    '\u000E',
    '\t',
    '\u0088',
    '\v',
    '\t',
    '\u0003',
    '\n',
    '\u0003',
    '\n',
    '\u0003',
    '\n',
    '\u0005',
    '\n',
    '\u008D',
    '\n',
    '\n',
    '\u0003',
    '\v',
    '\u0003',
    '\v',
    '\u0003',
    '\v',
    '\u0003',
    '\f',
    '\u0003',
    '\f',
    '\u0003',
    '\f',
    '\u0005',
    '\f',
    '\u0095',
    '\n',
    '\f',
    '\u0003',
    '\f',
    '\u0005',
    '\f',
    '\u0098',
    '\n',
    '\f',
    '\u0003',
    '\f',
    '\u0003',
    '\f',
    '\u0003',
    '\f',
    '\u0005',
    '\f',
    '\u009D',
    '\n',
    '\f',
    '\u0003',
    '\f',
    '\u0003',
    '\f',
    '\u0003',
    '\f',
    '\a',
    '\f',
    '¢',
    '\n',
    '\f',
    '\f',
    '\f',
    '\u000E',
    '\f',
    '¥',
    '\v',
    '\f',
    '\u0003',
    '\r',
    '\u0003',
    '\r',
    '\u0005',
    '\r',
    '©',
    '\n',
    '\r',
    '\u0003',
    '\r',
    '\u0003',
    '\r',
    '\u0003',
    '\r',
    '\u0003',
    '\r',
    '\u0005',
    '\r',
    '¯',
    '\n',
    '\r',
    '\u0003',
    '\u000E',
    '\u0003',
    '\u000E',
    '\u0003',
    '\u000E',
    '\u0003',
    '\u000E',
    '\u0003',
    '\u000E',
    '\u0003',
    '\u000E',
    '\u0003',
    '\u000E',
    '\u0003',
    '\u000E',
    '\u0003',
    '\u000E',
    '\u0003',
    '\u000E',
    '\u0003',
    '\u000E',
    '\u0003',
    '\u000E',
    '\a',
    '\u000E',
    '\u00BD',
    '\n',
    '\u000E',
    '\f',
    '\u000E',
    '\u000E',
    '\u000E',
    'À',
    '\v',
    '\u000E',
    '\u0003',
    '\u000F',
    '\u0003',
    '\u000F',
    '\u0003',
    '\u000F',
    '\u0003',
    '\u0010',
    '\u0003',
    '\u0010',
    '\u0003',
    '\u0010',
    '\u0003',
    '\u0010',
    '\u0003',
    '\u0011',
    '\u0003',
    '\u0011',
    '\u0003',
    '\u0011',
    '\u0003',
    '\u0011',
    '\u0003',
    '\u0012',
    '\u0003',
    '\u0012',
    '\u0003',
    '\u0012',
    '\a',
    '\u0012',
    'Ð',
    '\n',
    '\u0012',
    '\f',
    '\u0012',
    '\u000E',
    '\u0012',
    'Ó',
    '\v',
    '\u0012',
    '\u0003',
    '\u0013',
    '\u0003',
    '\u0013',
    '\u0005',
    '\u0013',
    '×',
    '\n',
    '\u0013',
    '\u0003',
    '\u0014',
    '\u0003',
    '\u0014',
    '\u0003',
    '\u0015',
    '\u0003',
    '\u0015',
    '\u0003',
    '\u0015',
    '\u0003',
    '\u0015',
    '\u0003',
    '\u0015',
    '\u0003',
    '\u0016',
    '\u0003',
    '\u0016',
    '\u0003',
    '\u0017',
    '\u0003',
    '\u0017',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0005',
    '\u0018',
    'è',
    '\n',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0005',
    '\u0018',
    'ï',
    '\n',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\u0003',
    '\u0018',
    '\a',
    '\u0018',
    'ú',
    '\n',
    '\u0018',
    '\f',
    '\u0018',
    '\u000E',
    '\u0018',
    'ý',
    '\v',
    '\u0018',
    '\u0003',
    '\u0019',
    '\u0003',
    '\u0019',
    '\u0003',
    '\u0019',
    '\u0003',
    '\u0019',
    '\u0005',
    '\u0019',
    'ă',
    '\n',
    '\u0019',
    '\u0003',
    '\u0019',
    '\u0003',
    '\u0019',
    '\u0003',
    '\u0019',
    '\u0003',
    '\u0019',
    '\u0003',
    '\u0019',
    '\u0003',
    '\u0019',
    '\a',
    '\u0019',
    'ċ',
    '\n',
    '\u0019',
    '\f',
    '\u0019',
    '\u000E',
    '\u0019',
    'Ď',
    '\v',
    '\u0019',
    '\u0003',
    '\u001A',
    '\u0003',
    '\u001A',
    '\u0005',
    '\u001A',
    'Ē',
    '\n',
    '\u001A',
    '\u0003',
    '\u001A',
    '\u0003',
    '\u001A',
    '\u0003',
    '\u001A',
    '\u0003',
    '\u001A',
    '\u0003',
    '\u001A',
    '\u0003',
    '\u001B',
    '\u0003',
    '\u001B',
    '\u0005',
    '\u001B',
    'ě',
    '\n',
    '\u001B',
    '\u0003',
    '\u001B',
    '\u0003',
    '\u001B',
    '\u0003',
    '\u001B',
    '\u0005',
    '\u001B',
    'Ġ',
    '\n',
    '\u001B',
    '\u0003',
    '\u001C',
    '\u0003',
    '\u001C',
    '\u0003',
    '\u001C',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\u0003',
    '\u001D',
    '\a',
    '\u001D',
    'ň',
    '\n',
    '\u001D',
    '\f',
    '\u001D',
    '\u000E',
    '\u001D',
    'ŋ',
    '\v',
    '\u001D',
    '\u0003',
    '\u001E',
    '\u0003',
    '\u001E',
    '\u0003',
    '\u001F',
    '\u0003',
    '\u001F',
    '\u0003',
    ' ',
    '\u0003',
    ' ',
    '\u0003',
    '!',
    '\u0003',
    '!',
    '\u0003',
    '"',
    '\u0003',
    '"',
    '\u0003',
    '#',
    '\u0003',
    '#',
    '\u0003',
    '$',
    '\u0003',
    '$',
    '\u0003',
    '%',
    '\u0003',
    '%',
    '\u0003',
    '&',
    '\u0003',
    '&',
    '\u0003',
    '&',
    '\u0003',
    '&',
    '\u0005',
    '&',
    'š',
    '\n',
    '&',
    '\u0003',
    '\'',
    '\u0003',
    '\'',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0005',
    '(',
    'ū',
    '\n',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0005',
    '(',
    'Ű',
    '\n',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0005',
    '(',
    'ŵ',
    '\n',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0005',
    '(',
    'ź',
    '\n',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0005',
    '(',
    'Ə',
    '\n',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\u0003',
    '(',
    '\a',
    '(',
    'ƙ',
    '\n',
    '(',
    '\f',
    '(',
    '\u000E',
    '(',
    'Ɯ',
    '\v',
    '(',
    '\u0003',
    ')',
    '\u0003',
    ')',
    '\u0003',
    ')',
    '\a',
    ')',
    'ơ',
    '\n',
    ')',
    '\f',
    ')',
    '\u000E',
    ')',
    'Ƥ',
    '\v',
    ')',
    '\u0003',
    '*',
    '\u0003',
    '*',
    '\u0003',
    '*',
    '\a',
    '*',
    'Ʃ',
    '\n',
    '*',
    '\f',
    '*',
    '\u000E',
    '*',
    'Ƭ',
    '\v',
    '*',
    '\u0003',
    '+',
    '\u0003',
    '+',
    '\u0003',
    '+',
    '\u0003',
    '+',
    '\u0003',
    ',',
    '\u0003',
    ',',
    '\u0003',
    ',',
    '\u0002',
    '\b',
    '\u0016',
    '\u001A',
    '.',
    '0',
    '8',
    'N',
    '-',
    '\u0002',
    '\u0004',
    '\u0006',
    '\b',
    '\n',
    '\f',
    '\u000E',
    '\u0010',
    '\u0012',
    '\u0014',
    '\u0016',
    '\u0018',
    '\u001A',
    '\u001C',
    '\u001E',
    ' ',
    '"',
    '$',
    '&',
    '(',
    '*',
    ',',
    '.',
    '0',
    '2',
    '4',
    '6',
    '8',
    ':',
    '<',
    '>',
    '@',
    'B',
    'D',
    'F',
    'H',
    'J',
    'L',
    'N',
    'P',
    'R',
    'T',
    'V',
    '\u0002',
    '\n',
    '\u0004',
    '\u0002',
    '<',
    '<',
    '?',
    '?',
    '\u0004',
    '\u0002',
    '!',
    '!',
    '$',
    '$',
    '\u0004',
    '\u0002',
    '\u0003',
    '\u0003',
    '\r',
    '\u000E',
    '\u0003',
    '\u0002',
    '\u000F',
    '\u0010',
    '\u0003',
    '\u0002',
    '\u0011',
    '\u0014',
    '\u0003',
    '\u0002',
    '\u0015',
    '\u0016',
    '\u0005',
    '\u0002',
    '\u000F',
    '\u0010',
    '\u001B',
    '\u001B',
    '/',
    '/',
    '\a',
    '\u0002',
    '(',
    '(',
    '0',
    '0',
    '6',
    '6',
    '8',
    '8',
    '<',
    '=',
    '\u0002',
    'ǃ',
    '\u0002',
    'X',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0004',
    '[',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0006',
    'k',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\b',
    't',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\n',
    'z',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\f',
    '|',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u000E',
    '~',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0010',
    '\u0081',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0012',
    '\u0089',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0014',
    '\u008E',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0016',
    '\u009C',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0018',
    '®',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u001A',
    '°',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u001C',
    'Á',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u001E',
    'Ä',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    ' ',
    'È',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '"',
    'Ì',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '$',
    'Ô',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '&',
    'Ø',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '(',
    'Ú',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '*',
    'ß',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    ',',
    'á',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '.',
    'î',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '0',
    'Ă',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '2',
    'ď',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '4',
    'Ę',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '6',
    'ġ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '8',
    'Ĥ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    ':',
    'Ō',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '<',
    'Ŏ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '>',
    'Ő',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '@',
    'Œ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'B',
    'Ŕ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'D',
    'Ŗ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'F',
    'Ř',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'H',
    'Ś',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'J',
    'Š',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'L',
    'Ţ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'N',
    'Ǝ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'P',
    'Ɲ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'R',
    'ƥ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'T',
    'ƭ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'V',
    'Ʊ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'X',
    'Y',
    '\u0005',
    '\u0004',
    '\u0003',
    '\u0002',
    'Y',
    'Z',
    '\a',
    '\u0002',
    '\u0002',
    '\u0003',
    'Z',
    '\u0003',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '[',
    ']',
    '\u0005',
    '\u0006',
    '\u0004',
    '\u0002',
    '\\',
    '^',
    '\u0005',
    '\u0014',
    '\v',
    '\u0002',
    ']',
    '\\',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    ']',
    '^',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '^',
    '`',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '_',
    'a',
    '\u0005',
    '\u001C',
    '\u000F',
    '\u0002',
    '`',
    '_',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '`',
    'a',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'a',
    'c',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'b',
    'd',
    '\u0005',
    '\u001E',
    '\u0010',
    '\u0002',
    'c',
    'b',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'c',
    'd',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'd',
    'f',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'e',
    'g',
    '\u0005',
    ' ',
    '\u0011',
    '\u0002',
    'f',
    'e',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'f',
    'g',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'g',
    'i',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'h',
    'j',
    '\u0005',
    '(',
    '\u0015',
    '\u0002',
    'i',
    'h',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'i',
    'j',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'j',
    '\u0005',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'k',
    'm',
    '\a',
    '4',
    '\u0002',
    '\u0002',
    'l',
    'n',
    '\a',
    '%',
    '\u0002',
    '\u0002',
    'm',
    'l',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'm',
    'n',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'n',
    'p',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'o',
    'q',
    '\u0005',
    '\b',
    '\u0005',
    '\u0002',
    'p',
    'o',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'p',
    'q',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'q',
    'r',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'r',
    's',
    '\u0005',
    '\n',
    '\u0006',
    '\u0002',
    's',
    '\a',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    't',
    'u',
    '\a',
    '5',
    '\u0002',
    '\u0002',
    'u',
    'v',
    '\t',
    '\u0002',
    '\u0002',
    '\u0002',
    'v',
    '\t',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'w',
    '{',
    '\u0005',
    '\f',
    '\a',
    '\u0002',
    'x',
    '{',
    '\u0005',
    '\u000E',
    '\b',
    '\u0002',
    'y',
    '{',
    '\u0005',
    '\u0010',
    '\t',
    '\u0002',
    'z',
    'w',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'z',
    'x',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'z',
    'y',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '{',
    '\v',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '|',
    '}',
    '\a',
    '\u0003',
    '\u0002',
    '\u0002',
    '}',
    '\r',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '~',
    '\u007F',
    '\a',
    '9',
    '\u0002',
    '\u0002',
    '\u007F',
    '\u0080',
    '\u0005',
    '.',
    '\u0018',
    '\u0002',
    '\u0080',
    '\u000F',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0081',
    '\u0086',
    '\u0005',
    '\u0012',
    '\n',
    '\u0002',
    '\u0082',
    '\u0083',
    '\a',
    '\u0004',
    '\u0002',
    '\u0002',
    '\u0083',
    '\u0085',
    '\u0005',
    '\u0012',
    '\n',
    '\u0002',
    '\u0084',
    '\u0082',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0085',
    '\u0088',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0086',
    '\u0084',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0086',
    '\u0087',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0087',
    '\u0011',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0088',
    '\u0086',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0089',
    '\u008C',
    '\u0005',
    '.',
    '\u0018',
    '\u0002',
    '\u008A',
    '\u008B',
    '\a',
    ' ',
    '\u0002',
    '\u0002',
    '\u008B',
    '\u008D',
    '\a',
    '>',
    '\u0002',
    '\u0002',
    '\u008C',
    '\u008A',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u008C',
    '\u008D',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u008D',
    '\u0013',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u008E',
    '\u008F',
    '\a',
    ')',
    '\u0002',
    '\u0002',
    '\u008F',
    '\u0090',
    '\u0005',
    '\u0016',
    '\f',
    '\u0002',
    '\u0090',
    '\u0015',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0091',
    '\u0092',
    '\b',
    '\f',
    '\u0001',
    '\u0002',
    '\u0092',
    '\u0097',
    '\u0005',
    '\u0018',
    '\r',
    '\u0002',
    '\u0093',
    '\u0095',
    '\a',
    ' ',
    '\u0002',
    '\u0002',
    '\u0094',
    '\u0093',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0094',
    '\u0095',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0095',
    '\u0096',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0096',
    '\u0098',
    '\a',
    '>',
    '\u0002',
    '\u0002',
    '\u0097',
    '\u0094',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0097',
    '\u0098',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0098',
    '\u009D',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u0099',
    '\u009A',
    '\a',
    '>',
    '\u0002',
    '\u0002',
    '\u009A',
    '\u009B',
    '\a',
    '+',
    '\u0002',
    '\u0002',
    '\u009B',
    '\u009D',
    '\u0005',
    '\u0018',
    '\r',
    '\u0002',
    '\u009C',
    '\u0091',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u009C',
    '\u0099',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u009D',
    '£',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u009E',
    '\u009F',
    '\f',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u009F',
    ' ',
    '\a',
    ',',
    '\u0002',
    '\u0002',
    ' ',
    '¢',
    '\u0005',
    '\u0016',
    '\f',
    '\u0004',
    '¡',
    '\u009E',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '¢',
    '¥',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '£',
    '¡',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '£',
    '¤',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '¤',
    '\u0017',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '¥',
    '£',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '¦',
    '¨',
    '\a',
    '>',
    '\u0002',
    '\u0002',
    '§',
    '©',
    '\u0005',
    '\u001A',
    '\u000E',
    '\u0002',
    '¨',
    '§',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '¨',
    '©',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '©',
    '¯',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ª',
    '«',
    '\a',
    '\u0005',
    '\u0002',
    '\u0002',
    '«',
    '¬',
    '\u0005',
    '\u0004',
    '\u0003',
    '\u0002',
    '¬',
    '\u00AD',
    '\a',
    '\u0006',
    '\u0002',
    '\u0002',
    '\u00AD',
    '¯',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '®',
    '¦',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '®',
    'ª',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '¯',
    '\u0019',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '°',
    '\u00BE',
    '\b',
    '\u000E',
    '\u0001',
    '\u0002',
    '±',
    '\u00B2',
    '\f',
    '\u0006',
    '\u0002',
    '\u0002',
    '\u00B2',
    '\u00B3',
    '\a',
    '\a',
    '\u0002',
    '\u0002',
    '\u00B3',
    '\u00BD',
    '\a',
    '>',
    '\u0002',
    '\u0002',
    '´',
    'µ',
    '\f',
    '\u0005',
    '\u0002',
    '\u0002',
    'µ',
    '¶',
    '\a',
    '\b',
    '\u0002',
    '\u0002',
    '¶',
    '·',
    '\a',
    '<',
    '\u0002',
    '\u0002',
    '·',
    '\u00BD',
    '\a',
    '\t',
    '\u0002',
    '\u0002',
    '¸',
    '\u00B9',
    '\f',
    '\u0004',
    '\u0002',
    '\u0002',
    '\u00B9',
    'º',
    '\a',
    '\b',
    '\u0002',
    '\u0002',
    'º',
    '»',
    '\a',
    '=',
    '\u0002',
    '\u0002',
    '»',
    '\u00BD',
    '\a',
    '\t',
    '\u0002',
    '\u0002',
    '\u00BC',
    '±',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u00BC',
    '´',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u00BC',
    '¸',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u00BD',
    'À',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u00BE',
    '\u00BC',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '\u00BE',
    '¿',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '¿',
    '\u001B',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'À',
    '\u00BE',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Á',
    'Â',
    '\a',
    ':',
    '\u0002',
    '\u0002',
    'Â',
    'Ã',
    '\u0005',
    '.',
    '\u0018',
    '\u0002',
    'Ã',
    '\u001D',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ä',
    'Å',
    '\a',
    '*',
    '\u0002',
    '\u0002',
    'Å',
    'Æ',
    '\a',
    '#',
    '\u0002',
    '\u0002',
    'Æ',
    'Ç',
    '\u0005',
    'P',
    ')',
    '\u0002',
    'Ç',
    '\u001F',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'È',
    'É',
    '\a',
    '3',
    '\u0002',
    '\u0002',
    'É',
    'Ê',
    '\a',
    '#',
    '\u0002',
    '\u0002',
    'Ê',
    'Ë',
    '\u0005',
    '"',
    '\u0012',
    '\u0002',
    'Ë',
    '!',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ì',
    'Ñ',
    '\u0005',
    '$',
    '\u0013',
    '\u0002',
    'Í',
    'Î',
    '\a',
    '\u0004',
    '\u0002',
    '\u0002',
    'Î',
    'Ð',
    '\u0005',
    '$',
    '\u0013',
    '\u0002',
    'Ï',
    'Í',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ð',
    'Ó',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ñ',
    'Ï',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ñ',
    'Ò',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ò',
    '#',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ó',
    'Ñ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ô',
    'Ö',
    '\u0005',
    '.',
    '\u0018',
    '\u0002',
    'Õ',
    '×',
    '\u0005',
    '&',
    '\u0014',
    '\u0002',
    'Ö',
    'Õ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ö',
    '×',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    '×',
    '%',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ø',
    'Ù',
    '\t',
    '\u0003',
    '\u0002',
    '\u0002',
    'Ù',
    '\'',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ú',
    'Û',
    '\a',
    '1',
    '\u0002',
    '\u0002',
    'Û',
    'Ü',
    '\u0005',
    '*',
    '\u0016',
    '\u0002',
    'Ü',
    'Ý',
    '\a',
    '.',
    '\u0002',
    '\u0002',
    'Ý',
    'Þ',
    '\u0005',
    ',',
    '\u0017',
    '\u0002',
    'Þ',
    ')',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ß',
    'à',
    '\t',
    '\u0002',
    '\u0002',
    '\u0002',
    'à',
    '+',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'á',
    'â',
    '\t',
    '\u0002',
    '\u0002',
    '\u0002',
    'â',
    '-',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ã',
    'ä',
    '\b',
    '\u0018',
    '\u0001',
    '\u0002',
    'ä',
    'ï',
    '\u0005',
    '0',
    '\u0019',
    '\u0002',
    'å',
    'ç',
    '\u0005',
    '8',
    '\u001D',
    '\u0002',
    'æ',
    'è',
    '\a',
    '/',
    '\u0002',
    '\u0002',
    'ç',
    'æ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ç',
    'è',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'è',
    'é',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'é',
    'ê',
    '\a',
    '"',
    '\u0002',
    '\u0002',
    'ê',
    'ë',
    '\u0005',
    '8',
    '\u001D',
    '\u0002',
    'ë',
    'ì',
    '\a',
    '\u001E',
    '\u0002',
    '\u0002',
    'ì',
    'í',
    '\u0005',
    '8',
    '\u001D',
    '\u0002',
    'í',
    'ï',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'î',
    'ã',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'î',
    'å',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ï',
    'û',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ð',
    'ñ',
    '\f',
    '\u0006',
    '\u0002',
    '\u0002',
    'ñ',
    'ò',
    '\a',
    '\n',
    '\u0002',
    '\u0002',
    'ò',
    'ó',
    '\u0005',
    '.',
    '\u0018',
    '\u0002',
    'ó',
    'ô',
    '\a',
    '\v',
    '\u0002',
    '\u0002',
    'ô',
    'õ',
    '\u0005',
    '.',
    '\u0018',
    '\a',
    'õ',
    'ú',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ö',
    '÷',
    '\f',
    '\u0005',
    '\u0002',
    '\u0002',
    '÷',
    'ø',
    '\a',
    '\f',
    '\u0002',
    '\u0002',
    'ø',
    'ú',
    '\u0005',
    '.',
    '\u0018',
    '\u0006',
    'ù',
    'ð',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ù',
    'ö',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ú',
    'ý',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'û',
    'ù',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'û',
    'ü',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ü',
    '/',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ý',
    'û',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'þ',
    'ÿ',
    '\b',
    '\u0019',
    '\u0001',
    '\u0002',
    'ÿ',
    'ă',
    '\u0005',
    '8',
    '\u001D',
    '\u0002',
    'Ā',
    'ă',
    '\u0005',
    '2',
    '\u001A',
    '\u0002',
    'ā',
    'ă',
    '\u0005',
    '4',
    '\u001B',
    '\u0002',
    'Ă',
    'þ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ă',
    'Ā',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ă',
    'ā',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ă',
    'Č',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ą',
    'ą',
    '\f',
    '\u0004',
    '\u0002',
    '\u0002',
    'ą',
    'Ć',
    '\a',
    '\u001E',
    '\u0002',
    '\u0002',
    'Ć',
    'ċ',
    '\u0005',
    '0',
    '\u0019',
    '\u0005',
    'ć',
    'Ĉ',
    '\f',
    '\u0003',
    '\u0002',
    '\u0002',
    'Ĉ',
    'ĉ',
    '\a',
    '2',
    '\u0002',
    '\u0002',
    'ĉ',
    'ċ',
    '\u0005',
    '0',
    '\u0019',
    '\u0004',
    'Ċ',
    'Ą',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ċ',
    'ć',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ċ',
    'Ď',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Č',
    'Ċ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Č',
    'č',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'č',
    '1',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ď',
    'Č',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ď',
    'đ',
    '\u0005',
    '8',
    '\u001D',
    '\u0002',
    'Đ',
    'Ē',
    '\a',
    '/',
    '\u0002',
    '\u0002',
    'đ',
    'Đ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'đ',
    'Ē',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ē',
    'ē',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ē',
    'Ĕ',
    '\a',
    '+',
    '\u0002',
    '\u0002',
    'Ĕ',
    'ĕ',
    '\a',
    '\u0005',
    '\u0002',
    '\u0002',
    'ĕ',
    'Ė',
    '\u0005',
    'P',
    ')',
    '\u0002',
    'Ė',
    'ė',
    '\a',
    '\u0006',
    '\u0002',
    '\u0002',
    'ė',
    '3',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ę',
    'Ě',
    '\u0005',
    '8',
    '\u001D',
    '\u0002',
    'ę',
    'ě',
    '\a',
    '/',
    '\u0002',
    '\u0002',
    'Ě',
    'ę',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ě',
    'ě',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ě',
    'Ĝ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ĝ',
    'ĝ',
    '\a',
    '-',
    '\u0002',
    '\u0002',
    'ĝ',
    'ğ',
    '\u0005',
    '8',
    '\u001D',
    '\u0002',
    'Ğ',
    'Ġ',
    '\u0005',
    '6',
    '\u001C',
    '\u0002',
    'ğ',
    'Ğ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ğ',
    'Ġ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ġ',
    '5',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ġ',
    'Ģ',
    '\a',
    '&',
    '\u0002',
    '\u0002',
    'Ģ',
    'ģ',
    '\a',
    '=',
    '\u0002',
    '\u0002',
    'ģ',
    '7',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ĥ',
    'ĥ',
    '\b',
    '\u001D',
    '\u0001',
    '\u0002',
    'ĥ',
    'Ħ',
    '\u0005',
    'J',
    '&',
    '\u0002',
    'Ħ',
    'ŉ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ħ',
    'Ĩ',
    '\f',
    '\n',
    '\u0002',
    '\u0002',
    'Ĩ',
    'ĩ',
    '\u0005',
    ':',
    '\u001E',
    '\u0002',
    'ĩ',
    'Ī',
    '\u0005',
    '8',
    '\u001D',
    '\v',
    'Ī',
    'ň',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ī',
    'Ĭ',
    '\f',
    '\t',
    '\u0002',
    '\u0002',
    'Ĭ',
    'ĭ',
    '\u0005',
    '<',
    '\u001F',
    '\u0002',
    'ĭ',
    'Į',
    '\u0005',
    '8',
    '\u001D',
    '\n',
    'Į',
    'ň',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'į',
    'İ',
    '\f',
    '\b',
    '\u0002',
    '\u0002',
    'İ',
    'ı',
    '\u0005',
    '>',
    ' ',
    '\u0002',
    'ı',
    'Ĳ',
    '\u0005',
    '8',
    '\u001D',
    '\t',
    'Ĳ',
    'ň',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ĳ',
    'Ĵ',
    '\f',
    '\a',
    '\u0002',
    '\u0002',
    'Ĵ',
    'ĵ',
    '\u0005',
    '@',
    '!',
    '\u0002',
    'ĵ',
    'Ķ',
    '\u0005',
    '8',
    '\u001D',
    '\b',
    'Ķ',
    'ň',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ķ',
    'ĸ',
    '\f',
    '\u0006',
    '\u0002',
    '\u0002',
    'ĸ',
    'Ĺ',
    '\u0005',
    'B',
    '"',
    '\u0002',
    'Ĺ',
    'ĺ',
    '\u0005',
    '8',
    '\u001D',
    '\a',
    'ĺ',
    'ň',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ļ',
    'ļ',
    '\f',
    '\u0005',
    '\u0002',
    '\u0002',
    'ļ',
    'Ľ',
    '\u0005',
    'D',
    '#',
    '\u0002',
    'Ľ',
    'ľ',
    '\u0005',
    '8',
    '\u001D',
    '\u0006',
    'ľ',
    'ň',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ŀ',
    'ŀ',
    '\f',
    '\u0004',
    '\u0002',
    '\u0002',
    'ŀ',
    'Ł',
    '\u0005',
    'F',
    '$',
    '\u0002',
    'Ł',
    'ł',
    '\u0005',
    '8',
    '\u001D',
    '\u0005',
    'ł',
    'ň',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ń',
    'ń',
    '\f',
    '\u0003',
    '\u0002',
    '\u0002',
    'ń',
    'Ņ',
    '\u0005',
    'H',
    '%',
    '\u0002',
    'Ņ',
    'ņ',
    '\u0005',
    '8',
    '\u001D',
    '\u0004',
    'ņ',
    'ň',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ň',
    'ħ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ň',
    'ī',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ň',
    'į',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ň',
    'ĳ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ň',
    'ķ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ň',
    'Ļ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ň',
    'Ŀ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ň',
    'Ń',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ň',
    'ŋ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ŉ',
    'Ň',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ŉ',
    'Ŋ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ŋ',
    '9',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ŋ',
    'ŉ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ō',
    'ō',
    '\t',
    '\u0004',
    '\u0002',
    '\u0002',
    'ō',
    ';',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ŏ',
    'ŏ',
    '\t',
    '\u0005',
    '\u0002',
    '\u0002',
    'ŏ',
    '=',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ő',
    'ő',
    '\t',
    '\u0006',
    '\u0002',
    '\u0002',
    'ő',
    '?',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Œ',
    'œ',
    '\t',
    '\a',
    '\u0002',
    '\u0002',
    'œ',
    'A',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ŕ',
    'ŕ',
    '\a',
    '\u0017',
    '\u0002',
    '\u0002',
    'ŕ',
    'C',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ŗ',
    'ŗ',
    '\a',
    '\u0018',
    '\u0002',
    '\u0002',
    'ŗ',
    'E',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ř',
    'ř',
    '\a',
    '\u0019',
    '\u0002',
    '\u0002',
    'ř',
    'G',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ś',
    'ś',
    '\a',
    '\u001A',
    '\u0002',
    '\u0002',
    'ś',
    'I',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ŝ',
    'š',
    '\u0005',
    'N',
    '(',
    '\u0002',
    'ŝ',
    'Ş',
    '\u0005',
    'L',
    '\'',
    '\u0002',
    'Ş',
    'ş',
    '\u0005',
    'J',
    '&',
    '\u0002',
    'ş',
    'š',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Š',
    'Ŝ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Š',
    'ŝ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'š',
    'K',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ţ',
    'ţ',
    '\t',
    '\b',
    '\u0002',
    '\u0002',
    'ţ',
    'M',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ť',
    'ť',
    '\b',
    '(',
    '\u0001',
    '\u0002',
    'ť',
    'Ə',
    '\a',
    '>',
    '\u0002',
    '\u0002',
    'Ŧ',
    'Ə',
    '\a',
    '?',
    '\u0002',
    '\u0002',
    'ŧ',
    'Ə',
    '\u0005',
    'V',
    ',',
    '\u0002',
    'Ũ',
    'Ū',
    '\a',
    '\b',
    '\u0002',
    '\u0002',
    'ũ',
    'ū',
    '\u0005',
    'P',
    ')',
    '\u0002',
    'Ū',
    'ũ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ū',
    'ū',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ū',
    'Ŭ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ŭ',
    'Ə',
    '\a',
    '\t',
    '\u0002',
    '\u0002',
    'ŭ',
    'ů',
    '\a',
    '\u001C',
    '\u0002',
    '\u0002',
    'Ů',
    'Ű',
    '\u0005',
    'R',
    '*',
    '\u0002',
    'ů',
    'Ů',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ů',
    'Ű',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ű',
    'ű',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ű',
    'Ə',
    '\a',
    '\u001D',
    '\u0002',
    '\u0002',
    'Ų',
    'ų',
    '\a',
    '7',
    '\u0002',
    '\u0002',
    'ų',
    'ŵ',
    '\a',
    '\a',
    '\u0002',
    '\u0002',
    'Ŵ',
    'Ų',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ŵ',
    'ŵ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ŵ',
    'Ŷ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ŷ',
    'ŷ',
    '\a',
    '>',
    '\u0002',
    '\u0002',
    'ŷ',
    'Ź',
    '\a',
    '\u0005',
    '\u0002',
    '\u0002',
    'Ÿ',
    'ź',
    '\u0005',
    'P',
    ')',
    '\u0002',
    'Ź',
    'Ÿ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ź',
    'ź',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ź',
    'Ż',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ż',
    'Ə',
    '\a',
    '\u0006',
    '\u0002',
    '\u0002',
    'ż',
    'Ž',
    '\a',
    '\u0005',
    '\u0002',
    '\u0002',
    'Ž',
    'ž',
    '\u0005',
    '.',
    '\u0018',
    '\u0002',
    'ž',
    'ſ',
    '\a',
    '\u0006',
    '\u0002',
    '\u0002',
    'ſ',
    'Ə',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ƀ',
    'Ɓ',
    '\a',
    '\u0005',
    '\u0002',
    '\u0002',
    'Ɓ',
    'Ƃ',
    '\u0005',
    '\u0004',
    '\u0003',
    '\u0002',
    'Ƃ',
    'ƃ',
    '\a',
    '\u0006',
    '\u0002',
    '\u0002',
    'ƃ',
    'Ə',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ƅ',
    'ƅ',
    '\a',
    '\'',
    '\u0002',
    '\u0002',
    'ƅ',
    'Ɔ',
    '\a',
    '\u0005',
    '\u0002',
    '\u0002',
    'Ɔ',
    'Ƈ',
    '\u0005',
    '\u0004',
    '\u0003',
    '\u0002',
    'Ƈ',
    'ƈ',
    '\a',
    '\u0006',
    '\u0002',
    '\u0002',
    'ƈ',
    'Ə',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ɖ',
    'Ɗ',
    '\a',
    '\u001F',
    '\u0002',
    '\u0002',
    'Ɗ',
    'Ƌ',
    '\a',
    '\u0005',
    '\u0002',
    '\u0002',
    'Ƌ',
    'ƌ',
    '\u0005',
    '\u0004',
    '\u0003',
    '\u0002',
    'ƌ',
    'ƍ',
    '\a',
    '\u0006',
    '\u0002',
    '\u0002',
    'ƍ',
    'Ə',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ǝ',
    'Ť',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ǝ',
    'Ŧ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ǝ',
    'ŧ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ǝ',
    'Ũ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ǝ',
    'ŭ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ǝ',
    'Ŵ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ǝ',
    'ż',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ǝ',
    'ƀ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ǝ',
    'Ƅ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ǝ',
    'Ɖ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ə',
    'ƚ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ɛ',
    'Ƒ',
    '\f',
    '\u0006',
    '\u0002',
    '\u0002',
    'Ƒ',
    'ƒ',
    '\a',
    '\a',
    '\u0002',
    '\u0002',
    'ƒ',
    'ƙ',
    '\a',
    '>',
    '\u0002',
    '\u0002',
    'Ɠ',
    'Ɣ',
    '\f',
    '\u0005',
    '\u0002',
    '\u0002',
    'Ɣ',
    'ƕ',
    '\a',
    '\b',
    '\u0002',
    '\u0002',
    'ƕ',
    'Ɩ',
    '\u0005',
    '.',
    '\u0018',
    '\u0002',
    'Ɩ',
    'Ɨ',
    '\a',
    '\t',
    '\u0002',
    '\u0002',
    'Ɨ',
    'ƙ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ƙ',
    'Ɛ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ƙ',
    'Ɠ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ƙ',
    'Ɯ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ƚ',
    'Ƙ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ƚ',
    'ƛ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ƛ',
    'O',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ɯ',
    'ƚ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ɲ',
    'Ƣ',
    '\u0005',
    '.',
    '\u0018',
    '\u0002',
    'ƞ',
    'Ɵ',
    '\a',
    '\u0004',
    '\u0002',
    '\u0002',
    'Ɵ',
    'ơ',
    '\u0005',
    '.',
    '\u0018',
    '\u0002',
    'Ơ',
    'ƞ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ơ',
    'Ƥ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ƣ',
    'Ơ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ƣ',
    'ƣ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ƣ',
    'Q',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ƥ',
    'Ƣ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ƥ',
    'ƪ',
    '\u0005',
    'T',
    '+',
    '\u0002',
    'Ʀ',
    'Ƨ',
    '\a',
    '\u0004',
    '\u0002',
    '\u0002',
    'Ƨ',
    'Ʃ',
    '\u0005',
    'T',
    '+',
    '\u0002',
    'ƨ',
    'Ʀ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ʃ',
    'Ƭ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ƪ',
    'ƨ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ƪ',
    'ƫ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ƫ',
    'S',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ƭ',
    'ƪ',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'ƭ',
    'Ʈ',
    '\a',
    '=',
    '\u0002',
    '\u0002',
    'Ʈ',
    'Ư',
    '\a',
    '\v',
    '\u0002',
    '\u0002',
    'Ư',
    'ư',
    '\u0005',
    '.',
    '\u0018',
    '\u0002',
    'ư',
    'U',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    'Ʊ',
    'Ʋ',
    '\t',
    '\t',
    '\u0002',
    '\u0002',
    'Ʋ',
    'W',
    '\u0003',
    '\u0002',
    '\u0002',
    '\u0002',
    ',',
    ']',
    '`',
    'c',
    'f',
    'i',
    'm',
    'p',
    'z',
    '\u0086',
    '\u008C',
    '\u0094',
    '\u0097',
    '\u009C',
    '£',
    '¨',
    '®',
    '\u00BC',
    '\u00BE',
    'Ñ',
    'Ö',
    'ç',
    'î',
    'ù',
    'û',
    'Ă',
    'Ċ',
    'Č',
    'đ',
    'Ě',
    'ğ',
    'Ň',
    'ŉ',
    'Š',
    'Ū',
    'ů',
    'Ŵ',
    'Ź',
    'Ǝ',
    'Ƙ',
    'ƚ',
    'Ƣ',
    'ƪ'
  };
  public static readonly ATN _ATN = new ATNDeserializer().Deserialize(sqlParser._serializedATN);

  [NotNull]
  public override IVocabulary Vocabulary => sqlParser.DefaultVocabulary;

  public override string GrammarFileName => "sql.g4";

  public override string[] RuleNames => sqlParser.ruleNames;

  public override string SerializedAtn => new string(sqlParser._serializedATN);

  static sqlParser()
  {
    sqlParser.decisionToDFA = new DFA[sqlParser._ATN.NumberOfDecisions];
    for (int decision = 0; decision < sqlParser._ATN.NumberOfDecisions; ++decision)
      sqlParser.decisionToDFA[decision] = new DFA(sqlParser._ATN.GetDecisionState(decision), decision);
  }

  public sqlParser(ITokenStream input)
    : this(input, Console.Out, Console.Error)
  {
  }

  public sqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
    : base(input, output, errorOutput)
  {
    this.Interpreter = new ParserATNSimulator((Parser) this, sqlParser._ATN, sqlParser.decisionToDFA, sqlParser.sharedContextCache);
  }

  [RuleVersion(0)]
  public sqlParser.ProgramContext program()
  {
    sqlParser.ProgramContext localctx = new sqlParser.ProgramContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 0, 0);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 86;
      this.sql_query();
      this.State = 87;
      this.Match(-1);
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Sql_queryContext sql_query()
  {
    sqlParser.Sql_queryContext localctx = new sqlParser.Sql_queryContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 2, 1);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 89;
      this.select_clause();
      this.State = 91;
      this.ErrorHandler.Sync((Parser) this);
      if (this.TokenStream.LA(1) == 39)
      {
        this.State = 90;
        this.from_clause();
      }
      this.State = 94;
      this.ErrorHandler.Sync((Parser) this);
      if (this.TokenStream.LA(1) == 56)
      {
        this.State = 93;
        this.where_clause();
      }
      this.State = 97;
      this.ErrorHandler.Sync((Parser) this);
      if (this.TokenStream.LA(1) == 40)
      {
        this.State = 96;
        this.group_by_clause();
      }
      this.State = 100;
      this.ErrorHandler.Sync((Parser) this);
      if (this.TokenStream.LA(1) == 49)
      {
        this.State = 99;
        this.order_by_clause();
      }
      this.State = 103;
      this.ErrorHandler.Sync((Parser) this);
      if (this.TokenStream.LA(1) == 47)
      {
        this.State = 102;
        this.offset_limit_clause();
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Select_clauseContext select_clause()
  {
    sqlParser.Select_clauseContext localctx = new sqlParser.Select_clauseContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 4, 2);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 105;
      this.Match(50);
      this.State = 107;
      this.ErrorHandler.Sync((Parser) this);
      if (this.TokenStream.LA(1) == 35)
      {
        this.State = 106;
        this.Match(35);
      }
      this.State = 110;
      this.ErrorHandler.Sync((Parser) this);
      if (this.TokenStream.LA(1) == 51)
      {
        this.State = 109;
        this.top_spec();
      }
      this.State = 112;
      this.selection();
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Top_specContext top_spec()
  {
    sqlParser.Top_specContext localctx = new sqlParser.Top_specContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 6, 3);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 114;
      this.Match(51);
      this.State = 115;
      switch (this.TokenStream.LA(1))
      {
        case 58:
        case 61:
          this.ErrorHandler.ReportMatch((Parser) this);
          this.Consume();
          break;
        default:
          this.ErrorHandler.RecoverInline((Parser) this);
          break;
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.SelectionContext selection()
  {
    sqlParser.SelectionContext localctx = new sqlParser.SelectionContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 8, 4);
    try
    {
      this.State = 120;
      this.ErrorHandler.Sync((Parser) this);
      int num = this.TokenStream.LA(1);
      if (num <= 14)
      {
        if (num <= 3)
        {
          if (num != 1)
          {
            if (num != 3)
              goto label_13;
          }
          else
          {
            this.EnterOuterAlt((ParserRuleContext) localctx, 1);
            this.State = 117;
            this.select_star_spec();
            goto label_16;
          }
        }
        else if (num != 6 && (uint) (num - 13) > 1U)
          goto label_13;
      }
      else if (num <= 29)
      {
        if ((uint) (num - 25) > 1U && num != 29)
          goto label_13;
      }
      else if ((uint) (num - 37) > 1U)
      {
        switch (num - 45)
        {
          case 0:
          case 1:
          case 7:
          case 8:
          case 9:
          case 13:
          case 14:
          case 15:
          case 16:
            break;
          case 10:
            this.EnterOuterAlt((ParserRuleContext) localctx, 2);
            this.State = 118;
            this.select_value_spec();
            goto label_16;
          default:
            goto label_13;
        }
      }
      this.EnterOuterAlt((ParserRuleContext) localctx, 3);
      this.State = 119;
      this.select_list_spec();
      goto label_16;
label_13:
      throw new NoViableAltException((Parser) this);
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
label_16:
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Select_star_specContext select_star_spec()
  {
    sqlParser.Select_star_specContext localctx = new sqlParser.Select_star_specContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 10, 5);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 122;
      this.Match(1);
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Select_value_specContext select_value_spec()
  {
    sqlParser.Select_value_specContext localctx = new sqlParser.Select_value_specContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 12, 6);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 124;
      this.Match(55);
      this.State = 125;
      this.scalar_expression(0);
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Select_list_specContext select_list_spec()
  {
    sqlParser.Select_list_specContext localctx = new sqlParser.Select_list_specContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 14, 7);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = (int) sbyte.MaxValue;
      this.select_item();
      this.State = 132;
      this.ErrorHandler.Sync((Parser) this);
      for (int index = this.TokenStream.LA(1); index == 2; index = this.TokenStream.LA(1))
      {
        this.State = 128;
        this.Match(2);
        this.State = 129;
        this.select_item();
        this.State = 134;
        this.ErrorHandler.Sync((Parser) this);
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Select_itemContext select_item()
  {
    sqlParser.Select_itemContext localctx = new sqlParser.Select_itemContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 16, 8);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 135;
      this.scalar_expression(0);
      this.State = 138;
      this.ErrorHandler.Sync((Parser) this);
      if (this.TokenStream.LA(1) == 30)
      {
        this.State = 136;
        this.Match(30);
        this.State = 137;
        this.Match(60);
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.From_clauseContext from_clause()
  {
    sqlParser.From_clauseContext localctx = new sqlParser.From_clauseContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 18, 9);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 140;
      this.Match(39);
      this.State = 141;
      this.collection_expression(0);
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Collection_expressionContext collection_expression() => this.collection_expression(0);

  private sqlParser.Collection_expressionContext collection_expression(int _p)
  {
    ParserRuleContext context = this.Context;
    int state1 = this.State;
    sqlParser.Collection_expressionContext expressionContext = new sqlParser.Collection_expressionContext(this.Context, state1);
    int state2 = 20;
    this.EnterRecursionRule((ParserRuleContext) expressionContext, 20, 10, _p);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) expressionContext, 1);
      this.State = 154;
      this.ErrorHandler.Sync((Parser) this);
      switch (this.Interpreter.AdaptivePredict(this.TokenStream, 12, this.Context))
      {
        case 1:
          expressionContext = (sqlParser.Collection_expressionContext) new sqlParser.AliasedCollectionExpressionContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 144;
          this.collection();
          this.State = 149;
          this.ErrorHandler.Sync((Parser) this);
          if (this.Interpreter.AdaptivePredict(this.TokenStream, 11, this.Context) == 1)
          {
            this.State = 146;
            this.ErrorHandler.Sync((Parser) this);
            if (this.TokenStream.LA(1) == 30)
            {
              this.State = 145;
              this.Match(30);
            }
            this.State = 148;
            this.Match(60);
            break;
          }
          break;
        case 2:
          expressionContext = (sqlParser.Collection_expressionContext) new sqlParser.ArrayIteratorCollectionExpressionContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 151;
          this.Match(60);
          this.State = 152;
          this.Match(41);
          this.State = 153;
          this.collection();
          break;
      }
      this.Context.Stop = this.TokenStream.LT(-1);
      this.State = 161;
      this.ErrorHandler.Sync((Parser) this);
      int num = this.Interpreter.AdaptivePredict(this.TokenStream, 13, this.Context);
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_17;
          case 1:
            if (this.ParseListeners != null)
              this.TriggerExitRuleEvent();
            expressionContext = (sqlParser.Collection_expressionContext) new sqlParser.JoinCollectionExpressionContext(new sqlParser.Collection_expressionContext(context, state1));
            this.PushNewRecursionContext((ParserRuleContext) expressionContext, state2, 10);
            this.State = 156;
            if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 1))
            {
              this.State = 157;
              this.Match(42);
              this.State = 158;
              this.collection_expression(2);
              break;
            }
            goto label_11;
        }
        this.State = 163;
        this.ErrorHandler.Sync((Parser) this);
        num = this.Interpreter.AdaptivePredict(this.TokenStream, 13, this.Context);
      }
label_11:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 1)");
    }
    catch (RecognitionException ex)
    {
      expressionContext.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.UnrollRecursionContexts(context);
    }
label_17:
    return expressionContext;
  }

  [RuleVersion(0)]
  public sqlParser.CollectionContext collection()
  {
    sqlParser.CollectionContext collectionContext = new sqlParser.CollectionContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) collectionContext, 22, 11);
    try
    {
      this.State = 172;
      this.ErrorHandler.Sync((Parser) this);
      switch (this.TokenStream.LA(1))
      {
        case 3:
          collectionContext = (sqlParser.CollectionContext) new sqlParser.SubqueryCollectionContext(collectionContext);
          this.EnterOuterAlt((ParserRuleContext) collectionContext, 2);
          this.State = 168;
          this.Match(3);
          this.State = 169;
          this.sql_query();
          this.State = 170;
          this.Match(4);
          break;
        case 60:
          collectionContext = (sqlParser.CollectionContext) new sqlParser.InputPathCollectionContext(collectionContext);
          this.EnterOuterAlt((ParserRuleContext) collectionContext, 1);
          this.State = 164;
          this.Match(60);
          this.State = 166;
          this.ErrorHandler.Sync((Parser) this);
          if (this.Interpreter.AdaptivePredict(this.TokenStream, 14, this.Context) == 1)
          {
            this.State = 165;
            this.path_expression(0);
            break;
          }
          break;
        default:
          throw new NoViableAltException((Parser) this);
      }
    }
    catch (RecognitionException ex)
    {
      collectionContext.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return collectionContext;
  }

  [RuleVersion(0)]
  public sqlParser.Path_expressionContext path_expression() => this.path_expression(0);

  private sqlParser.Path_expressionContext path_expression(int _p)
  {
    ParserRuleContext context = this.Context;
    int state1 = this.State;
    sqlParser.Path_expressionContext expressionContext = new sqlParser.Path_expressionContext(this.Context, state1);
    int state2 = 24;
    this.EnterRecursionRule((ParserRuleContext) expressionContext, 24, 12, _p);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) expressionContext, 1);
      expressionContext = (sqlParser.Path_expressionContext) new sqlParser.EpsilonPathExpressionContext(expressionContext);
      this.Context = (ParserRuleContext) expressionContext;
      this.Context.Stop = this.TokenStream.LT(-1);
      this.State = 188;
      this.ErrorHandler.Sync((Parser) this);
      int num = this.Interpreter.AdaptivePredict(this.TokenStream, 17, this.Context);
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_18;
          case 1:
            if (this.ParseListeners != null)
              this.TriggerExitRuleEvent();
            this.State = 186;
            this.ErrorHandler.Sync((Parser) this);
            switch (this.Interpreter.AdaptivePredict(this.TokenStream, 16, this.Context))
            {
              case 1:
                expressionContext = (sqlParser.Path_expressionContext) new sqlParser.IdentifierPathExpressionContext(new sqlParser.Path_expressionContext(context, state1));
                this.PushNewRecursionContext((ParserRuleContext) expressionContext, state2, 12);
                this.State = 175;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 4))
                {
                  this.State = 176;
                  this.Match(5);
                  this.State = 177;
                  this.Match(60);
                  break;
                }
                goto label_6;
              case 2:
                expressionContext = (sqlParser.Path_expressionContext) new sqlParser.NumberPathExpressionContext(new sqlParser.Path_expressionContext(context, state1));
                this.PushNewRecursionContext((ParserRuleContext) expressionContext, state2, 12);
                this.State = 178;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 3))
                {
                  this.State = 179;
                  this.Match(6);
                  this.State = 180;
                  this.Match(58);
                  this.State = 181;
                  this.Match(7);
                  break;
                }
                goto label_9;
              case 3:
                expressionContext = (sqlParser.Path_expressionContext) new sqlParser.StringPathExpressionContext(new sqlParser.Path_expressionContext(context, state1));
                this.PushNewRecursionContext((ParserRuleContext) expressionContext, state2, 12);
                this.State = 182;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 2))
                {
                  this.State = 183;
                  this.Match(6);
                  this.State = 184;
                  this.Match(59);
                  this.State = 185;
                  this.Match(7);
                  break;
                }
                goto label_12;
            }
            break;
        }
        this.State = 190;
        this.ErrorHandler.Sync((Parser) this);
        num = this.Interpreter.AdaptivePredict(this.TokenStream, 17, this.Context);
      }
label_6:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 4)");
label_9:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 3)");
label_12:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 2)");
    }
    catch (RecognitionException ex)
    {
      expressionContext.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.UnrollRecursionContexts(context);
    }
label_18:
    return expressionContext;
  }

  [RuleVersion(0)]
  public sqlParser.Where_clauseContext where_clause()
  {
    sqlParser.Where_clauseContext localctx = new sqlParser.Where_clauseContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 26, 13);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 191;
      this.Match(56);
      this.State = 192;
      this.scalar_expression(0);
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Group_by_clauseContext group_by_clause()
  {
    sqlParser.Group_by_clauseContext localctx = new sqlParser.Group_by_clauseContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 28, 14);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 194;
      this.Match(40);
      this.State = 195;
      this.Match(33);
      this.State = 196;
      this.scalar_expression_list();
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Order_by_clauseContext order_by_clause()
  {
    sqlParser.Order_by_clauseContext localctx = new sqlParser.Order_by_clauseContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 30, 15);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 198;
      this.Match(49);
      this.State = 199;
      this.Match(33);
      this.State = 200;
      this.order_by_items();
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Order_by_itemsContext order_by_items()
  {
    sqlParser.Order_by_itemsContext localctx = new sqlParser.Order_by_itemsContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 32, 16);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 202;
      this.order_by_item();
      this.State = 207;
      this.ErrorHandler.Sync((Parser) this);
      for (int index = this.TokenStream.LA(1); index == 2; index = this.TokenStream.LA(1))
      {
        this.State = 203;
        this.Match(2);
        this.State = 204;
        this.order_by_item();
        this.State = 209;
        this.ErrorHandler.Sync((Parser) this);
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Order_by_itemContext order_by_item()
  {
    sqlParser.Order_by_itemContext localctx = new sqlParser.Order_by_itemContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 34, 17);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 210;
      this.scalar_expression(0);
      this.State = 212;
      this.ErrorHandler.Sync((Parser) this);
      switch (this.TokenStream.LA(1))
      {
        case 31:
        case 34:
          this.State = 211;
          this.sort_order();
          break;
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Sort_orderContext sort_order()
  {
    sqlParser.Sort_orderContext localctx = new sqlParser.Sort_orderContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 36, 18);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 214;
      switch (this.TokenStream.LA(1))
      {
        case 31:
        case 34:
          this.ErrorHandler.ReportMatch((Parser) this);
          this.Consume();
          break;
        default:
          this.ErrorHandler.RecoverInline((Parser) this);
          break;
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Offset_limit_clauseContext offset_limit_clause()
  {
    sqlParser.Offset_limit_clauseContext localctx = new sqlParser.Offset_limit_clauseContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 38, 19);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 216;
      this.Match(47);
      this.State = 217;
      this.offset_count();
      this.State = 218;
      this.Match(44);
      this.State = 219;
      this.limit_count();
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Offset_countContext offset_count()
  {
    sqlParser.Offset_countContext localctx = new sqlParser.Offset_countContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 40, 20);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 221;
      switch (this.TokenStream.LA(1))
      {
        case 58:
        case 61:
          this.ErrorHandler.ReportMatch((Parser) this);
          this.Consume();
          break;
        default:
          this.ErrorHandler.RecoverInline((Parser) this);
          break;
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Limit_countContext limit_count()
  {
    sqlParser.Limit_countContext localctx = new sqlParser.Limit_countContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 42, 21);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 223;
      switch (this.TokenStream.LA(1))
      {
        case 58:
        case 61:
          this.ErrorHandler.ReportMatch((Parser) this);
          this.Consume();
          break;
        default:
          this.ErrorHandler.RecoverInline((Parser) this);
          break;
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Scalar_expressionContext scalar_expression() => this.scalar_expression(0);

  private sqlParser.Scalar_expressionContext scalar_expression(int _p)
  {
    ParserRuleContext context = this.Context;
    int state1 = this.State;
    sqlParser.Scalar_expressionContext expressionContext = new sqlParser.Scalar_expressionContext(this.Context, state1);
    int state2 = 44;
    this.EnterRecursionRule((ParserRuleContext) expressionContext, 44, 22, _p);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) expressionContext, 1);
      this.State = 236;
      this.ErrorHandler.Sync((Parser) this);
      switch (this.Interpreter.AdaptivePredict(this.TokenStream, 21, this.Context))
      {
        case 1:
          expressionContext = (sqlParser.Scalar_expressionContext) new sqlParser.LogicalScalarExpressionContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 226;
          this.logical_scalar_expression(0);
          break;
        case 2:
          expressionContext = (sqlParser.Scalar_expressionContext) new sqlParser.BetweenScalarExpressionContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 227;
          this.binary_scalar_expression(0);
          this.State = 229;
          this.ErrorHandler.Sync((Parser) this);
          if (this.TokenStream.LA(1) == 45)
          {
            this.State = 228;
            this.Match(45);
          }
          this.State = 231;
          this.Match(32);
          this.State = 232;
          this.binary_scalar_expression(0);
          this.State = 233;
          this.Match(28);
          this.State = 234;
          this.binary_scalar_expression(0);
          break;
      }
      this.Context.Stop = this.TokenStream.LT(-1);
      this.State = 249;
      this.ErrorHandler.Sync((Parser) this);
      int num = this.Interpreter.AdaptivePredict(this.TokenStream, 23, this.Context);
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_20;
          case 1:
            if (this.ParseListeners != null)
              this.TriggerExitRuleEvent();
            this.State = 247;
            this.ErrorHandler.Sync((Parser) this);
            switch (this.Interpreter.AdaptivePredict(this.TokenStream, 22, this.Context))
            {
              case 1:
                expressionContext = (sqlParser.Scalar_expressionContext) new sqlParser.ConditionalScalarExpressionContext(new sqlParser.Scalar_expressionContext(context, state1));
                this.PushNewRecursionContext((ParserRuleContext) expressionContext, state2, 22);
                this.State = 238;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 4))
                {
                  this.State = 239;
                  this.Match(8);
                  this.State = 240;
                  this.scalar_expression(0);
                  this.State = 241;
                  this.Match(9);
                  this.State = 242;
                  this.scalar_expression(5);
                  break;
                }
                goto label_11;
              case 2:
                expressionContext = (sqlParser.Scalar_expressionContext) new sqlParser.CoalesceScalarExpressionContext(new sqlParser.Scalar_expressionContext(context, state1));
                this.PushNewRecursionContext((ParserRuleContext) expressionContext, state2, 22);
                this.State = 244;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 3))
                {
                  this.State = 245;
                  this.Match(10);
                  this.State = 246;
                  this.scalar_expression(4);
                  break;
                }
                goto label_14;
            }
            break;
        }
        this.State = 251;
        this.ErrorHandler.Sync((Parser) this);
        num = this.Interpreter.AdaptivePredict(this.TokenStream, 23, this.Context);
      }
label_11:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 4)");
label_14:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 3)");
    }
    catch (RecognitionException ex)
    {
      expressionContext.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.UnrollRecursionContexts(context);
    }
label_20:
    return expressionContext;
  }

  [RuleVersion(0)]
  public sqlParser.Logical_scalar_expressionContext logical_scalar_expression() => this.logical_scalar_expression(0);

  private sqlParser.Logical_scalar_expressionContext logical_scalar_expression(int _p)
  {
    ParserRuleContext context = this.Context;
    int state1 = this.State;
    sqlParser.Logical_scalar_expressionContext localctx = new sqlParser.Logical_scalar_expressionContext(this.Context, state1);
    int state2 = 46;
    this.EnterRecursionRule((ParserRuleContext) localctx, 46, 23, _p);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 256;
      this.ErrorHandler.Sync((Parser) this);
      switch (this.Interpreter.AdaptivePredict(this.TokenStream, 24, this.Context))
      {
        case 1:
          this.State = 253;
          this.binary_scalar_expression(0);
          break;
        case 2:
          this.State = 254;
          this.in_scalar_expression();
          break;
        case 3:
          this.State = (int) byte.MaxValue;
          this.like_scalar_expression();
          break;
      }
      this.Context.Stop = this.TokenStream.LT(-1);
      this.State = 266;
      this.ErrorHandler.Sync((Parser) this);
      int num = this.Interpreter.AdaptivePredict(this.TokenStream, 26, this.Context);
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_19;
          case 1:
            if (this.ParseListeners != null)
              this.TriggerExitRuleEvent();
            this.State = 264;
            this.ErrorHandler.Sync((Parser) this);
            switch (this.Interpreter.AdaptivePredict(this.TokenStream, 25, this.Context))
            {
              case 1:
                localctx = new sqlParser.Logical_scalar_expressionContext(context, state1);
                this.PushNewRecursionContext((ParserRuleContext) localctx, state2, 23);
                this.State = 258;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 2))
                {
                  this.State = 259;
                  this.Match(28);
                  this.State = 260;
                  this.logical_scalar_expression(3);
                  break;
                }
                goto label_10;
              case 2:
                localctx = new sqlParser.Logical_scalar_expressionContext(context, state1);
                this.PushNewRecursionContext((ParserRuleContext) localctx, state2, 23);
                this.State = 261;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 1))
                {
                  this.State = 262;
                  this.Match(48);
                  this.State = 263;
                  this.logical_scalar_expression(2);
                  break;
                }
                goto label_13;
            }
            break;
        }
        this.State = 268;
        this.ErrorHandler.Sync((Parser) this);
        num = this.Interpreter.AdaptivePredict(this.TokenStream, 26, this.Context);
      }
label_10:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 2)");
label_13:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 1)");
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.UnrollRecursionContexts(context);
    }
label_19:
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.In_scalar_expressionContext in_scalar_expression()
  {
    sqlParser.In_scalar_expressionContext localctx = new sqlParser.In_scalar_expressionContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 48, 24);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 269;
      this.binary_scalar_expression(0);
      this.State = 271;
      this.ErrorHandler.Sync((Parser) this);
      if (this.TokenStream.LA(1) == 45)
      {
        this.State = 270;
        this.Match(45);
      }
      this.State = 273;
      this.Match(41);
      this.State = 274;
      this.Match(3);
      this.State = 275;
      this.scalar_expression_list();
      this.State = 276;
      this.Match(4);
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Like_scalar_expressionContext like_scalar_expression()
  {
    sqlParser.Like_scalar_expressionContext localctx = new sqlParser.Like_scalar_expressionContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 50, 25);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 278;
      this.binary_scalar_expression(0);
      this.State = 280;
      this.ErrorHandler.Sync((Parser) this);
      if (this.TokenStream.LA(1) == 45)
      {
        this.State = 279;
        this.Match(45);
      }
      this.State = 282;
      this.Match(43);
      this.State = 283;
      this.binary_scalar_expression(0);
      this.State = 285;
      this.ErrorHandler.Sync((Parser) this);
      if (this.Interpreter.AdaptivePredict(this.TokenStream, 29, this.Context) == 1)
      {
        this.State = 284;
        this.escape_expression();
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Escape_expressionContext escape_expression()
  {
    sqlParser.Escape_expressionContext localctx = new sqlParser.Escape_expressionContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 52, 26);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 287;
      this.Match(36);
      this.State = 288;
      this.Match(59);
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Binary_scalar_expressionContext binary_scalar_expression() => this.binary_scalar_expression(0);

  private sqlParser.Binary_scalar_expressionContext binary_scalar_expression(int _p)
  {
    ParserRuleContext context = this.Context;
    int state1 = this.State;
    sqlParser.Binary_scalar_expressionContext localctx = new sqlParser.Binary_scalar_expressionContext(this.Context, state1);
    int state2 = 54;
    this.EnterRecursionRule((ParserRuleContext) localctx, 54, 27, _p);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 291;
      this.unary_scalar_expression();
      this.Context.Stop = this.TokenStream.LT(-1);
      this.State = 327;
      this.ErrorHandler.Sync((Parser) this);
      int num = this.Interpreter.AdaptivePredict(this.TokenStream, 31, this.Context);
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_33;
          case 1:
            if (this.ParseListeners != null)
              this.TriggerExitRuleEvent();
            this.State = 325;
            this.ErrorHandler.Sync((Parser) this);
            switch (this.Interpreter.AdaptivePredict(this.TokenStream, 30, this.Context))
            {
              case 1:
                localctx = new sqlParser.Binary_scalar_expressionContext(context, state1);
                this.PushNewRecursionContext((ParserRuleContext) localctx, state2, 27);
                this.State = 293;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 8))
                {
                  this.State = 294;
                  this.multiplicative_operator();
                  this.State = 295;
                  this.binary_scalar_expression(9);
                  break;
                }
                goto label_6;
              case 2:
                localctx = new sqlParser.Binary_scalar_expressionContext(context, state1);
                this.PushNewRecursionContext((ParserRuleContext) localctx, state2, 27);
                this.State = 297;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 7))
                {
                  this.State = 298;
                  this.additive_operator();
                  this.State = 299;
                  this.binary_scalar_expression(8);
                  break;
                }
                goto label_9;
              case 3:
                localctx = new sqlParser.Binary_scalar_expressionContext(context, state1);
                this.PushNewRecursionContext((ParserRuleContext) localctx, state2, 27);
                this.State = 301;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 6))
                {
                  this.State = 302;
                  this.relational_operator();
                  this.State = 303;
                  this.binary_scalar_expression(7);
                  break;
                }
                goto label_12;
              case 4:
                localctx = new sqlParser.Binary_scalar_expressionContext(context, state1);
                this.PushNewRecursionContext((ParserRuleContext) localctx, state2, 27);
                this.State = 305;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 5))
                {
                  this.State = 306;
                  this.equality_operator();
                  this.State = 307;
                  this.binary_scalar_expression(6);
                  break;
                }
                goto label_15;
              case 5:
                localctx = new sqlParser.Binary_scalar_expressionContext(context, state1);
                this.PushNewRecursionContext((ParserRuleContext) localctx, state2, 27);
                this.State = 309;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 4))
                {
                  this.State = 310;
                  this.bitwise_and_operator();
                  this.State = 311;
                  this.binary_scalar_expression(5);
                  break;
                }
                goto label_18;
              case 6:
                localctx = new sqlParser.Binary_scalar_expressionContext(context, state1);
                this.PushNewRecursionContext((ParserRuleContext) localctx, state2, 27);
                this.State = 313;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 3))
                {
                  this.State = 314;
                  this.bitwise_exclusive_or_operator();
                  this.State = 315;
                  this.binary_scalar_expression(4);
                  break;
                }
                goto label_21;
              case 7:
                localctx = new sqlParser.Binary_scalar_expressionContext(context, state1);
                this.PushNewRecursionContext((ParserRuleContext) localctx, state2, 27);
                this.State = 317;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 2))
                {
                  this.State = 318;
                  this.bitwise_inclusive_or_operator();
                  this.State = 319;
                  this.binary_scalar_expression(3);
                  break;
                }
                goto label_24;
              case 8:
                localctx = new sqlParser.Binary_scalar_expressionContext(context, state1);
                this.PushNewRecursionContext((ParserRuleContext) localctx, state2, 27);
                this.State = 321;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 1))
                {
                  this.State = 322;
                  this.string_concat_operator();
                  this.State = 323;
                  this.binary_scalar_expression(2);
                  break;
                }
                goto label_27;
            }
            break;
        }
        this.State = 329;
        this.ErrorHandler.Sync((Parser) this);
        num = this.Interpreter.AdaptivePredict(this.TokenStream, 31, this.Context);
      }
label_6:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 8)");
label_9:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 7)");
label_12:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 6)");
label_15:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 5)");
label_18:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 4)");
label_21:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 3)");
label_24:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 2)");
label_27:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 1)");
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.UnrollRecursionContexts(context);
    }
label_33:
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Multiplicative_operatorContext multiplicative_operator()
  {
    sqlParser.Multiplicative_operatorContext localctx = new sqlParser.Multiplicative_operatorContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 56, 28);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 330;
      int num = this.TokenStream.LA(1);
      if ((num & -64) != 0 || (1L << num & 6146L) == 0L)
      {
        this.ErrorHandler.RecoverInline((Parser) this);
      }
      else
      {
        this.ErrorHandler.ReportMatch((Parser) this);
        this.Consume();
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Additive_operatorContext additive_operator()
  {
    sqlParser.Additive_operatorContext localctx = new sqlParser.Additive_operatorContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 58, 29);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 332;
      switch (this.TokenStream.LA(1))
      {
        case 13:
        case 14:
          this.ErrorHandler.ReportMatch((Parser) this);
          this.Consume();
          break;
        default:
          this.ErrorHandler.RecoverInline((Parser) this);
          break;
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Relational_operatorContext relational_operator()
  {
    sqlParser.Relational_operatorContext localctx = new sqlParser.Relational_operatorContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 60, 30);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 334;
      int num = this.TokenStream.LA(1);
      if ((num & -64) != 0 || (1L << num & 491520L) == 0L)
      {
        this.ErrorHandler.RecoverInline((Parser) this);
      }
      else
      {
        this.ErrorHandler.ReportMatch((Parser) this);
        this.Consume();
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Equality_operatorContext equality_operator()
  {
    sqlParser.Equality_operatorContext localctx = new sqlParser.Equality_operatorContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 62, 31);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 336;
      switch (this.TokenStream.LA(1))
      {
        case 19:
        case 20:
          this.ErrorHandler.ReportMatch((Parser) this);
          this.Consume();
          break;
        default:
          this.ErrorHandler.RecoverInline((Parser) this);
          break;
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Bitwise_and_operatorContext bitwise_and_operator()
  {
    sqlParser.Bitwise_and_operatorContext localctx = new sqlParser.Bitwise_and_operatorContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 64, 32);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 338;
      this.Match(21);
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Bitwise_exclusive_or_operatorContext bitwise_exclusive_or_operator()
  {
    sqlParser.Bitwise_exclusive_or_operatorContext localctx = new sqlParser.Bitwise_exclusive_or_operatorContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 66, 33);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 340;
      this.Match(22);
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Bitwise_inclusive_or_operatorContext bitwise_inclusive_or_operator()
  {
    sqlParser.Bitwise_inclusive_or_operatorContext localctx = new sqlParser.Bitwise_inclusive_or_operatorContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 68, 34);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 342;
      this.Match(23);
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.String_concat_operatorContext string_concat_operator()
  {
    sqlParser.String_concat_operatorContext localctx = new sqlParser.String_concat_operatorContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 70, 35);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 344;
      this.Match(24);
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Unary_scalar_expressionContext unary_scalar_expression()
  {
    sqlParser.Unary_scalar_expressionContext localctx = new sqlParser.Unary_scalar_expressionContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 72, 36);
    try
    {
      this.State = 350;
      this.ErrorHandler.Sync((Parser) this);
      switch (this.TokenStream.LA(1))
      {
        case 3:
        case 6:
        case 26:
        case 29:
        case 37:
        case 38:
        case 46:
        case 52:
        case 53:
        case 54:
        case 58:
        case 59:
        case 60:
        case 61:
          this.EnterOuterAlt((ParserRuleContext) localctx, 1);
          this.State = 346;
          this.primary_expression(0);
          break;
        case 13:
        case 14:
        case 25:
        case 45:
          this.EnterOuterAlt((ParserRuleContext) localctx, 2);
          this.State = 347;
          this.unary_operator();
          this.State = 348;
          this.unary_scalar_expression();
          break;
        default:
          throw new NoViableAltException((Parser) this);
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Unary_operatorContext unary_operator()
  {
    sqlParser.Unary_operatorContext localctx = new sqlParser.Unary_operatorContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 74, 37);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 352;
      int num = this.TokenStream.LA(1);
      if ((num & -64) != 0 || (1L << num & 35184405667840L) == 0L)
      {
        this.ErrorHandler.RecoverInline((Parser) this);
      }
      else
      {
        this.ErrorHandler.ReportMatch((Parser) this);
        this.Consume();
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Primary_expressionContext primary_expression() => this.primary_expression(0);

  private sqlParser.Primary_expressionContext primary_expression(int _p)
  {
    ParserRuleContext context = this.Context;
    int state1 = this.State;
    sqlParser.Primary_expressionContext expressionContext = new sqlParser.Primary_expressionContext(this.Context, state1);
    int state2 = 76;
    this.EnterRecursionRule((ParserRuleContext) expressionContext, 76, 38, _p);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) expressionContext, 1);
      this.State = 396;
      this.ErrorHandler.Sync((Parser) this);
      switch (this.Interpreter.AdaptivePredict(this.TokenStream, 37, this.Context))
      {
        case 1:
          expressionContext = (sqlParser.Primary_expressionContext) new sqlParser.PropertyRefScalarExpressionBaseContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 355;
          this.Match(60);
          break;
        case 2:
          expressionContext = (sqlParser.Primary_expressionContext) new sqlParser.ParameterRefScalarExpressionContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 356;
          this.Match(61);
          break;
        case 3:
          expressionContext = (sqlParser.Primary_expressionContext) new sqlParser.LiteralScalarExpressionContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 357;
          this.literal();
          break;
        case 4:
          expressionContext = (sqlParser.Primary_expressionContext) new sqlParser.ArrayCreateScalarExpressionContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 358;
          this.Match(6);
          this.State = 360;
          this.ErrorHandler.Sync((Parser) this);
          int num1 = this.TokenStream.LA(1);
          if ((num1 & -64) == 0 && (1L << num1 & 4355086805737955400L) != 0L)
          {
            this.State = 359;
            this.scalar_expression_list();
          }
          this.State = 362;
          this.Match(7);
          break;
        case 5:
          expressionContext = (sqlParser.Primary_expressionContext) new sqlParser.ObjectCreateScalarExpressionContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 363;
          this.Match(26);
          this.State = 365;
          this.ErrorHandler.Sync((Parser) this);
          if (this.TokenStream.LA(1) == 59)
          {
            this.State = 364;
            this.object_property_list();
          }
          this.State = 367;
          this.Match(27);
          break;
        case 6:
          expressionContext = (sqlParser.Primary_expressionContext) new sqlParser.FunctionCallScalarExpressionContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 370;
          this.ErrorHandler.Sync((Parser) this);
          if (this.TokenStream.LA(1) == 53)
          {
            this.State = 368;
            this.Match(53);
            this.State = 369;
            this.Match(5);
          }
          this.State = 372;
          this.Match(60);
          this.State = 373;
          this.Match(3);
          this.State = 375;
          this.ErrorHandler.Sync((Parser) this);
          int num2 = this.TokenStream.LA(1);
          if ((num2 & -64) == 0 && (1L << num2 & 4355086805737955400L) != 0L)
          {
            this.State = 374;
            this.scalar_expression_list();
          }
          this.State = 377;
          this.Match(4);
          break;
        case 7:
          expressionContext = (sqlParser.Primary_expressionContext) new sqlParser.ParenthesizedScalarExperessionContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 378;
          this.Match(3);
          this.State = 379;
          this.scalar_expression(0);
          this.State = 380;
          this.Match(4);
          break;
        case 8:
          expressionContext = (sqlParser.Primary_expressionContext) new sqlParser.SubqueryScalarExpressionContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 382;
          this.Match(3);
          this.State = 383;
          this.sql_query();
          this.State = 384;
          this.Match(4);
          break;
        case 9:
          expressionContext = (sqlParser.Primary_expressionContext) new sqlParser.ExistsScalarExpressionContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 386;
          this.Match(37);
          this.State = 387;
          this.Match(3);
          this.State = 388;
          this.sql_query();
          this.State = 389;
          this.Match(4);
          break;
        case 10:
          expressionContext = (sqlParser.Primary_expressionContext) new sqlParser.ArrayScalarExpressionContext(expressionContext);
          this.Context = (ParserRuleContext) expressionContext;
          this.State = 391;
          this.Match(29);
          this.State = 392;
          this.Match(3);
          this.State = 393;
          this.sql_query();
          this.State = 394;
          this.Match(4);
          break;
      }
      this.Context.Stop = this.TokenStream.LT(-1);
      this.State = 408;
      this.ErrorHandler.Sync((Parser) this);
      int num3 = this.Interpreter.AdaptivePredict(this.TokenStream, 39, this.Context);
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 2:
            goto label_34;
          case 1:
            if (this.ParseListeners != null)
              this.TriggerExitRuleEvent();
            this.State = 406;
            this.ErrorHandler.Sync((Parser) this);
            switch (this.Interpreter.AdaptivePredict(this.TokenStream, 38, this.Context))
            {
              case 1:
                expressionContext = (sqlParser.Primary_expressionContext) new sqlParser.PropertyRefScalarExpressionRecursiveContext(new sqlParser.Primary_expressionContext(context, state1));
                this.PushNewRecursionContext((ParserRuleContext) expressionContext, state2, 38);
                this.State = 398;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 4))
                {
                  this.State = 399;
                  this.Match(5);
                  this.State = 400;
                  this.Match(60);
                  break;
                }
                goto label_25;
              case 2:
                expressionContext = (sqlParser.Primary_expressionContext) new sqlParser.MemberIndexerScalarExpressionContext(new sqlParser.Primary_expressionContext(context, state1));
                this.PushNewRecursionContext((ParserRuleContext) expressionContext, state2, 38);
                this.State = 401;
                if (this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 3))
                {
                  this.State = 402;
                  this.Match(6);
                  this.State = 403;
                  this.scalar_expression(0);
                  this.State = 404;
                  this.Match(7);
                  break;
                }
                goto label_28;
            }
            break;
        }
        this.State = 410;
        this.ErrorHandler.Sync((Parser) this);
        num3 = this.Interpreter.AdaptivePredict(this.TokenStream, 39, this.Context);
      }
label_25:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 4)");
label_28:
      throw new FailedPredicateException((Parser) this, "Precpred(Context, 3)");
    }
    catch (RecognitionException ex)
    {
      expressionContext.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.UnrollRecursionContexts(context);
    }
label_34:
    return expressionContext;
  }

  [RuleVersion(0)]
  public sqlParser.Scalar_expression_listContext scalar_expression_list()
  {
    sqlParser.Scalar_expression_listContext localctx = new sqlParser.Scalar_expression_listContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 78, 39);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 411;
      this.scalar_expression(0);
      this.State = 416;
      this.ErrorHandler.Sync((Parser) this);
      for (int index = this.TokenStream.LA(1); index == 2; index = this.TokenStream.LA(1))
      {
        this.State = 412;
        this.Match(2);
        this.State = 413;
        this.scalar_expression(0);
        this.State = 418;
        this.ErrorHandler.Sync((Parser) this);
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Object_property_listContext object_property_list()
  {
    sqlParser.Object_property_listContext localctx = new sqlParser.Object_property_listContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 80, 40);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 419;
      this.object_property();
      this.State = 424;
      this.ErrorHandler.Sync((Parser) this);
      for (int index = this.TokenStream.LA(1); index == 2; index = this.TokenStream.LA(1))
      {
        this.State = 420;
        this.Match(2);
        this.State = 421;
        this.object_property();
        this.State = 426;
        this.ErrorHandler.Sync((Parser) this);
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.Object_propertyContext object_property()
  {
    sqlParser.Object_propertyContext localctx = new sqlParser.Object_propertyContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 82, 41);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 427;
      this.Match(59);
      this.State = 428;
      this.Match(9);
      this.State = 429;
      this.scalar_expression(0);
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  [RuleVersion(0)]
  public sqlParser.LiteralContext literal()
  {
    sqlParser.LiteralContext localctx = new sqlParser.LiteralContext(this.Context, this.State);
    this.EnterRule((ParserRuleContext) localctx, 84, 42);
    try
    {
      this.EnterOuterAlt((ParserRuleContext) localctx, 1);
      this.State = 431;
      int num = this.TokenStream.LA(1);
      if ((num & -64) != 0 || (1L << num & 887279770214072320L) == 0L)
      {
        this.ErrorHandler.RecoverInline((Parser) this);
      }
      else
      {
        this.ErrorHandler.ReportMatch((Parser) this);
        this.Consume();
      }
    }
    catch (RecognitionException ex)
    {
      localctx.exception = ex;
      this.ErrorHandler.ReportError((Parser) this, ex);
      this.ErrorHandler.Recover((Parser) this, ex);
    }
    finally
    {
      this.ExitRule();
    }
    return localctx;
  }

  public override bool Sempred(Antlr4.Runtime.RuleContext _localctx, int ruleIndex, int predIndex)
  {
    switch (ruleIndex)
    {
      case 10:
        return this.collection_expression_sempred((sqlParser.Collection_expressionContext) _localctx, predIndex);
      case 12:
        return this.path_expression_sempred((sqlParser.Path_expressionContext) _localctx, predIndex);
      case 22:
        return this.scalar_expression_sempred((sqlParser.Scalar_expressionContext) _localctx, predIndex);
      case 23:
        return this.logical_scalar_expression_sempred((sqlParser.Logical_scalar_expressionContext) _localctx, predIndex);
      case 27:
        return this.binary_scalar_expression_sempred((sqlParser.Binary_scalar_expressionContext) _localctx, predIndex);
      case 38:
        return this.primary_expression_sempred((sqlParser.Primary_expressionContext) _localctx, predIndex);
      default:
        return true;
    }
  }

  private bool collection_expression_sempred(
    sqlParser.Collection_expressionContext _localctx,
    int predIndex)
  {
    return predIndex != 0 || this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 1);
  }

  private bool path_expression_sempred(sqlParser.Path_expressionContext _localctx, int predIndex)
  {
    switch (predIndex)
    {
      case 1:
        return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 4);
      case 2:
        return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 3);
      case 3:
        return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 2);
      default:
        return true;
    }
  }

  private bool scalar_expression_sempred(
    sqlParser.Scalar_expressionContext _localctx,
    int predIndex)
  {
    if (predIndex == 4)
      return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 4);
    return predIndex != 5 || this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 3);
  }

  private bool logical_scalar_expression_sempred(
    sqlParser.Logical_scalar_expressionContext _localctx,
    int predIndex)
  {
    if (predIndex == 6)
      return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 2);
    return predIndex != 7 || this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 1);
  }

  private bool binary_scalar_expression_sempred(
    sqlParser.Binary_scalar_expressionContext _localctx,
    int predIndex)
  {
    switch (predIndex)
    {
      case 8:
        return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 8);
      case 9:
        return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 7);
      case 10:
        return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 6);
      case 11:
        return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 5);
      case 12:
        return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 4);
      case 13:
        return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 3);
      case 14:
        return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 2);
      case 15:
        return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 1);
      default:
        return true;
    }
  }

  private bool primary_expression_sempred(
    sqlParser.Primary_expressionContext _localctx,
    int predIndex)
  {
    if (predIndex == 16)
      return this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 4);
    return predIndex != 17 || this.Precpred((Antlr4.Runtime.RuleContext) this.Context, 3);
  }

  public class ProgramContext : ParserRuleContext
  {
    public sqlParser.Sql_queryContext sql_query() => this.GetRuleContext<sqlParser.Sql_queryContext>(0);

    public ITerminalNode Eof() => this.GetToken(-1, 0);

    public ProgramContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 0;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterProgram(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitProgram(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitProgram(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Sql_queryContext : ParserRuleContext
  {
    public sqlParser.Select_clauseContext select_clause() => this.GetRuleContext<sqlParser.Select_clauseContext>(0);

    public sqlParser.From_clauseContext from_clause() => this.GetRuleContext<sqlParser.From_clauseContext>(0);

    public sqlParser.Where_clauseContext where_clause() => this.GetRuleContext<sqlParser.Where_clauseContext>(0);

    public sqlParser.Group_by_clauseContext group_by_clause() => this.GetRuleContext<sqlParser.Group_by_clauseContext>(0);

    public sqlParser.Order_by_clauseContext order_by_clause() => this.GetRuleContext<sqlParser.Order_by_clauseContext>(0);

    public sqlParser.Offset_limit_clauseContext offset_limit_clause() => this.GetRuleContext<sqlParser.Offset_limit_clauseContext>(0);

    public Sql_queryContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 1;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterSql_query(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitSql_query(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitSql_query(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Select_clauseContext : ParserRuleContext
  {
    public ITerminalNode K_SELECT() => this.GetToken(50, 0);

    public sqlParser.SelectionContext selection() => this.GetRuleContext<sqlParser.SelectionContext>(0);

    public ITerminalNode K_DISTINCT() => this.GetToken(35, 0);

    public sqlParser.Top_specContext top_spec() => this.GetRuleContext<sqlParser.Top_specContext>(0);

    public Select_clauseContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 2;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterSelect_clause(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitSelect_clause(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitSelect_clause(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Top_specContext : ParserRuleContext
  {
    public ITerminalNode K_TOP() => this.GetToken(51, 0);

    public ITerminalNode NUMERIC_LITERAL() => this.GetToken(58, 0);

    public ITerminalNode PARAMETER() => this.GetToken(61, 0);

    public Top_specContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 3;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterTop_spec(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitTop_spec(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitTop_spec(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class SelectionContext : ParserRuleContext
  {
    public sqlParser.Select_star_specContext select_star_spec() => this.GetRuleContext<sqlParser.Select_star_specContext>(0);

    public sqlParser.Select_value_specContext select_value_spec() => this.GetRuleContext<sqlParser.Select_value_specContext>(0);

    public sqlParser.Select_list_specContext select_list_spec() => this.GetRuleContext<sqlParser.Select_list_specContext>(0);

    public SelectionContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 4;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterSelection(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitSelection(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitSelection(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Select_star_specContext : ParserRuleContext
  {
    public Select_star_specContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 5;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterSelect_star_spec(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitSelect_star_spec(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitSelect_star_spec(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Select_value_specContext : ParserRuleContext
  {
    public ITerminalNode K_VALUE() => this.GetToken(55, 0);

    public sqlParser.Scalar_expressionContext scalar_expression() => this.GetRuleContext<sqlParser.Scalar_expressionContext>(0);

    public Select_value_specContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 6;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterSelect_value_spec(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitSelect_value_spec(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitSelect_value_spec(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Select_list_specContext : ParserRuleContext
  {
    public sqlParser.Select_itemContext[] select_item() => this.GetRuleContexts<sqlParser.Select_itemContext>();

    public sqlParser.Select_itemContext select_item(int i) => this.GetRuleContext<sqlParser.Select_itemContext>(i);

    public Select_list_specContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 7;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterSelect_list_spec(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitSelect_list_spec(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitSelect_list_spec(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Select_itemContext : ParserRuleContext
  {
    public sqlParser.Scalar_expressionContext scalar_expression() => this.GetRuleContext<sqlParser.Scalar_expressionContext>(0);

    public ITerminalNode K_AS() => this.GetToken(30, 0);

    public ITerminalNode IDENTIFIER() => this.GetToken(60, 0);

    public Select_itemContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 8;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterSelect_item(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitSelect_item(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitSelect_item(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class From_clauseContext : ParserRuleContext
  {
    public ITerminalNode K_FROM() => this.GetToken(39, 0);

    public sqlParser.Collection_expressionContext collection_expression() => this.GetRuleContext<sqlParser.Collection_expressionContext>(0);

    public From_clauseContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 9;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterFrom_clause(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitFrom_clause(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitFrom_clause(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Collection_expressionContext : ParserRuleContext
  {
    public Collection_expressionContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 10;

    public Collection_expressionContext()
    {
    }

    public virtual void CopyFrom(sqlParser.Collection_expressionContext context) => this.CopyFrom((ParserRuleContext) context);
  }

  public class JoinCollectionExpressionContext : sqlParser.Collection_expressionContext
  {
    public sqlParser.Collection_expressionContext[] collection_expression() => this.GetRuleContexts<sqlParser.Collection_expressionContext>();

    public sqlParser.Collection_expressionContext collection_expression(int i) => this.GetRuleContext<sqlParser.Collection_expressionContext>(i);

    public ITerminalNode K_JOIN() => this.GetToken(42, 0);

    public JoinCollectionExpressionContext(sqlParser.Collection_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterJoinCollectionExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitJoinCollectionExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitJoinCollectionExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class AliasedCollectionExpressionContext : sqlParser.Collection_expressionContext
  {
    public sqlParser.CollectionContext collection() => this.GetRuleContext<sqlParser.CollectionContext>(0);

    public ITerminalNode IDENTIFIER() => this.GetToken(60, 0);

    public ITerminalNode K_AS() => this.GetToken(30, 0);

    public AliasedCollectionExpressionContext(sqlParser.Collection_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterAliasedCollectionExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitAliasedCollectionExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitAliasedCollectionExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class ArrayIteratorCollectionExpressionContext : sqlParser.Collection_expressionContext
  {
    public ITerminalNode IDENTIFIER() => this.GetToken(60, 0);

    public ITerminalNode K_IN() => this.GetToken(41, 0);

    public sqlParser.CollectionContext collection() => this.GetRuleContext<sqlParser.CollectionContext>(0);

    public ArrayIteratorCollectionExpressionContext(sqlParser.Collection_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterArrayIteratorCollectionExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitArrayIteratorCollectionExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitArrayIteratorCollectionExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class CollectionContext : ParserRuleContext
  {
    public CollectionContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 11;

    public CollectionContext()
    {
    }

    public virtual void CopyFrom(sqlParser.CollectionContext context) => this.CopyFrom((ParserRuleContext) context);
  }

  public class InputPathCollectionContext : sqlParser.CollectionContext
  {
    public ITerminalNode IDENTIFIER() => this.GetToken(60, 0);

    public sqlParser.Path_expressionContext path_expression() => this.GetRuleContext<sqlParser.Path_expressionContext>(0);

    public InputPathCollectionContext(sqlParser.CollectionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterInputPathCollection(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitInputPathCollection(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitInputPathCollection(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class SubqueryCollectionContext : sqlParser.CollectionContext
  {
    public sqlParser.Sql_queryContext sql_query() => this.GetRuleContext<sqlParser.Sql_queryContext>(0);

    public SubqueryCollectionContext(sqlParser.CollectionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterSubqueryCollection(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitSubqueryCollection(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitSubqueryCollection(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Path_expressionContext : ParserRuleContext
  {
    public Path_expressionContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 12;

    public Path_expressionContext()
    {
    }

    public virtual void CopyFrom(sqlParser.Path_expressionContext context) => this.CopyFrom((ParserRuleContext) context);
  }

  public class StringPathExpressionContext : sqlParser.Path_expressionContext
  {
    public sqlParser.Path_expressionContext path_expression() => this.GetRuleContext<sqlParser.Path_expressionContext>(0);

    public ITerminalNode STRING_LITERAL() => this.GetToken(59, 0);

    public StringPathExpressionContext(sqlParser.Path_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterStringPathExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitStringPathExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitStringPathExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class EpsilonPathExpressionContext : sqlParser.Path_expressionContext
  {
    public EpsilonPathExpressionContext(sqlParser.Path_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterEpsilonPathExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitEpsilonPathExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitEpsilonPathExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class IdentifierPathExpressionContext : sqlParser.Path_expressionContext
  {
    public sqlParser.Path_expressionContext path_expression() => this.GetRuleContext<sqlParser.Path_expressionContext>(0);

    public ITerminalNode IDENTIFIER() => this.GetToken(60, 0);

    public IdentifierPathExpressionContext(sqlParser.Path_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterIdentifierPathExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitIdentifierPathExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitIdentifierPathExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class NumberPathExpressionContext : sqlParser.Path_expressionContext
  {
    public sqlParser.Path_expressionContext path_expression() => this.GetRuleContext<sqlParser.Path_expressionContext>(0);

    public ITerminalNode NUMERIC_LITERAL() => this.GetToken(58, 0);

    public NumberPathExpressionContext(sqlParser.Path_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterNumberPathExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitNumberPathExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitNumberPathExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Where_clauseContext : ParserRuleContext
  {
    public ITerminalNode K_WHERE() => this.GetToken(56, 0);

    public sqlParser.Scalar_expressionContext scalar_expression() => this.GetRuleContext<sqlParser.Scalar_expressionContext>(0);

    public Where_clauseContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 13;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterWhere_clause(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitWhere_clause(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitWhere_clause(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Group_by_clauseContext : ParserRuleContext
  {
    public ITerminalNode K_GROUP() => this.GetToken(40, 0);

    public ITerminalNode K_BY() => this.GetToken(33, 0);

    public sqlParser.Scalar_expression_listContext scalar_expression_list() => this.GetRuleContext<sqlParser.Scalar_expression_listContext>(0);

    public Group_by_clauseContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 14;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterGroup_by_clause(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitGroup_by_clause(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitGroup_by_clause(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Order_by_clauseContext : ParserRuleContext
  {
    public ITerminalNode K_ORDER() => this.GetToken(49, 0);

    public ITerminalNode K_BY() => this.GetToken(33, 0);

    public sqlParser.Order_by_itemsContext order_by_items() => this.GetRuleContext<sqlParser.Order_by_itemsContext>(0);

    public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 15;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterOrder_by_clause(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitOrder_by_clause(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitOrder_by_clause(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Order_by_itemsContext : ParserRuleContext
  {
    public sqlParser.Order_by_itemContext[] order_by_item() => this.GetRuleContexts<sqlParser.Order_by_itemContext>();

    public sqlParser.Order_by_itemContext order_by_item(int i) => this.GetRuleContext<sqlParser.Order_by_itemContext>(i);

    public Order_by_itemsContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 16;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterOrder_by_items(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitOrder_by_items(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitOrder_by_items(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Order_by_itemContext : ParserRuleContext
  {
    public sqlParser.Scalar_expressionContext scalar_expression() => this.GetRuleContext<sqlParser.Scalar_expressionContext>(0);

    public sqlParser.Sort_orderContext sort_order() => this.GetRuleContext<sqlParser.Sort_orderContext>(0);

    public Order_by_itemContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 17;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterOrder_by_item(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitOrder_by_item(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitOrder_by_item(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Sort_orderContext : ParserRuleContext
  {
    public ITerminalNode K_ASC() => this.GetToken(31, 0);

    public ITerminalNode K_DESC() => this.GetToken(34, 0);

    public Sort_orderContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 18;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterSort_order(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitSort_order(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitSort_order(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Offset_limit_clauseContext : ParserRuleContext
  {
    public ITerminalNode K_OFFSET() => this.GetToken(47, 0);

    public sqlParser.Offset_countContext offset_count() => this.GetRuleContext<sqlParser.Offset_countContext>(0);

    public ITerminalNode K_LIMIT() => this.GetToken(44, 0);

    public sqlParser.Limit_countContext limit_count() => this.GetRuleContext<sqlParser.Limit_countContext>(0);

    public Offset_limit_clauseContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 19;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterOffset_limit_clause(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitOffset_limit_clause(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitOffset_limit_clause(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Offset_countContext : ParserRuleContext
  {
    public ITerminalNode NUMERIC_LITERAL() => this.GetToken(58, 0);

    public ITerminalNode PARAMETER() => this.GetToken(61, 0);

    public Offset_countContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 20;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterOffset_count(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitOffset_count(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitOffset_count(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Limit_countContext : ParserRuleContext
  {
    public ITerminalNode NUMERIC_LITERAL() => this.GetToken(58, 0);

    public ITerminalNode PARAMETER() => this.GetToken(61, 0);

    public Limit_countContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 21;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterLimit_count(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitLimit_count(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitLimit_count(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Scalar_expressionContext : ParserRuleContext
  {
    public Scalar_expressionContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 22;

    public Scalar_expressionContext()
    {
    }

    public virtual void CopyFrom(sqlParser.Scalar_expressionContext context) => this.CopyFrom((ParserRuleContext) context);
  }

  public class LogicalScalarExpressionContext : sqlParser.Scalar_expressionContext
  {
    public sqlParser.Logical_scalar_expressionContext logical_scalar_expression() => this.GetRuleContext<sqlParser.Logical_scalar_expressionContext>(0);

    public LogicalScalarExpressionContext(sqlParser.Scalar_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterLogicalScalarExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitLogicalScalarExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitLogicalScalarExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class ConditionalScalarExpressionContext : sqlParser.Scalar_expressionContext
  {
    public sqlParser.Scalar_expressionContext[] scalar_expression() => this.GetRuleContexts<sqlParser.Scalar_expressionContext>();

    public sqlParser.Scalar_expressionContext scalar_expression(int i) => this.GetRuleContext<sqlParser.Scalar_expressionContext>(i);

    public ConditionalScalarExpressionContext(sqlParser.Scalar_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterConditionalScalarExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitConditionalScalarExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitConditionalScalarExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class CoalesceScalarExpressionContext : sqlParser.Scalar_expressionContext
  {
    public sqlParser.Scalar_expressionContext[] scalar_expression() => this.GetRuleContexts<sqlParser.Scalar_expressionContext>();

    public sqlParser.Scalar_expressionContext scalar_expression(int i) => this.GetRuleContext<sqlParser.Scalar_expressionContext>(i);

    public CoalesceScalarExpressionContext(sqlParser.Scalar_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterCoalesceScalarExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitCoalesceScalarExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitCoalesceScalarExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class BetweenScalarExpressionContext : sqlParser.Scalar_expressionContext
  {
    public sqlParser.Binary_scalar_expressionContext[] binary_scalar_expression() => this.GetRuleContexts<sqlParser.Binary_scalar_expressionContext>();

    public sqlParser.Binary_scalar_expressionContext binary_scalar_expression(int i) => this.GetRuleContext<sqlParser.Binary_scalar_expressionContext>(i);

    public ITerminalNode K_BETWEEN() => this.GetToken(32, 0);

    public ITerminalNode K_AND() => this.GetToken(28, 0);

    public ITerminalNode K_NOT() => this.GetToken(45, 0);

    public BetweenScalarExpressionContext(sqlParser.Scalar_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterBetweenScalarExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitBetweenScalarExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitBetweenScalarExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Logical_scalar_expressionContext : ParserRuleContext
  {
    public sqlParser.Binary_scalar_expressionContext binary_scalar_expression() => this.GetRuleContext<sqlParser.Binary_scalar_expressionContext>(0);

    public sqlParser.In_scalar_expressionContext in_scalar_expression() => this.GetRuleContext<sqlParser.In_scalar_expressionContext>(0);

    public sqlParser.Like_scalar_expressionContext like_scalar_expression() => this.GetRuleContext<sqlParser.Like_scalar_expressionContext>(0);

    public sqlParser.Logical_scalar_expressionContext[] logical_scalar_expression() => this.GetRuleContexts<sqlParser.Logical_scalar_expressionContext>();

    public sqlParser.Logical_scalar_expressionContext logical_scalar_expression(int i) => this.GetRuleContext<sqlParser.Logical_scalar_expressionContext>(i);

    public ITerminalNode K_AND() => this.GetToken(28, 0);

    public ITerminalNode K_OR() => this.GetToken(48, 0);

    public Logical_scalar_expressionContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 23;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterLogical_scalar_expression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitLogical_scalar_expression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitLogical_scalar_expression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class In_scalar_expressionContext : ParserRuleContext
  {
    public sqlParser.Binary_scalar_expressionContext binary_scalar_expression() => this.GetRuleContext<sqlParser.Binary_scalar_expressionContext>(0);

    public ITerminalNode K_IN() => this.GetToken(41, 0);

    public sqlParser.Scalar_expression_listContext scalar_expression_list() => this.GetRuleContext<sqlParser.Scalar_expression_listContext>(0);

    public ITerminalNode K_NOT() => this.GetToken(45, 0);

    public In_scalar_expressionContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 24;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterIn_scalar_expression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitIn_scalar_expression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitIn_scalar_expression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Like_scalar_expressionContext : ParserRuleContext
  {
    public sqlParser.Binary_scalar_expressionContext[] binary_scalar_expression() => this.GetRuleContexts<sqlParser.Binary_scalar_expressionContext>();

    public sqlParser.Binary_scalar_expressionContext binary_scalar_expression(int i) => this.GetRuleContext<sqlParser.Binary_scalar_expressionContext>(i);

    public ITerminalNode K_LIKE() => this.GetToken(43, 0);

    public ITerminalNode K_NOT() => this.GetToken(45, 0);

    public sqlParser.Escape_expressionContext escape_expression() => this.GetRuleContext<sqlParser.Escape_expressionContext>(0);

    public Like_scalar_expressionContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 25;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterLike_scalar_expression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitLike_scalar_expression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitLike_scalar_expression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Escape_expressionContext : ParserRuleContext
  {
    public ITerminalNode K_ESCAPE() => this.GetToken(36, 0);

    public ITerminalNode STRING_LITERAL() => this.GetToken(59, 0);

    public Escape_expressionContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 26;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterEscape_expression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitEscape_expression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitEscape_expression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Binary_scalar_expressionContext : ParserRuleContext
  {
    public sqlParser.Unary_scalar_expressionContext unary_scalar_expression() => this.GetRuleContext<sqlParser.Unary_scalar_expressionContext>(0);

    public sqlParser.Binary_scalar_expressionContext[] binary_scalar_expression() => this.GetRuleContexts<sqlParser.Binary_scalar_expressionContext>();

    public sqlParser.Binary_scalar_expressionContext binary_scalar_expression(int i) => this.GetRuleContext<sqlParser.Binary_scalar_expressionContext>(i);

    public sqlParser.Multiplicative_operatorContext multiplicative_operator() => this.GetRuleContext<sqlParser.Multiplicative_operatorContext>(0);

    public sqlParser.Additive_operatorContext additive_operator() => this.GetRuleContext<sqlParser.Additive_operatorContext>(0);

    public sqlParser.Relational_operatorContext relational_operator() => this.GetRuleContext<sqlParser.Relational_operatorContext>(0);

    public sqlParser.Equality_operatorContext equality_operator() => this.GetRuleContext<sqlParser.Equality_operatorContext>(0);

    public sqlParser.Bitwise_and_operatorContext bitwise_and_operator() => this.GetRuleContext<sqlParser.Bitwise_and_operatorContext>(0);

    public sqlParser.Bitwise_exclusive_or_operatorContext bitwise_exclusive_or_operator() => this.GetRuleContext<sqlParser.Bitwise_exclusive_or_operatorContext>(0);

    public sqlParser.Bitwise_inclusive_or_operatorContext bitwise_inclusive_or_operator() => this.GetRuleContext<sqlParser.Bitwise_inclusive_or_operatorContext>(0);

    public sqlParser.String_concat_operatorContext string_concat_operator() => this.GetRuleContext<sqlParser.String_concat_operatorContext>(0);

    public Binary_scalar_expressionContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 27;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterBinary_scalar_expression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitBinary_scalar_expression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitBinary_scalar_expression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Multiplicative_operatorContext : ParserRuleContext
  {
    public Multiplicative_operatorContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 28;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterMultiplicative_operator(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitMultiplicative_operator(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitMultiplicative_operator(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Additive_operatorContext : ParserRuleContext
  {
    public Additive_operatorContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 29;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterAdditive_operator(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitAdditive_operator(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitAdditive_operator(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Relational_operatorContext : ParserRuleContext
  {
    public Relational_operatorContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 30;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterRelational_operator(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitRelational_operator(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitRelational_operator(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Equality_operatorContext : ParserRuleContext
  {
    public Equality_operatorContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 31;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterEquality_operator(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitEquality_operator(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitEquality_operator(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Bitwise_and_operatorContext : ParserRuleContext
  {
    public Bitwise_and_operatorContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 32;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterBitwise_and_operator(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitBitwise_and_operator(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitBitwise_and_operator(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Bitwise_exclusive_or_operatorContext : ParserRuleContext
  {
    public Bitwise_exclusive_or_operatorContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 33;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterBitwise_exclusive_or_operator(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitBitwise_exclusive_or_operator(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitBitwise_exclusive_or_operator(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Bitwise_inclusive_or_operatorContext : ParserRuleContext
  {
    public Bitwise_inclusive_or_operatorContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 34;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterBitwise_inclusive_or_operator(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitBitwise_inclusive_or_operator(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitBitwise_inclusive_or_operator(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class String_concat_operatorContext : ParserRuleContext
  {
    public String_concat_operatorContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 35;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterString_concat_operator(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitString_concat_operator(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitString_concat_operator(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Unary_scalar_expressionContext : ParserRuleContext
  {
    public sqlParser.Primary_expressionContext primary_expression() => this.GetRuleContext<sqlParser.Primary_expressionContext>(0);

    public sqlParser.Unary_operatorContext unary_operator() => this.GetRuleContext<sqlParser.Unary_operatorContext>(0);

    public sqlParser.Unary_scalar_expressionContext unary_scalar_expression() => this.GetRuleContext<sqlParser.Unary_scalar_expressionContext>(0);

    public Unary_scalar_expressionContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 36;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterUnary_scalar_expression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitUnary_scalar_expression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitUnary_scalar_expression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Unary_operatorContext : ParserRuleContext
  {
    public ITerminalNode K_NOT() => this.GetToken(45, 0);

    public Unary_operatorContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 37;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterUnary_operator(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitUnary_operator(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitUnary_operator(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Primary_expressionContext : ParserRuleContext
  {
    public Primary_expressionContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 38;

    public Primary_expressionContext()
    {
    }

    public virtual void CopyFrom(sqlParser.Primary_expressionContext context) => this.CopyFrom((ParserRuleContext) context);
  }

  public class SubqueryScalarExpressionContext : sqlParser.Primary_expressionContext
  {
    public sqlParser.Sql_queryContext sql_query() => this.GetRuleContext<sqlParser.Sql_queryContext>(0);

    public SubqueryScalarExpressionContext(sqlParser.Primary_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterSubqueryScalarExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitSubqueryScalarExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitSubqueryScalarExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class PropertyRefScalarExpressionBaseContext : sqlParser.Primary_expressionContext
  {
    public ITerminalNode IDENTIFIER() => this.GetToken(60, 0);

    public PropertyRefScalarExpressionBaseContext(sqlParser.Primary_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterPropertyRefScalarExpressionBase(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitPropertyRefScalarExpressionBase(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitPropertyRefScalarExpressionBase(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class FunctionCallScalarExpressionContext : sqlParser.Primary_expressionContext
  {
    public ITerminalNode IDENTIFIER() => this.GetToken(60, 0);

    public ITerminalNode K_UDF() => this.GetToken(53, 0);

    public sqlParser.Scalar_expression_listContext scalar_expression_list() => this.GetRuleContext<sqlParser.Scalar_expression_listContext>(0);

    public FunctionCallScalarExpressionContext(sqlParser.Primary_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterFunctionCallScalarExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitFunctionCallScalarExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitFunctionCallScalarExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class LiteralScalarExpressionContext : sqlParser.Primary_expressionContext
  {
    public sqlParser.LiteralContext literal() => this.GetRuleContext<sqlParser.LiteralContext>(0);

    public LiteralScalarExpressionContext(sqlParser.Primary_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterLiteralScalarExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitLiteralScalarExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitLiteralScalarExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class ObjectCreateScalarExpressionContext : sqlParser.Primary_expressionContext
  {
    public sqlParser.Object_property_listContext object_property_list() => this.GetRuleContext<sqlParser.Object_property_listContext>(0);

    public ObjectCreateScalarExpressionContext(sqlParser.Primary_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterObjectCreateScalarExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitObjectCreateScalarExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitObjectCreateScalarExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class ParenthesizedScalarExperessionContext : sqlParser.Primary_expressionContext
  {
    public sqlParser.Scalar_expressionContext scalar_expression() => this.GetRuleContext<sqlParser.Scalar_expressionContext>(0);

    public ParenthesizedScalarExperessionContext(sqlParser.Primary_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterParenthesizedScalarExperession(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitParenthesizedScalarExperession(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitParenthesizedScalarExperession(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class ParameterRefScalarExpressionContext : sqlParser.Primary_expressionContext
  {
    public ITerminalNode PARAMETER() => this.GetToken(61, 0);

    public ParameterRefScalarExpressionContext(sqlParser.Primary_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterParameterRefScalarExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitParameterRefScalarExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitParameterRefScalarExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class ArrayCreateScalarExpressionContext : sqlParser.Primary_expressionContext
  {
    public sqlParser.Scalar_expression_listContext scalar_expression_list() => this.GetRuleContext<sqlParser.Scalar_expression_listContext>(0);

    public ArrayCreateScalarExpressionContext(sqlParser.Primary_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterArrayCreateScalarExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitArrayCreateScalarExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitArrayCreateScalarExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class ExistsScalarExpressionContext : sqlParser.Primary_expressionContext
  {
    public ITerminalNode K_EXISTS() => this.GetToken(37, 0);

    public sqlParser.Sql_queryContext sql_query() => this.GetRuleContext<sqlParser.Sql_queryContext>(0);

    public ExistsScalarExpressionContext(sqlParser.Primary_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterExistsScalarExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitExistsScalarExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitExistsScalarExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class ArrayScalarExpressionContext : sqlParser.Primary_expressionContext
  {
    public ITerminalNode K_ARRAY() => this.GetToken(29, 0);

    public sqlParser.Sql_queryContext sql_query() => this.GetRuleContext<sqlParser.Sql_queryContext>(0);

    public ArrayScalarExpressionContext(sqlParser.Primary_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterArrayScalarExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitArrayScalarExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitArrayScalarExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class MemberIndexerScalarExpressionContext : sqlParser.Primary_expressionContext
  {
    public sqlParser.Primary_expressionContext primary_expression() => this.GetRuleContext<sqlParser.Primary_expressionContext>(0);

    public sqlParser.Scalar_expressionContext scalar_expression() => this.GetRuleContext<sqlParser.Scalar_expressionContext>(0);

    public MemberIndexerScalarExpressionContext(sqlParser.Primary_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterMemberIndexerScalarExpression(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitMemberIndexerScalarExpression(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitMemberIndexerScalarExpression(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class PropertyRefScalarExpressionRecursiveContext : sqlParser.Primary_expressionContext
  {
    public sqlParser.Primary_expressionContext primary_expression() => this.GetRuleContext<sqlParser.Primary_expressionContext>(0);

    public ITerminalNode IDENTIFIER() => this.GetToken(60, 0);

    public PropertyRefScalarExpressionRecursiveContext(sqlParser.Primary_expressionContext context) => this.CopyFrom(context);

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterPropertyRefScalarExpressionRecursive(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitPropertyRefScalarExpressionRecursive(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitPropertyRefScalarExpressionRecursive(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Scalar_expression_listContext : ParserRuleContext
  {
    public sqlParser.Scalar_expressionContext[] scalar_expression() => this.GetRuleContexts<sqlParser.Scalar_expressionContext>();

    public sqlParser.Scalar_expressionContext scalar_expression(int i) => this.GetRuleContext<sqlParser.Scalar_expressionContext>(i);

    public Scalar_expression_listContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 39;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterScalar_expression_list(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitScalar_expression_list(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitScalar_expression_list(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Object_property_listContext : ParserRuleContext
  {
    public sqlParser.Object_propertyContext[] object_property() => this.GetRuleContexts<sqlParser.Object_propertyContext>();

    public sqlParser.Object_propertyContext object_property(int i) => this.GetRuleContext<sqlParser.Object_propertyContext>(i);

    public Object_property_listContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 40;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterObject_property_list(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitObject_property_list(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitObject_property_list(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class Object_propertyContext : ParserRuleContext
  {
    public ITerminalNode STRING_LITERAL() => this.GetToken(59, 0);

    public sqlParser.Scalar_expressionContext scalar_expression() => this.GetRuleContext<sqlParser.Scalar_expressionContext>(0);

    public Object_propertyContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 41;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterObject_property(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitObject_property(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitObject_property(this) : visitor.VisitChildren((IRuleNode) this);
  }

  public class LiteralContext : ParserRuleContext
  {
    public ITerminalNode STRING_LITERAL() => this.GetToken(59, 0);

    public ITerminalNode NUMERIC_LITERAL() => this.GetToken(58, 0);

    public ITerminalNode K_TRUE() => this.GetToken(52, 0);

    public ITerminalNode K_FALSE() => this.GetToken(38, 0);

    public ITerminalNode K_NULL() => this.GetToken(46, 0);

    public ITerminalNode K_UNDEFINED() => this.GetToken(54, 0);

    public LiteralContext(ParserRuleContext parent, int invokingState)
      : base(parent, invokingState)
    {
    }

    public override int RuleIndex => 42;

    public override void EnterRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.EnterLiteral(this);
    }

    public override void ExitRule(IParseTreeListener listener)
    {
      if (!(listener is IsqlListener sqlListener))
        return;
      sqlListener.ExitLiteral(this);
    }

    public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) => visitor is IsqlVisitor<TResult> sqlVisitor ? sqlVisitor.VisitLiteral(this) : visitor.VisitChildren((IRuleNode) this);
  }
}
