<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="KanbanReorderItemBeginTitle" xml:space="preserve">
    <value>Drag to change an item's priority</value>
  </data>
  <data name="ScrumTaskRemainingWorkContent" xml:space="preserve">
    <value>How many hours is this task going to take to complete? This estimate is used to plan the sprint and track progress.</value>
  </data>
  <data name="NewFeatureBubbleContentWIT" xml:space="preserve">
    <value>Do you wish you could add a custom field to a work item?  Now you can!  Create an inherited process, migrate your existing projects to it, and start adding custom fields to your work item.  You can also choose where the new field appears on the work item form.</value>
  </data>
  <data name="KanbanWelcomeTitle" xml:space="preserve">
    <value>Welcome to your board</value>
  </data>
  <data name="ScrumBacklogViewWelcomeOkButton" xml:space="preserve">
    <value>Let's plan the sprint</value>
  </data>
  <data name="KanbanFinishWithScrumTitle" xml:space="preserve">
    <value>Congratulations!</value>
  </data>
  <data name="KanbanItem2DiscardedTitle" xml:space="preserve">
    <value>Create another item</value>
  </data>
  <data name="EscKey" xml:space="preserve">
    <value>Esc</value>
  </data>
  <data name="ScrumFinishCancel" xml:space="preserve">
    <value>I've got it from here</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ScrumAddItemTitleContent2" xml:space="preserve">
    <value>Enter a title for your new item. Press {0} when you're done.</value>
  </data>
  <data name="ScrumAddItemTitleContent1" xml:space="preserve">
    <value>Let's add an item to your backlog.</value>
  </data>
  <data name="ScrumSettingUpSprintWaitingTitle" xml:space="preserve">
    <value>Sprint default settings</value>
  </data>
  <data name="KanbanReorderItemBeginContent2" xml:space="preserve">
    <value>Prioritize this item to the top of your backlog.</value>
  </data>
  <data name="KanbanReorderItemBeginContent1" xml:space="preserve">
    <value>Kanban is all about teams pulling work from a prioritized queue.</value>
  </data>
  <data name="KanbanNewItem2Content2" xml:space="preserve">
    <value>Click {0} to add another item to the board.</value>
  </data>
  <data name="KanbanNewItem2Content1" xml:space="preserve">
    <value>Teams work on multiple items at once. In the next few steps, you'll prioritize and update progress on your cards.</value>
  </data>
  <data name="ScrumTaskRemainingWorkTitle" xml:space="preserve">
    <value>Remaining work</value>
  </data>
  <data name="KanbanFinishWithScrumOk" xml:space="preserve">
    <value>Show me Scrum</value>
  </data>
  <data name="ScrumBacklogViewWelcomeTitle" xml:space="preserve">
    <value>Meet your backlog</value>
  </data>
  <data name="KanbanNewItemDiscarded" xml:space="preserve">
    <value>Create a new work item to continue the tutorial.</value>
  </data>
  <data name="ScrumTaskTitleContent2" xml:space="preserve">
    <value>Give your task a title.</value>
  </data>
  <data name="ScrumTaskTitleContent1" xml:space="preserve">
    <value>This is your new task. A task equips your team with details like the owner and estimated work. For now, let's start with something simple.</value>
  </data>
  <data name="KanbanNewItem3Title" xml:space="preserve">
    <value>That's enough items for now</value>
  </data>
  <data name="ScrumAssignTaskDragContent" xml:space="preserve">
    <value>This work isn't assigned to anybody. Assign this task by dragging it to the work details pane on the right.</value>
  </data>
  <data name="KanbanItem2Content" xml:space="preserve">
    <value>Add a brief description, then click away after you are done.</value>
  </data>
  <data name="KanbanNewItem2Title" xml:space="preserve">
    <value>Your item is now in the board! Create one more.</value>
  </data>
  <data name="ScrumTaskTitleTitle" xml:space="preserve">
    <value>Add details to your task</value>
  </data>
  <data name="KanbanNewItem3Content" xml:space="preserve">
    <value>Press {0} or click away to move to the next step.</value>
  </data>
  <data name="ScrumMaster" xml:space="preserve">
    <value>Scrum Master</value>
  </data>
  <data name="KanbanItem2Title" xml:space="preserve">
    <value>Create another item</value>
  </data>
  <data name="KanbanItem1Title" xml:space="preserve">
    <value>Add a title</value>
  </data>
  <data name="KanbanWelcomeOk" xml:space="preserve">
    <value>Learn to use the board</value>
  </data>
  <data name="ScrumAssignTaskDropContent" xml:space="preserve">
    <value>Drop the task on this team member to assign it.</value>
  </data>
  <data name="ScrumNotSoFastContent" xml:space="preserve">
    <value>You'll have plenty of time to add additional details later. For now, let's stick to the basics.</value>
  </data>
  <data name="ScrumBacklogViewWelcomeCancelButton" xml:space="preserve">
    <value>I've got it from here</value>
  </data>
  <data name="ScrumAddItemTitleTitle" xml:space="preserve">
    <value>Create a new item</value>
  </data>
  <data name="KanbanNewItemTitle" xml:space="preserve">
    <value>Create a new item</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="NewFeatureBubbleTitle" xml:space="preserve">
    <value>Work with your favorite services</value>
  </data>
  <data name="ScrumAssignTaskDragTitle" xml:space="preserve">
    <value>Assign a task</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="ScrumOtherSprintLinkClickedContent" xml:space="preserve">
    <value>You'll have plenty of time to check out other sprints later. For now, let's stick to the basics.</value>
  </data>
  <data name="EnterKey" xml:space="preserve">
    <value>Enter</value>
  </data>
  <data name="KanbanNewItemContent1" xml:space="preserve">
    <value>Items are shown as cards and represent your team's to-do list.</value>
  </data>
  <data name="KanbanNewItemContent2" xml:space="preserve">
    <value>Click {0} to add an item to the board.</value>
  </data>
  <data name="ScrumFinishContent1" xml:space="preserve">
    <value>You've got the basics of sprint planning down. Feel free to continue to plan your sprint.</value>
  </data>
  <data name="ScrumFinishContent2" xml:space="preserve">
    <value>Or check out the task board, which is great for running your daily stand-ups.</value>
  </data>
  <data name="NewFeatureBubbleLearnMoreTitle" xml:space="preserve">
    <value>Integrate services with your project</value>
  </data>
  <data name="ScrumTaskSaveCloseTitle" xml:space="preserve">
    <value>Save and close</value>
  </data>
  <data name="ScrumFinishOk" xml:space="preserve">
    <value>Go to the task board</value>
  </data>
  <data name="ScrumAssignTaskDropTitle" xml:space="preserve">
    <value>Assign a task</value>
  </data>
  <data name="ScrumSprintDragContent1" xml:space="preserve">
    <value>All you need to do to assign a work item to a sprint is to drag it from your backlog to a sprint backlog.</value>
  </data>
  <data name="ScrumSprintDragContent2" xml:space="preserve">
    <value>Try dragging one of your items to the current sprint.</value>
  </data>
  <data name="KanbanChangeColumnEndContent" xml:space="preserve">
    <value>Drop to this column to show work has started on this item.</value>
  </data>
  <data name="ScrumCheckoutSprintBacklogContent2" xml:space="preserve">
    <value>Click on the sprint to go to your sprint backlog.</value>
  </data>
  <data name="ScrumCheckoutSprintBacklogContent1" xml:space="preserve">
    <value>We've set up this sprint for you, but you can always configure it later.</value>
  </data>
  <data name="ScrumTaskSaveCloseContent" xml:space="preserve">
    <value>You're ready for the next step. Save and close the work item to see it on the sprint backlog.</value>
  </data>
  <data name="SprintPlanning" xml:space="preserve">
    <value>sprint planning</value>
  </data>
  <data name="KanbanShowMeAgain" xml:space="preserve">
    <value>Show me again</value>
  </data>
  <data name="ScrumAddTaskContent2" xml:space="preserve">
    <value>Click {0} to add a new task now.</value>
  </data>
  <data name="ScrumAddTaskContent1" xml:space="preserve">
    <value>Items are broken down into tasks. Tasks track what work your team needs to do for each item.</value>
  </data>
  <data name="KanbanChangeColumnBeginTitle" xml:space="preserve">
    <value>Moving items across the board</value>
  </data>
  <data name="ScrumSettingUpSprintWaitingContent" xml:space="preserve">
    <value>We're setting up some default values for your convenience. Hold tight.</value>
  </data>
  <data name="KanbanFinishWithScrumContent2" xml:space="preserve">
    <value>Get to work now using Kanban, or we can teach you how to be a {0}.</value>
  </data>
  <data name="KanbanFinishWithScrumContent1" xml:space="preserve">
    <value>You've got the basics down.</value>
  </data>
  <data name="KanbanWelcomeContent" xml:space="preserve">
    <value>The board is a visual picture of your team's workflow. It helps teams keep track and finish existing work in progress before starting new work.</value>
  </data>
  <data name="ScrumCheckoutSprintBacklogTitle" xml:space="preserve">
    <value>Check out your sprint backlog</value>
  </data>
  <data name="KanbanReorderItemEndTitle" xml:space="preserve">
    <value>Drop it here</value>
  </data>
  <data name="ScrumAddTaskTitle" xml:space="preserve">
    <value>Add tasks</value>
  </data>
  <data name="ScrumFinishTitle" xml:space="preserve">
    <value>Congratulations!</value>
  </data>
  <data name="NewFeatureBubbleTitleWIT" xml:space="preserve">
    <value>Add a field to a work item</value>
  </data>
  <data name="KanbanChangeColumnEndTitle" xml:space="preserve">
    <value>Drop it here</value>
  </data>
  <data name="KanbanFinishWithScrumCancel" xml:space="preserve">
    <value>I've got it from here</value>
  </data>
  <data name="KanbanReorderItemEndContent" xml:space="preserve">
    <value>Drag this item to the top to make it the first item for your team to tackle.</value>
  </data>
  <data name="ScrumSprintDragTitle" xml:space="preserve">
    <value>Plan your first sprint</value>
  </data>
  <data name="ScrumBacklogViewWelcomeContent" xml:space="preserve">
    <value>This is where you plan and manage the requirements for your product. Requirements are broken down into smaller tasks during {0}.</value>
  </data>
  <data name="KanbanItem2DiscardedContent" xml:space="preserve">
    <value>Create another work item to continue the tutorial.</value>
  </data>
  <data name="NewFeatureBubbleLearnMoreTitleWIT" xml:space="preserve">
    <value>Customize a work item</value>
  </data>
  <data name="NewFeatureBubbleContent" xml:space="preserve">
    <value>Integrate your favorite cloud services with Azure DevOps Services: create a card in Trello when a work item is created, send a push notification to your team's mobile devices when a build fails and much more. Dozens of services await!</value>
  </data>
  <data name="KanbanWelcomeCancel" xml:space="preserve">
    <value>I'll explore myself</value>
  </data>
  <data name="KanbanChangeColumnBeginContent2" xml:space="preserve">
    <value>Pick up the top item on your list and move it across the board to show progress.</value>
  </data>
  <data name="KanbanChangeColumnBeginContent1" xml:space="preserve">
    <value>Your board helps visualize the progress from start to finish. Your new board comes with a few standard columns. You can customize them later.</value>
  </data>
  <data name="KanbanItem1Content1" xml:space="preserve">
    <value>Cards can be customized to show the information your team cares about. For now, we'll start with just a brief description of the work.</value>
  </data>
  <data name="KanbanItem1Content2" xml:space="preserve">
    <value>Press {0} when you're done.</value>
  </data>
</root>