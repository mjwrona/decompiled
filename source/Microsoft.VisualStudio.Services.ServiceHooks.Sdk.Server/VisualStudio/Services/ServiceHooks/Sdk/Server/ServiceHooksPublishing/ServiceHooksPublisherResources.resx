<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error_EventNotAllowedAtCollectionLevel" xml:space="preserve">
    <value>Subscription for event type '{0}' not allowed at collection level.</value>
  </data>
  <data name="Error_MissingRequiredPublisherInputFormat" xml:space="preserve">
    <value>No value was supplied for publisher input "{0}" which is a required input for publisher "{1}" and event type "{2}".</value>
  </data>
  <data name="Error_NotificationSubscriptionNoLongerExistsFormat" xml:space="preserve">
    <value>The notification subscription "{0}" for service hook subscription "{1}" no longer exists.</value>
  </data>
  <data name="TestNotification_MessageFormat" xml:space="preserve">
    <value>Service Hooks Test {0}</value>
  </data>
  <data name="Error_CannotOverrideConsumerSettings" xml:space="preserve">
    <value>Cannot override consumer settings when testing notifications with real data</value>
  </data>
  <data name="TestNotification_MessageDetailsFormat" xml:space="preserve">
    <value>Service Hooks test for publisher "{0}", event type "{1}". Initiated: {2}</value>
  </data>
  <data name="Error_TestNotificationProjectScope" xml:space="preserve">
    <value>Project scope specified in test notification must match project scope of subscription.</value>
  </data>
  <data name="Error_FailedToStartPublisherTemplate" xml:space="preserve">
    <value>Failed to start publisher {0}.</value>
  </data>
  <data name="Error_InvalidEventIdFormat" xml:space="preserve">
    <value>"{0}" is not a valid event type for publisher "{1}".</value>
  </data>
  <data name="Error_DuplicatePublisherIdentifier" xml:space="preserve">
    <value>Duplicate publisher identifier.</value>
  </data>
  <data name="TfsEventDescriptionNone" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="Error_OnPremisesNotSupported" xml:space="preserve">
    <value>On-premises use of Service Hooks is not currently supported.</value>
  </data>
  <data name="Error_UnknownPublisherInputFormat" xml:space="preserve">
    <value>Unknown subscription input "{0}" for publisher "{1}" and event type "{2}".</value>
  </data>
  <data name="Error_NotificationSubscriptionIdNotSpecifiedOnUpdateFormat" xml:space="preserve">
    <value>A notification subscription id was not specified when updating service hooks subscription "{0}".</value>
  </data>
  <data name="Error_NoRegisteredHandlerForSHEventType" xml:space="preserve">
    <value>There is no registered handler for the service hooks event type {0}.</value>
  </data>
  <data name="Error_DuplicateEventTypeRegistrationFormat" xml:space="preserve">
    <value>Duplicate ITfsServiceHooksEventRegistration entries were found for the same event type: {0}.</value>
  </data>
  <data name="Error_InvalidPullRequestPayload" xml:space="preserve">
    <value>Invalid payload. Expected pull_request.</value>
  </data>
  <data name="Error_SubscriberIdMustBeGroupFormat" xml:space="preserve">
    <value>The specified subscriber '{0}' must be a group.</value>
  </data>
  <data name="Error_TestWithRealDataNotSupportedForEventType" xml:space="preserve">
    <value>Testing a subscription with real data is not supported for event type "{0}"</value>
  </data>
  <data name="Error_EditPermissionDenied" xml:space="preserve">
    <value>The user '{0}' does not have permission to edit a subscription.</value>
  </data>
</root>